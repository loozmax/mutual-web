{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, Inject, ɵɵinject, Optional, NgZone, SecurityContext, Sanitizer } from '@angular/core';\nimport { BehaviorSubject, Observable, fromEvent, EMPTY } from 'rxjs';\nimport { WINDOW, ANIMATION_FRAME } from '@ng-web-apis/common';\nimport { startWith, map, share, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { RouterLinkActive } from '@angular/router';\nimport { tuiZoneOptimized, TuiDestroyService, tuiAssert } from '@taiga-ui/cdk';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { TUI_SANITIZER, TUI_ICONS } from '@taiga-ui/core/tokens';\nimport { processIcon } from '@taiga-ui/core/utils/dom';\n/**\n * Service for displaying hints/tooltips\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from 'rxjs';\nimport * as ɵngcc3 from '@taiga-ui/cdk';\nimport * as ɵngcc4 from '@angular/platform-browser';\nlet TuiHintService = /*#__PURE__*/(() => {\n  let TuiHintService = class TuiHintService extends BehaviorSubject {\n    constructor() {\n      super([]);\n      /**\n       * TODO: v2.0\n       * We need the following logic for desribedBy\n       * move it into another service that can register hints and\n       * manage it using TuiHintService inside\n       */\n\n      this.directives = [];\n    }\n\n    add(directive) {\n      this.next(this.value.concat(directive));\n    }\n\n    remove(directive) {\n      if (this.value.includes(directive)) {\n        this.next(this.value.filter(hint => hint !== directive));\n      }\n    }\n\n    register(directive) {\n      this.directives = [...this.directives, directive];\n    }\n\n    unregister(directive) {\n      this.remove(directive);\n      this.directives = this.directives.filter(dir => dir !== directive);\n    }\n\n    showHintForId(id) {\n      const directive = this.findDirectiveWithHintId(id);\n\n      if (directive) {\n        this.add(directive);\n      }\n    }\n\n    hideHintForId(id) {\n      const directive = this.findDirectiveWithHintId(id);\n\n      if (directive) {\n        this.remove(directive);\n      }\n    }\n\n    findDirectiveWithHintId(id) {\n      return this.directives.find(directive => directive.tuiHintId === id);\n    }\n\n  };\n\n  TuiHintService.ɵfac = function TuiHintService_Factory(t) {\n    return new (t || TuiHintService)();\n  };\n\n  TuiHintService.ɵprov = ɵɵdefineInjectable({\n    factory: function TuiHintService_Factory() {\n      return new TuiHintService();\n    },\n    token: TuiHintService,\n    providedIn: \"root\"\n  }); // @dynamic\n\n  return TuiHintService;\n})();\nlet TuiNightThemeService = /*#__PURE__*/(() => {\n  let TuiNightThemeService = class TuiNightThemeService extends Observable {\n    constructor(windowRef) {\n      const media = windowRef.matchMedia('(prefers-color-scheme: dark)');\n      const media$ = fromEvent(media, 'change').pipe(startWith(null), map(() => media.matches), share());\n      super(subscriber => media$.subscribe(subscriber));\n    }\n\n  };\n\n  TuiNightThemeService.ɵfac = function TuiNightThemeService_Factory(t) {\n    return new (t || TuiNightThemeService)(ɵngcc0.ɵɵinject(WINDOW));\n  };\n\n  TuiNightThemeService.ɵprov = ɵɵdefineInjectable({\n    factory: function TuiNightThemeService_Factory() {\n      return new TuiNightThemeService(ɵɵinject(WINDOW));\n    },\n    token: TuiNightThemeService,\n    providedIn: \"root\"\n  });\n  TuiNightThemeService = __decorate([__param(0, Inject(WINDOW))], TuiNightThemeService);\n  return TuiNightThemeService;\n})();\nlet TuiRouterLinkActiveService = /*#__PURE__*/(() => {\n  let TuiRouterLinkActiveService = class TuiRouterLinkActiveService extends Observable {\n    constructor(routerLinkActive, ngZone, animationFrame$, destroy$) {\n      const stream$ = routerLinkActive ? animationFrame$.pipe(map(() => routerLinkActive.isActive), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$)) : EMPTY;\n      super(subscriber => stream$.subscribe(subscriber));\n    }\n\n  };\n\n  TuiRouterLinkActiveService.ɵfac = function TuiRouterLinkActiveService_Factory(t) {\n    return new (t || TuiRouterLinkActiveService)(ɵngcc0.ɵɵinject(RouterLinkActive, 8), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(ANIMATION_FRAME), ɵngcc0.ɵɵinject(TuiDestroyService));\n  };\n\n  TuiRouterLinkActiveService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TuiRouterLinkActiveService,\n    factory: function (t) {\n      return TuiRouterLinkActiveService.ɵfac(t);\n    }\n  });\n  TuiRouterLinkActiveService = __decorate([__param(0, Optional()), __param(0, Inject(RouterLinkActive)), __param(1, Inject(NgZone)), __param(2, Inject(ANIMATION_FRAME)), __param(3, Inject(TuiDestroyService))], TuiRouterLinkActiveService);\n  /**\n   * Service for reusing SVGs without inlining each instance\n   */\n  // @dynamic\n\n  return TuiRouterLinkActiveService;\n})();\nlet TuiSvgService = /*#__PURE__*/(() => {\n  let TuiSvgService = class TuiSvgService {\n    constructor(tuiSanitizer, sanitizer, icons) {\n      this.tuiSanitizer = tuiSanitizer;\n      this.sanitizer = sanitizer;\n      this.originals = {};\n      this.items$ = new BehaviorSubject(new Map());\n      this.define(icons);\n    }\n\n    define(icons) {\n      const {\n        value\n      } = this.items$;\n      Object.keys(icons).forEach(key => {\n        this.defineIcon(key, icons[key], value);\n      });\n      this.items$.next(value);\n    }\n\n    getOriginal(name) {\n      return this.originals[name] || null;\n    }\n\n    defineIcon(name, src, map) {\n      if (map.has(name)) {\n        return;\n      }\n\n      const parsed = this.parseSrc(name, src);\n\n      if (!parsed) {\n        tuiAssert.assert(false, 'Unable to parse given SVG src');\n        return;\n      }\n\n      map.set(name, parsed);\n      this.originals = Object.assign(Object.assign({}, this.originals), {\n        [name]: src\n      });\n    }\n\n    parseSrc(name, src) {\n      return this.sanitize(processIcon(src, name));\n    }\n\n    sanitize(src) {\n      return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src) : this.sanitizer.sanitize(SecurityContext.HTML, src)) || '');\n    }\n\n  };\n\n  TuiSvgService.ɵfac = function TuiSvgService_Factory(t) {\n    return new (t || TuiSvgService)(ɵngcc0.ɵɵinject(TUI_SANITIZER, 8), ɵngcc0.ɵɵinject(DomSanitizer), ɵngcc0.ɵɵinject(TUI_ICONS));\n  };\n\n  TuiSvgService.ɵprov = ɵɵdefineInjectable({\n    factory: function TuiSvgService_Factory() {\n      return new TuiSvgService(ɵɵinject(TUI_SANITIZER, 8), ɵɵinject(DomSanitizer), ɵɵinject(TUI_ICONS));\n    },\n    token: TuiSvgService,\n    providedIn: \"root\"\n  });\n  TuiSvgService = __decorate([__param(0, Optional()), __param(0, Inject(TUI_SANITIZER)), __param(1, Inject(DomSanitizer)), __param(2, Inject(TUI_ICONS))], TuiSvgService);\n  return TuiSvgService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiHintService, TuiNightThemeService, TuiRouterLinkActiveService, TuiSvgService }; //# sourceMappingURL=taiga-ui-core-services.js.map","map":null,"metadata":{},"sourceType":"module"}