{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { forwardRef, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostListener, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, DATE_FILLER_LENGTH, TuiDay, TuiTime, nullableSame, clamp, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, tuiDefaultProp, tuiPure, TuiPreventDefaultModule } from '@taiga-ui/cdk';\nimport { sizeBigger, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { DATE_TIME_SEPARATOR } from '@taiga-ui/kit/constants';\nimport { TUI_CALENDAR_DATA_STREAM, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_TIME_TEXTS, TUI_DATE_TEXTS } from '@taiga-ui/kit/tokens';\nimport { tuiCreateDateMask, tuiCreateTimeMask, tuiCreateAutoCorrectedDateTimePipe } from '@taiga-ui/kit/utils/mask';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { TuiReplayControlValueChangesFactory } from '@taiga-ui/kit/utils/miscellaneous';\nimport { CommonModule } from '@angular/common';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport { TextMaskModule } from 'angular2-text-mask'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/kit/directives';\nimport * as ɵngcc3 from 'angular2-text-mask';\nimport * as ɵngcc4 from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc5 from '@taiga-ui/cdk';\nimport * as ɵngcc6 from '@angular/common';\nimport * as ɵngcc7 from '@angular/forms';\nimport * as ɵngcc8 from 'rxjs';\n\nfunction TuiInputDateTimeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tui-svg\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"icon\", !ctx_r1.computedDisabled);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r1.calendarIcon);\n  }\n}\n\nfunction TuiInputDateTimeComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-calendar\", 6);\n    ɵngcc0.ɵɵlistener(\"dayClick\", function TuiInputDateTimeComponent_ng_template_7_Template_tui_calendar_dayClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onDayClick($event);\n    })(\"monthChange\", function TuiInputDateTimeComponent_ng_template_7_Template_tui_calendar_monthChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.onMonthChange($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"min\", ctx_r3.calendarMinDay)(\"max\", ctx_r3.calendarMaxDay)(\"disabledItemHandler\", ctx_r3.disabledItemHandler)(\"month\", ctx_r3.computedActiveYearMonth)(\"value\", ctx_r3.calendarValue);\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\n\nconst TIME_STREAM_FACTORY = (control, valueTransformer) => TuiReplayControlValueChangesFactory(control, valueTransformer);\n\nconst TUI_INPUT_DATE_TIME_PROVIDERS = [{\n  provide: AbstractTuiControl,\n  useExisting: forwardRef(() => TuiInputDateTimeComponent)\n}, {\n  provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n  useExisting: forwardRef(() => TuiInputDateTimeComponent)\n}, {\n  provide: TUI_CALENDAR_DATA_STREAM,\n  deps: [[new Optional(), new Self(), NgControl], [new Optional(), forwardRef(() => TUI_DATE_TIME_VALUE_TRANSFORMER)]],\n  useFactory: TIME_STREAM_FACTORY\n}, LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER]; // @dynamic\n\nlet TuiInputDateTimeComponent = /*#__PURE__*/(() => {\n  let TuiInputDateTimeComponent = class TuiInputDateTimeComponent extends AbstractTuiControl {\n    constructor(control, changeDetectorRef, textfieldSize, dateFormat, dateSeparator, timeTexts$, dateTexts$, valueTransformer) {\n      super(control, changeDetectorRef, valueTransformer);\n      this.textfieldSize = textfieldSize;\n      this.dateFormat = dateFormat;\n      this.dateSeparator = dateSeparator;\n      this.timeTexts$ = timeTexts$;\n      this.dateTexts$ = dateTexts$;\n      this.valueTransformer = valueTransformer;\n      this.month = null;\n      this.min = TUI_FIRST_DAY;\n      this.max = TUI_LAST_DAY;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.defaultActiveYearMonth = TuiMonth.currentLocal();\n      this.timeMode = 'HH:MM';\n      this.open = false;\n      this.filler$ = combineLatest([this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator))), this.timeTexts$.pipe(pluck(this.timeMode))]).pipe(map(fillers => this.getDateTimeString(...fillers)));\n    }\n\n    get fillerLength() {\n      return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;\n    }\n\n    get textMaskOptions() {\n      return this.calculateMask(this.value[0], this.calendarMinDay, this.calendarMaxDay, this.timeMode, this.dateFormat, this.dateSeparator);\n    }\n\n    get nativeFocusableElement() {\n      return this.textfield ? this.textfield.nativeFocusableElement : null;\n    }\n\n    get focused() {\n      return !!this.textfield && this.textfield.focused;\n    }\n\n    get calendarIcon() {\n      return sizeBigger(this.textfieldSize.size) ? 'tuiIconCalendarLarge' : 'tuiIconCalendar';\n    }\n\n    get computedValue() {\n      const {\n        value,\n        nativeValue,\n        timeMode\n      } = this;\n      const [date, time] = value;\n      const hasTimeInputChars = nativeValue.length > DATE_FILLER_LENGTH;\n\n      if (!date || !time && hasTimeInputChars) {\n        return nativeValue;\n      }\n\n      return this.getDateTimeString(date, time, timeMode);\n    }\n\n    get calendarValue() {\n      return this.value[0];\n    }\n\n    get calendarMinDay() {\n      return Array.isArray(this.min) ? this.min[0] : this.min;\n    }\n\n    get calendarMaxDay() {\n      return Array.isArray(this.max) ? this.max[0] : this.max;\n    }\n\n    get computedActiveYearMonth() {\n      return this.month || this.value[0] || this.defaultActiveYearMonth;\n    }\n\n    get nativeValue() {\n      return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n    }\n\n    set nativeValue(value) {\n      if (!this.nativeFocusableElement) {\n        return;\n      }\n\n      this.nativeFocusableElement.value = value;\n    }\n\n    onClick() {\n      this.open = !this.open;\n    }\n\n    onValueChange(value) {\n      if (!value) {\n        this.onOpenChange(true);\n      }\n\n      if (value.length < DATE_FILLER_LENGTH) {\n        this.updateValue([null, null]);\n        return;\n      }\n\n      const [date, time] = value.split(DATE_TIME_SEPARATOR);\n      const parsedDate = TuiDay.normalizeParse(date, this.dateFormat);\n      const parsedTime = time && time.length === this.timeMode.length ? this.clampTime(TuiTime.fromString(time), parsedDate) : null;\n      this.open = false;\n      this.updateValue([parsedDate, parsedTime]);\n    }\n\n    onDayClick(day) {\n      const modifiedTime = this.value[1] && this.clampTime(this.value[1], day);\n      this.updateValue([day, modifiedTime]);\n      this.updateNativeValue(day);\n      this.open = false;\n    }\n\n    onHovered(hovered) {\n      this.updateHovered(hovered);\n    }\n\n    onMonthChange(month) {\n      this.month = month;\n    }\n\n    onOpenChange(open) {\n      this.open = open;\n    }\n\n    onFocused(focused) {\n      this.updateFocused(focused);\n\n      if (focused || this.value[0] === null || this.value[1] !== null || this.nativeValue.length <= this.fillerLength + DATE_TIME_SEPARATOR.length || this.timeMode === 'HH:MM') {\n        return;\n      }\n\n      const [, time] = this.nativeValue.split(DATE_TIME_SEPARATOR);\n\n      if (!time) {\n        return;\n      }\n\n      const parsedTime = TuiTime.fromString(time);\n      this.updateValue([this.value[0], parsedTime]);\n      setTimeout(() => {\n        if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {\n          this.nativeValue = this.nativeValue.slice(0, -1);\n        }\n      });\n    }\n\n    setDisabledState() {\n      super.setDisabledState();\n      this.open = false;\n    }\n\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = value && (value[0] || value[1]) ? this.computedValue : '';\n    }\n\n    getFallbackValue() {\n      return [null, null];\n    }\n\n    valueIdenticalComparator(oldValue, newValue) {\n      return nullableSame(oldValue[0], newValue[0], (a, b) => a.daySame(b)) && nullableSame(oldValue[1], newValue[1], (a, b) => String(a) === String(b));\n    }\n\n    calculateMask(day, min, max, timeMode, dateFormat, dateSeparator) {\n      return {\n        mask: [...tuiCreateDateMask(dateFormat, dateSeparator), ',', ' ', ...tuiCreateTimeMask(timeMode)],\n        pipe: tuiCreateAutoCorrectedDateTimePipe({\n          value: day,\n          min,\n          max,\n          dateFormat,\n          dateSeparator,\n          timeMode\n        }),\n        guide: false\n      };\n    }\n\n    getDateTimeString(date, time, timeMode = 'HH:MM') {\n      const dateString = date instanceof TuiDay ? date.toString(this.dateFormat, this.dateSeparator) : date;\n      const timeString = time instanceof TuiTime ? time.toString(timeMode) : time || '';\n      return `${dateString}${DATE_TIME_SEPARATOR}${timeString}`;\n    }\n\n    updateNativeValue(day) {\n      const time = this.nativeValue.split(DATE_TIME_SEPARATOR)[1] || '';\n      this.nativeValue = this.getDateTimeString(day, time);\n    }\n\n    clampTime(time, day) {\n      const ms = time.toAbsoluteMilliseconds();\n      const min = Array.isArray(this.min) && day.daySame(this.calendarMinDay) ? this.min[1].toAbsoluteMilliseconds() : -Infinity;\n      const max = Array.isArray(this.max) && day.daySame(this.calendarMaxDay) ? this.max[1].toAbsoluteMilliseconds() : Infinity;\n      return TuiTime.fromAbsoluteMilliseconds(clamp(ms, min, max));\n    }\n\n  };\n\n  TuiInputDateTimeComponent.ɵfac = function TuiInputDateTimeComponent_Factory(t) {\n    return new (t || TuiInputDateTimeComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵngcc0.ɵɵdirectiveInject(TUI_TIME_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_TIME_VALUE_TRANSFORMER, 8));\n  };\n\n  TuiInputDateTimeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiInputDateTimeComponent,\n    selectors: [[\"tui-input-date-time\"]],\n    viewQuery: function TuiInputDateTimeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostBindings: function TuiInputDateTimeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TuiInputDateTimeComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      disabledItemHandler: \"disabledItemHandler\",\n      defaultActiveYearMonth: \"defaultActiveYearMonth\",\n      timeMode: \"timeMode\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature(TUI_INPUT_DATE_TIME_PROVIDERS), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 16,\n    consts: [[1, \"hosted\", 3, \"canOpen\", \"content\", \"open\", \"openChange\"], [\"automation-id\", \"tui-input-date-time__textfield\", \"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"numeric\", 1, \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"invalid\", \"filler\", \"nativeId\", \"readOnly\", \"iconContent\", \"disabled\", \"textMask\", \"value\", \"valueChange\", \"hoveredChange\", \"focusedChange\"], [\"iconContent\", \"\"], [3, \"polymorpheus\"], [\"dropdown\", \"polymorpheus\"], [3, \"src\"], [\"tuiPreventDefault\", \"mousedown\", \"automation-id\", \"tui-input-date-time__calendar\", 3, \"min\", \"max\", \"disabledItemHandler\", \"month\", \"value\", \"dayClick\", \"monthChange\"]],\n    template: function TuiInputDateTimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n        ɵngcc0.ɵɵlistener(\"openChange\", function TuiInputDateTimeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          return ctx.onOpenChange($event);\n        });\n        ɵngcc0.ɵɵelementStart(1, \"tui-primitive-textfield\", 1);\n        ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          return ctx.onValueChange($event);\n        })(\"hoveredChange\", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_hoveredChange_1_listener($event) {\n          return ctx.onHovered($event);\n        })(\"focusedChange\", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_focusedChange_1_listener($event) {\n          return ctx.onFocused($event);\n        });\n        ɵngcc0.ɵɵpipe(2, \"async\");\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵprojection(4, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, TuiInputDateTimeComponent_ng_template_5_Template, 1, 3, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(7, TuiInputDateTimeComponent_ng_template_7_Template, 1, 5, \"ng-template\", 3, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(6);\n\n        const _r2 = ɵngcc0.ɵɵreference(8);\n\n        ɵngcc0.ɵɵproperty(\"canOpen\", ctx.interactive)(\"content\", _r2)(\"open\", ctx.open && ctx.interactive);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.pseudoHovered)(\"invalid\", ctx.computedInvalid)(\"filler\", ɵngcc0.ɵɵpipeBind1(2, 14, ctx.filler$))(\"nativeId\", ctx.nativeId)(\"readOnly\", ctx.readOnly)(\"iconContent\", _r0)(\"disabled\", ctx.computedDisabled)(\"textMask\", ctx.textMaskOptions)(\"value\", ctx.computedValue);\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"polymorpheus\", ctx.type);\n      }\n    },\n    directives: [ɵngcc1.TuiHostedDropdownComponent, ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc2.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc3.MaskedInputDirective, ɵngcc1.TuiSvgComponent, ɵngcc4.PolymorpheusTemplate, ɵngcc1.TuiCalendarComponent, ɵngcc5.TuiPreventDefaultDirective],\n    pipes: [ɵngcc6.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.icon[_ngcontent-%COMP%]{pointer-events:auto}.button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}\"],\n    changeDetection: 0\n  });\n\n  __decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputDateTimeComponent.prototype, \"textfield\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateTimeComponent.prototype, \"min\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateTimeComponent.prototype, \"max\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateTimeComponent.prototype, \"disabledItemHandler\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateTimeComponent.prototype, \"defaultActiveYearMonth\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateTimeComponent.prototype, \"timeMode\", void 0);\n\n  __decorate([HostListener('click')], TuiInputDateTimeComponent.prototype, \"onClick\", null);\n\n  __decorate([tuiPure], TuiInputDateTimeComponent.prototype, \"calculateMask\", null);\n\n  __decorate([tuiPure], TuiInputDateTimeComponent.prototype, \"getDateTimeString\", null);\n\n  TuiInputDateTimeComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_TEXTFIELD_SIZE)), __param(3, Inject(TUI_DATE_FORMAT)), __param(4, Inject(TUI_DATE_SEPARATOR)), __param(5, Inject(TUI_TIME_TEXTS)), __param(6, Inject(TUI_DATE_TEXTS)), __param(7, Optional()), __param(7, Inject(TUI_DATE_TIME_VALUE_TRANSFORMER))], TuiInputDateTimeComponent);\n  return TuiInputDateTimeComponent;\n})();\nvar TuiInputDateTimeDirective_1;\nlet TuiInputDateTimeDirective = TuiInputDateTimeDirective_1 = class TuiInputDateTimeDirective extends TuiAbstractTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n  process(input) {\n    input.inputMode = 'numeric';\n  }\n\n};\n\nTuiInputDateTimeDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputDateTimeDirective_BaseFactory;\n  return function TuiInputDateTimeDirective_Factory(t) {\n    return (ɵTuiInputDateTimeDirective_BaseFactory || (ɵTuiInputDateTimeDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputDateTimeDirective)))(t || TuiInputDateTimeDirective);\n  };\n}();\n\nTuiInputDateTimeDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputDateTimeDirective,\n  selectors: [[\"tui-input-date-time\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputDateTimeDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputDateTimeModule = /*#__PURE__*/(() => {\n  let TuiInputDateTimeModule = class TuiInputDateTimeModule {};\n\n  TuiInputDateTimeModule.ɵfac = function TuiInputDateTimeModule_Factory(t) {\n    return new (t || TuiInputDateTimeModule)();\n  };\n\n  TuiInputDateTimeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputDateTimeModule\n  });\n  TuiInputDateTimeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TextMaskModule, PolymorpheusModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputDateTimeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputDateTimeModule, {\n    declarations: function () {\n      return [TuiInputDateTimeComponent, TuiInputDateTimeDirective];\n    },\n    imports: function () {\n      return [CommonModule, TextMaskModule, PolymorpheusModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule];\n    },\n    exports: function () {\n      return [TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TIME_STREAM_FACTORY, TUI_INPUT_DATE_TIME_PROVIDERS, TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiInputDateTimeModule }; //# sourceMappingURL=taiga-ui-kit-components-input-date-time.js.map","map":null,"metadata":{},"sourceType":"module"}