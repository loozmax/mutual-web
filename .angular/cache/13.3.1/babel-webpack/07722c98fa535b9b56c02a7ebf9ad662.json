{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { AbstractTuiControl, isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiFocusableModule, TuiFocusedModule } from '@taiga-ui/cdk';\nimport { TUI_VALUE_ACCESSOR_PROVIDER } from '@taiga-ui/kit/providers';\nimport { CommonModule } from '@angular/common';\nimport { TuiMaskAccessorModule } from '@taiga-ui/core';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@taiga-ui/core';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@taiga-ui/cdk';\nconst _c0 = [\"native\"];\n\nfunction TuiInputInlineComponent_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [\"*\"];\nvar TuiInputInlineComponent_1;\nlet TuiInputInlineComponent = TuiInputInlineComponent_1 = class TuiInputInlineComponent extends AbstractTuiControl {\n  constructor(control, changeDetectorRef) {\n    super(control, changeDetectorRef);\n    this.maxLength = null;\n  }\n\n  get nativeFocusableElement() {\n    return !this.native ? null : this.native.nativeElement;\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get hasValue() {\n    return this.value !== '';\n  }\n\n  onValueChange(value) {\n    this.updateValue(value);\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  getFallbackValue() {\n    return '';\n  }\n\n};\n\nTuiInputInlineComponent.ɵfac = function TuiInputInlineComponent_Factory(t) {\n  return new (t || TuiInputInlineComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef));\n};\n\nTuiInputInlineComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiInputInlineComponent,\n  selectors: [[\"tui-input-inline\"]],\n  viewQuery: function TuiInputInlineComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.native = _t.first);\n    }\n  },\n  inputs: {\n    maxLength: \"maxLength\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TUI_VALUE_ACCESSOR_PROVIDER, {\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiInputInlineComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 5,\n  vars: 8,\n  consts: [[1, \"t-before\"], [\"automation-id\", \"tui-input-inline__placeholder\", \"class\", \"t-placeholder\", 4, \"ngIf\"], [\"automation-id\", \"tui-input-inline__native\", \"type\", \"text\", \"tuiMaskAccessor\", \"\", 1, \"t-native\", 3, \"id\", \"disabled\", \"readOnly\", \"tuiFocusable\", \"ngModel\", \"ngModelChange\", \"tuiFocusedChange\"], [\"native\", \"\"], [\"automation-id\", \"tui-input-inline__placeholder\", 1, \"t-placeholder\"]],\n  template: function TuiInputInlineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, TuiInputInlineComponent_span_2_Template, 2, 0, \"span\", 1);\n      ɵngcc0.ɵɵelementStart(3, \"input\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function TuiInputInlineComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"tuiFocusedChange\", function TuiInputInlineComponent_Template_input_tuiFocusedChange_3_listener($event) {\n        return ctx.onFocused($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.value);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hasValue);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"disabled\", ctx.computedDisabled)(\"readOnly\", ctx.readOnly)(\"tuiFocusable\", ctx.focusable)(\"ngModel\", ctx.value);\n      ɵngcc0.ɵɵattribute(\"maxLength\", ctx.maxLength);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.TuiMaskAccessorDirective, ɵngcc3.DefaultValueAccessor, ɵngcc4.TuiFocusableDirective, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.TuiFocusedDirective],\n  styles: [\"[_nghost-%COMP%]{position:relative;display:inline-block;overflow:hidden;white-space:nowrap;box-sizing:border-box}.t-before[_ngcontent-%COMP%]{padding-right:.02em;margin-left:1px;visibility:hidden;white-space:pre}.t-placeholder[_ngcontent-%COMP%]{margin-left:-1px}.t-native[_ngcontent-%COMP%]{position:absolute;top:0;left:0;background-color:transparent;padding:inherit;font:inherit;color:inherit;box-sizing:border-box;width:100%;height:100%;border-width:0;text-align:inherit;letter-spacing:inherit;text-indent:inherit;text-transform:inherit;outline:0}\"],\n  changeDetection: 0\n});\n\nTuiInputInlineComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}];\n\n__decorate([ViewChild('native')], TuiInputInlineComponent.prototype, \"native\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputInlineComponent.prototype, \"maxLength\", void 0);\n\nTuiInputInlineComponent = TuiInputInlineComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef))], TuiInputInlineComponent);\nlet TuiInputInlineModule = /*#__PURE__*/(() => {\n  let TuiInputInlineModule = class TuiInputInlineModule {};\n\n  TuiInputInlineModule.ɵfac = function TuiInputInlineModule_Factory(t) {\n    return new (t || TuiInputInlineModule)();\n  };\n\n  TuiInputInlineModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputInlineModule\n  });\n  TuiInputInlineModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiMaskAccessorModule]]\n  });\n  return TuiInputInlineModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputInlineModule, {\n    declarations: function () {\n      return [TuiInputInlineComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiMaskAccessorModule];\n    },\n    exports: function () {\n      return [TuiInputInlineComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiInputInlineComponent, TuiInputInlineModule }; //# sourceMappingURL=taiga-ui-kit-components-input-inline.js.map","map":null,"metadata":{},"sourceType":"module"}