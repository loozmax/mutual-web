{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { AbstractTuiNullableControl, TUI_DEFAULT_IDENTITY_MATCHER, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule } from '@taiga-ui/cdk';\nimport { TuiModeDirective } from '@taiga-ui/core';\nimport { TuiRadioComponent, TuiRadioModule } from '@taiga-ui/kit/components/radio';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from '@taiga-ui/kit/components/radio';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@taiga-ui/core';\nconst _c0 = [\"*\"];\nvar TuiRadioLabeledComponent_1;\nlet TuiRadioLabeledComponent = TuiRadioLabeledComponent_1 = class TuiRadioLabeledComponent extends AbstractTuiNullableControl {\n  constructor(control, changeDetectorRef, modeDirective) {\n    super(control, changeDetectorRef);\n    this.modeDirective = modeDirective;\n    this.size = 'm';\n    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;\n    this.pseudoDisabled = false;\n  }\n\n  get nativeFocusableElement() {\n    return this.radio ? this.radio.nativeFocusableElement : null;\n  }\n\n  get focused() {\n    return !!this.radio && this.radio.focused;\n  }\n\n  get computedDisabled() {\n    return this.disabled || this.pseudoDisabled;\n  }\n\n  get mode() {\n    return this.modeDirective ? this.modeDirective.mode : null;\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onModelChange(value) {\n    this.updateValue(value);\n  }\n\n};\n\nTuiRadioLabeledComponent.ɵfac = function TuiRadioLabeledComponent_Factory(t) {\n  return new (t || TuiRadioLabeledComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TuiModeDirective, 8));\n};\n\nTuiRadioLabeledComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiRadioLabeledComponent,\n  selectors: [[\"tui-radio-labeled\"]],\n  viewQuery: function TuiRadioLabeledComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiRadioComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radio = _t.first);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function TuiRadioLabeledComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-size\", ctx.size)(\"data-mode\", ctx.mode);\n      ɵngcc0.ɵɵclassProp(\"_disabled\", ctx.computedDisabled);\n    }\n  },\n  inputs: {\n    size: \"size\",\n    identityMatcher: \"identityMatcher\",\n    pseudoDisabled: \"pseudoDisabled\",\n    item: \"item\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiRadioLabeledComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 13,\n  consts: [[1, \"wrapper\", 3, \"tuiHoveredChange\", \"tuiPressedChange\"], [3, \"focusable\", \"identityMatcher\", \"name\", \"nativeId\", \"readOnly\", \"pseudoDisabled\", \"pseudoInvalid\", \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"size\", \"item\", \"ngModel\", \"ngModelChange\", \"focusedChange\"], [1, \"content\"]],\n  template: function TuiRadioLabeledComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n      ɵngcc0.ɵɵlistener(\"tuiHoveredChange\", function TuiRadioLabeledComponent_Template_label_tuiHoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"tuiPressedChange\", function TuiRadioLabeledComponent_Template_label_tuiPressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"tui-radio\", 1);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function TuiRadioLabeledComponent_Template_tui_radio_ngModelChange_1_listener($event) {\n        return ctx.onModelChange($event);\n      })(\"focusedChange\", function TuiRadioLabeledComponent_Template_tui_radio_focusedChange_1_listener($event) {\n        return ctx.onFocused($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"focusable\", ctx.focusable)(\"identityMatcher\", ctx.identityMatcher)(\"name\", ctx.computedName)(\"nativeId\", ctx.nativeId)(\"readOnly\", ctx.readOnly)(\"pseudoDisabled\", ctx.computedDisabled)(\"pseudoInvalid\", ctx.computedInvalid)(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.computedHovered)(\"pseudoPressed\", ctx.computedPressed)(\"size\", ctx.size)(\"item\", ctx.item)(\"ngModel\", ctx.value);\n    }\n  },\n  directives: [ɵngcc1.TuiHoveredDirective, ɵngcc1.TuiPressedDirective, ɵngcc2.TuiRadioComponent, ɵngcc3.NgControlStatus, ɵngcc3.NgModel],\n  styles: [\"[_nghost-%COMP%]{position:relative;display:block;font:var(--tui-font-text-s);line-height:1rem}._readonly[_nghost-%COMP%]{pointer-events:none}.wrapper[_ngcontent-%COMP%]{display:inline-flex;max-width:100%;cursor:pointer;vertical-align:top}._disabled[_nghost-%COMP%]   .wrapper[_ngcontent-%COMP%]{cursor:default}[data-mode=onDark][_nghost-%COMP%]   .wrapper[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}.content[_ngcontent-%COMP%]{word-wrap:break-word;min-width:0}[data-size='m'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{margin-left:.5rem}[data-size='l'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);margin-left:.75rem}\"],\n  changeDetection: 0\n});\n\nTuiRadioLabeledComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: TuiModeDirective,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TuiModeDirective]\n  }]\n}];\n\n__decorate([ViewChild(TuiRadioComponent)], TuiRadioLabeledComponent.prototype, \"radio\", void 0);\n\n__decorate([Input()], TuiRadioLabeledComponent.prototype, \"item\", void 0);\n\n__decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiRadioLabeledComponent.prototype, \"size\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiRadioLabeledComponent.prototype, \"identityMatcher\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiRadioLabeledComponent.prototype, \"pseudoDisabled\", void 0);\n\n__decorate([HostBinding('class._disabled')], TuiRadioLabeledComponent.prototype, \"computedDisabled\", null);\n\n__decorate([HostBinding('attr.data-mode')], TuiRadioLabeledComponent.prototype, \"mode\", null);\n\nTuiRadioLabeledComponent = TuiRadioLabeledComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Optional()), __param(2, Inject(TuiModeDirective))], TuiRadioLabeledComponent);\nlet TuiRadioLabeledModule = /*#__PURE__*/(() => {\n  let TuiRadioLabeledModule = class TuiRadioLabeledModule {};\n\n  TuiRadioLabeledModule.ɵfac = function TuiRadioLabeledModule_Factory(t) {\n    return new (t || TuiRadioLabeledModule)();\n  };\n\n  TuiRadioLabeledModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiRadioLabeledModule\n  });\n  TuiRadioLabeledModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiRadioModule]]\n  });\n  return TuiRadioLabeledModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiRadioLabeledModule, {\n    declarations: function () {\n      return [TuiRadioLabeledComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiRadioModule];\n    },\n    exports: function () {\n      return [TuiRadioLabeledComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiRadioLabeledComponent, TuiRadioLabeledModule }; //# sourceMappingURL=taiga-ui-kit-components-radio-labeled.js.map","map":null,"metadata":{},"sourceType":"module"}