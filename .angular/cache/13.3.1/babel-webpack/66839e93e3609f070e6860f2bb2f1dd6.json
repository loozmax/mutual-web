{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RoomService = /*#__PURE__*/(() => {\n  class RoomService {\n    constructor(_httpRequestService) {\n      this._httpRequestService = _httpRequestService;\n    }\n    /**\n     * получение всех комнат\n     * пагинация на бэке\n     * @param page страница с которой начать показывать элементы\n     * @param size кол-во элементов на каждой странице\n     * @returns\n     */\n\n\n    getRooms(page, size) {\n      return this._httpRequestService.get('/api/rooms/rooms', {\n        params: {\n          page,\n          size: 100\n        }\n      });\n    }\n    /**\n     * создание комнаты\n     * @param title\n     * @param teacherId\n     * @returns\n     */\n\n\n    createRoom(title, teacherId) {\n      return this._httpRequestService.post('api/rooms/room', {\n        title,\n        teacherId\n      });\n    }\n    /**\n     * получение комнаты по айди\n     * @param id айди комнаты\n     * @returns\n     */\n\n\n    getRoomById(id) {\n      return this._httpRequestService.get(`api/rooms/room-by-id/${id}`);\n    }\n    /**\n     * получение всех студентов комнаты\n     * @param id айди комнаты\n     * @returns\n     */\n\n\n    getStudentsByRoomId(id, page, size) {\n      return this._httpRequestService.get('/api/profile/room/students/' + id.toString(), {\n        params: {\n          page,\n          size\n        }\n      });\n    }\n    /**\n     * получение всех учителей по айди комнаты\n     * @param id айди комнаты\n     * @returns\n     */\n\n\n    getTeachersByRoomdId(id, page, size) {\n      return this._httpRequestService.get('/api/profile/room/teachers/' + id.toString(), {\n        params: {\n          page,\n          size\n        }\n      });\n    }\n    /**\n     * получение комнаты по коду\n     * @param code\n     * @returns\n     */\n\n\n    getRoomByCode(code) {\n      return this._httpRequestService.get(`api/rooms/room/${code}`);\n    }\n    /**\n     * создание задания\n     * @param task\n     * @returns\n     */\n\n\n    createTask(task) {\n      return this._httpRequestService.post('/api/task', task);\n    }\n\n    getTasks(room_id) {\n      return this._httpRequestService.get('/api/task', {\n        params: {\n          page: 0,\n          size: 1000,\n          room_id\n        }\n      });\n    }\n\n    getTaskById(task_id) {\n      return this._httpRequestService.get('/api/task/' + task_id);\n    }\n\n    deleteTask(task_id) {\n      return this._httpRequestService.delete(`/api/task/${task_id}`);\n    }\n    /**\n     * присоединить студента (авторизованного на данный момент) к комнате по коду\n     * @param roomCode\n     */\n\n\n    joinStudentToRoom(roomCode) {\n      return this._httpRequestService.post(`/api/rooms/student/${roomCode}`, {});\n    }\n\n  }\n\n  RoomService.ɵfac = function RoomService_Factory(t) {\n    return new (t || RoomService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RoomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RoomService,\n    factory: RoomService.ɵfac\n  });\n  return RoomService;\n})();","map":null,"metadata":{},"sourceType":"module"}