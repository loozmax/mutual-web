{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { forwardRef, Optional, Self, Inject, ChangeDetectorRef, Injector, Type, ViewChild, Input, HostListener, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, AbstractTuiNullableControl, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, DATE_FILLER_LENGTH, TuiDay, nullableSame, TUI_IS_MOBILE, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, tuiDefaultProp, TuiPreventDefaultModule, TuiLetModule } from '@taiga-ui/cdk';\nimport { TUI_DEFAULT_MARKER_HANDLER, sizeBigger, TuiDialogService, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { EMPTY_MASK } from '@taiga-ui/kit/constants';\nimport { TUI_CALENDAR_DATA_STREAM, TUI_DATE_VALUE_TRANSFORMER, TUI_MOBILE_CALENDAR, TUI_DATE_TEXTS } from '@taiga-ui/kit/tokens';\nimport { tuiCreateDateMask, tuiCreateAutoCorrectedDatePipe } from '@taiga-ui/kit/utils/mask';\nimport { PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport { Observable } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { TuiReplayControlValueChangesFactory } from '@taiga-ui/kit/utils/miscellaneous';\nimport { CommonModule } from '@angular/common';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { TextMaskModule } from 'angular2-text-mask'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nimport * as ɵngcc3 from '@taiga-ui/kit/directives';\nimport * as ɵngcc4 from 'angular2-text-mask';\nimport * as ɵngcc5 from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc6 from '@angular/common';\nimport * as ɵngcc7 from '@angular/forms';\nimport * as ɵngcc8 from 'rxjs';\n\nfunction TuiInputDateComponent_tui_primitive_textfield_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-primitive-textfield\", 6);\n    ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onValueChange($event);\n    })(\"hoveredChange\", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_hoveredChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onHovered($event);\n    })(\"focusedChange\", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onFocused($event);\n    });\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const filler_r7 = ctx.tuiLet;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    const _r1 = ɵngcc0.ɵɵreference(4);\n\n    const _r3 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"pseudoFocused\", ctx_r0.pseudoFocused)(\"pseudoHovered\", ctx_r0.pseudoHovered)(\"invalid\", ctx_r0.computedInvalid)(\"filler\", ctx_r0.getComputedFiller(filler_r7))(\"nativeId\", ctx_r0.nativeId)(\"readOnly\", ctx_r0.readOnly)(\"focusable\", ctx_r0.computedFocusable)(\"iconContent\", ctx_r0.computedMobile ? _r1 : _r3)(\"disabled\", ctx_r0.computedDisabled)(\"textMask\", ctx_r0.computedMask)(\"value\", ctx_r0.computedValue);\n  }\n}\n\nfunction TuiInputDateComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-svg\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiInputDateComponent_ng_template_3_Template_tui_svg_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onMobileClick();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"icon\", !ctx_r2.computedDisabled);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r2.calendarIcon);\n  }\n}\n\nfunction TuiInputDateComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tui-svg\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"icon\", !ctx_r4.computedDisabled);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r4.calendarIcon);\n  }\n}\n\nfunction TuiInputDateComponent_ng_template_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 11)(1, \"button\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiInputDateComponent_ng_template_7_div_1_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDayClick(ctx_r15.items[0].day);\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r14.items[0], \" \");\n  }\n}\n\nfunction TuiInputDateComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-calendar\", 9);\n    ɵngcc0.ɵɵlistener(\"dayClick\", function TuiInputDateComponent_ng_template_7_Template_tui_calendar_dayClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.onDayClick($event);\n    })(\"monthChange\", function TuiInputDateComponent_ng_template_7_Template_tui_calendar_monthChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.onMonthChange($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(1, TuiInputDateComponent_ng_template_7_div_1_Template, 3, 1, \"div\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"min\", ctx_r6.min)(\"max\", ctx_r6.max)(\"markerHandler\", ctx_r6.markerHandler)(\"disabledItemHandler\", ctx_r6.disabledItemHandler)(\"month\", ctx_r6.computedActiveYearMonth)(\"value\", ctx_r6.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.items.length === 1);\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\n\nconst DATE_STREAM_FACTORY = (control, valueTransformer) => TuiReplayControlValueChangesFactory(control, valueTransformer);\n\nconst TUI_INPUT_DATE_PROVIDERS = [{\n  provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n  useExisting: forwardRef(() => TuiInputDateComponent)\n}, {\n  provide: TUI_CALENDAR_DATA_STREAM,\n  deps: [[new Optional(), new Self(), NgControl], [new Optional(), TUI_DATE_VALUE_TRANSFORMER]],\n  useFactory: DATE_STREAM_FACTORY\n}, {\n  provide: AbstractTuiControl,\n  useExisting: forwardRef(() => TuiInputDateComponent)\n}, LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER]; // @dynamic\n\nlet TuiInputDateComponent = /*#__PURE__*/(() => {\n  let TuiInputDateComponent = class TuiInputDateComponent extends AbstractTuiNullableControl {\n    constructor(control, changeDetectorRef, injector, isMobile, dialogService, mobileCalendar, textfieldSize, dateFormat, dateSeparator, dateTexts$, valueTransformer) {\n      super(control, changeDetectorRef, valueTransformer);\n      this.injector = injector;\n      this.isMobile = isMobile;\n      this.dialogService = dialogService;\n      this.mobileCalendar = mobileCalendar;\n      this.textfieldSize = textfieldSize;\n      this.dateFormat = dateFormat;\n      this.dateSeparator = dateSeparator;\n      this.dateTexts$ = dateTexts$;\n      this.valueTransformer = valueTransformer;\n      this.month = null;\n      this.textMaskOptions = {\n        mask: tuiCreateDateMask(this.dateFormat, this.dateSeparator),\n        pipe: tuiCreateAutoCorrectedDatePipe(this),\n        guide: false\n      };\n      this.min = TUI_FIRST_DAY;\n      this.max = TUI_LAST_DAY;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;\n      this.items = [];\n      this.defaultActiveYearMonth = TuiMonth.currentLocal();\n      this.open = false;\n      this.filler$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));\n    }\n\n    get nativeFocusableElement() {\n      return this.textfield ? this.textfield.nativeFocusableElement : null;\n    }\n\n    get focused() {\n      return !!this.textfield && this.textfield.focused;\n    }\n\n    get computedMobile() {\n      return this.isMobile && !!this.mobileCalendar;\n    }\n\n    get calendarIcon() {\n      return sizeBigger(this.textfieldSize.size) ? 'tuiIconCalendarLarge' : 'tuiIconCalendar';\n    }\n\n    get computedValue() {\n      const {\n        value,\n        nativeValue,\n        activeItem\n      } = this;\n\n      if (activeItem) {\n        return String(activeItem);\n      }\n\n      return value ? value.toString(this.dateFormat, this.dateSeparator) : nativeValue;\n    }\n\n    get computedActiveYearMonth() {\n      if (this.items[0] && this.value && this.value.daySame(this.items[0].day)) {\n        return this.items[0].displayDay;\n      }\n\n      return this.month || this.value || this.defaultActiveYearMonth;\n    }\n\n    get nativeValue() {\n      return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n    }\n\n    set nativeValue(value) {\n      if (!this.nativeFocusableElement) {\n        return;\n      }\n\n      this.nativeFocusableElement.value = value;\n    }\n\n    get canOpen() {\n      return this.interactive && !this.computedMobile;\n    }\n\n    get computedMask() {\n      return this.activeItem ? EMPTY_MASK : this.textMaskOptions;\n    }\n\n    get activeItem() {\n      const {\n        value\n      } = this;\n      return value && this.items.find(item => item.day.daySame(value)) || null;\n    }\n\n    onClick() {\n      if (!this.isMobile) {\n        this.open = !this.open;\n      }\n    }\n\n    getComputedFiller(filler) {\n      return this.activeItem ? '' : filler;\n    }\n\n    onMobileClick() {\n      if (!this.mobileCalendar) {\n        this.open = !this.open;\n        return;\n      }\n\n      this.dialogService.open(new PolymorpheusComponent(this.mobileCalendar, this.injector), {\n        size: 'fullscreen',\n        closeable: false,\n        data: {\n          single: true,\n          min: this.min,\n          max: this.max,\n          disabledItemHandler: this.disabledItemHandler\n        }\n      }).pipe(takeUntil(this.destroy$)).subscribe(value => {\n        this.updateValue(value);\n      });\n    }\n\n    onValueChange(value) {\n      if (this.control) {\n        this.control.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n\n      if (!value) {\n        this.onOpenChange(true);\n      }\n\n      this.updateValue(value.length !== DATE_FILLER_LENGTH ? null : TuiDay.normalizeParse(value, this.dateFormat));\n    }\n\n    onDayClick(value) {\n      this.updateValue(value);\n      this.open = false;\n    }\n\n    onHovered(hovered) {\n      this.updateHovered(hovered);\n    }\n\n    onMonthChange(month) {\n      this.month = month;\n    }\n\n    onOpenChange(open) {\n      this.open = open;\n    }\n\n    onFocused(focused) {\n      this.updateFocused(focused);\n    }\n\n    setDisabledState() {\n      super.setDisabledState();\n      this.open = false;\n    }\n\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = value ? this.computedValue : '';\n    }\n\n    valueIdenticalComparator(oldValue, newValue) {\n      return nullableSame(oldValue, newValue, (a, b) => a.daySame(b));\n    }\n\n  };\n\n  TuiInputDateComponent.ɵfac = function TuiInputDateComponent_Factory(t) {\n    return new (t || TuiInputDateComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(TUI_IS_MOBILE), ɵngcc0.ɵɵdirectiveInject(TuiDialogService), ɵngcc0.ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_VALUE_TRANSFORMER, 8));\n  };\n\n  TuiInputDateComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiInputDateComponent,\n    selectors: [[\"tui-input-date\"]],\n    viewQuery: function TuiInputDateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostBindings: function TuiInputDateComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TuiInputDateComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      disabledItemHandler: \"disabledItemHandler\",\n      markerHandler: \"markerHandler\",\n      items: \"items\",\n      defaultActiveYearMonth: \"defaultActiveYearMonth\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature(TUI_INPUT_DATE_PROVIDERS), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 7,\n    consts: [[1, \"hosted\", 3, \"canOpen\", \"open\", \"content\", \"openChange\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"numeric\", \"class\", \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"invalid\", \"filler\", \"nativeId\", \"readOnly\", \"focusable\", \"iconContent\", \"disabled\", \"textMask\", \"value\", \"valueChange\", \"hoveredChange\", \"focusedChange\", 4, \"tuiLet\"], [\"mobileIconContent\", \"\"], [\"iconContent\", \"\"], [3, \"polymorpheus\"], [\"dropdown\", \"polymorpheus\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"numeric\", 1, \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"invalid\", \"filler\", \"nativeId\", \"readOnly\", \"focusable\", \"iconContent\", \"disabled\", \"textMask\", \"value\", \"valueChange\", \"hoveredChange\", \"focusedChange\"], [\"automation-id\", \"tui-input-date-range__icon\", 3, \"src\", \"click\"], [3, \"src\"], [\"tuiPreventDefault\", \"mousedown\", \"automation-id\", \"tui-input-date__calendar\", 3, \"min\", \"max\", \"markerHandler\", \"disabledItemHandler\", \"month\", \"value\", \"dayClick\", \"monthChange\"], [\"tuiPreventDefault\", \"mousedown\", \"class\", \"button\", 4, \"ngIf\"], [\"tuiPreventDefault\", \"mousedown\", 1, \"button\"], [\"tuiLink\", \"\", \"type\", \"button\", 3, \"click\"]],\n    template: function TuiInputDateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n        ɵngcc0.ɵɵlistener(\"openChange\", function TuiInputDateComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          return ctx.onOpenChange($event);\n        });\n        ɵngcc0.ɵɵtemplate(1, TuiInputDateComponent_tui_primitive_textfield_1_Template, 3, 11, \"tui-primitive-textfield\", 1);\n        ɵngcc0.ɵɵpipe(2, \"async\");\n        ɵngcc0.ɵɵtemplate(3, TuiInputDateComponent_ng_template_3_Template, 1, 3, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(5, TuiInputDateComponent_ng_template_5_Template, 1, 3, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(7, TuiInputDateComponent_ng_template_7_Template, 2, 7, \"ng-template\", 4, 5, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r5 = ɵngcc0.ɵɵreference(8);\n\n        ɵngcc0.ɵɵproperty(\"canOpen\", ctx.canOpen)(\"open\", ctx.open && ctx.canOpen)(\"content\", _r5);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"tuiLet\", ɵngcc0.ɵɵpipeBind1(2, 5, ctx.filler$));\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"polymorpheus\", ctx.type);\n      }\n    },\n    directives: [ɵngcc1.TuiHostedDropdownComponent, ɵngcc2.TuiLetDirective, ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc3.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc4.MaskedInputDirective, ɵngcc1.TuiSvgComponent, ɵngcc5.PolymorpheusTemplate, ɵngcc1.TuiCalendarComponent, ɵngcc2.TuiPreventDefaultDirective, ɵngcc6.NgIf, ɵngcc1.TuiLinkComponent],\n    pipes: [ɵngcc6.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.icon[_ngcontent-%COMP%]{pointer-events:auto}.button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{flex:1;text-align:center}\"],\n    changeDetection: 0\n  });\n\n  __decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputDateComponent.prototype, \"textfield\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateComponent.prototype, \"min\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateComponent.prototype, \"max\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateComponent.prototype, \"disabledItemHandler\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateComponent.prototype, \"markerHandler\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateComponent.prototype, \"items\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateComponent.prototype, \"defaultActiveYearMonth\", void 0);\n\n  __decorate([HostListener('click')], TuiInputDateComponent.prototype, \"onClick\", null);\n\n  TuiInputDateComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(Injector)), __param(3, Inject(TUI_IS_MOBILE)), __param(4, Inject(TuiDialogService)), __param(5, Optional()), __param(5, Inject(TUI_MOBILE_CALENDAR)), __param(6, Inject(TUI_TEXTFIELD_SIZE)), __param(7, Inject(TUI_DATE_FORMAT)), __param(8, Inject(TUI_DATE_SEPARATOR)), __param(9, Inject(TUI_DATE_TEXTS)), __param(10, Optional()), __param(10, Inject(TUI_DATE_VALUE_TRANSFORMER))], TuiInputDateComponent);\n  return TuiInputDateComponent;\n})();\nvar TuiInputDateDirective_1;\nlet TuiInputDateDirective = TuiInputDateDirective_1 = class TuiInputDateDirective extends TuiAbstractTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n  process(input) {\n    input.inputMode = 'numeric';\n  }\n\n};\n\nTuiInputDateDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputDateDirective_BaseFactory;\n  return function TuiInputDateDirective_Factory(t) {\n    return (ɵTuiInputDateDirective_BaseFactory || (ɵTuiInputDateDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputDateDirective)))(t || TuiInputDateDirective);\n  };\n}();\n\nTuiInputDateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputDateDirective,\n  selectors: [[\"tui-input-date\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputDateDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputDateModule = /*#__PURE__*/(() => {\n  let TuiInputDateModule = class TuiInputDateModule {};\n\n  TuiInputDateModule.ɵfac = function TuiInputDateModule_Factory(t) {\n    return new (t || TuiInputDateModule)();\n  };\n\n  TuiInputDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputDateModule\n  });\n  TuiInputDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TextMaskModule, PolymorpheusModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiLetModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputDateModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputDateModule, {\n    declarations: function () {\n      return [TuiInputDateComponent, TuiInputDateDirective];\n    },\n    imports: function () {\n      return [CommonModule, TextMaskModule, PolymorpheusModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiLetModule, TuiTextfieldControllerModule];\n    },\n    exports: function () {\n      return [TuiInputDateComponent, TuiInputDateDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DATE_STREAM_FACTORY, TUI_INPUT_DATE_PROVIDERS, TuiInputDateComponent, TuiInputDateDirective, TuiInputDateModule }; //# sourceMappingURL=taiga-ui-kit-components-input-date.js.map","map":null,"metadata":{},"sourceType":"module"}