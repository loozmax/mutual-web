{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { SecurityContext, Inject, Sanitizer, Optional, ElementRef, Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WINDOW, USER_AGENT } from '@ng-web-apis/common';\nimport { isIE, getDocumentOrShadowRoot, tuiCustomEvent, tuiAssert, TuiStaticRequestService, tuiRequiredSetter, tuiPure, TuiLetModule } from '@taiga-ui/cdk';\nimport { TUI_ICON_ERROR } from '@taiga-ui/core/constants';\nimport { TuiSvgService } from '@taiga-ui/core/services';\nimport { TUI_ICONS_PATH, TUI_SANITIZER, TUI_SVG_SRC_PROCESSOR } from '@taiga-ui/core/tokens';\nimport { isPresumedHTMLString } from '@taiga-ui/core/utils/miscellaneous';\nimport { ReplaySubject, of } from 'rxjs';\nimport { switchMap, startWith, catchError, map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@taiga-ui/core/services';\nimport * as ɵngcc4 from '@angular/platform-browser';\n\nfunction TuiSvgComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const innerHTML_r1 = ɵngcc0.ɵɵnextContext().tuiLet;\n    ɵngcc0.ɵɵproperty(\"innerHTML\", innerHTML_r1, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction TuiSvgComponent_ng_container_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 4);\n    ɵngcc0.ɵɵlistener(\"error\", function TuiSvgComponent_ng_container_0_ng_template_2_Template__svg_svg_error_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.onError();\n    });\n    ɵngcc0.ɵɵelement(1, \"use\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"href\", ctx_r4.use, null, \"xlink\");\n  }\n}\n\nfunction TuiSvgComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TuiSvgComponent_ng_container_0_div_1_Template, 1, 1, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, TuiSvgComponent_ng_container_0_ng_template_2_Template, 2, 1, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r3 = ɵngcc0.ɵɵreference(3);\n\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isInnerHTML)(\"ngIfElse\", _r3);\n  }\n}\n\nconst UNDEFINED_NAMED_ICON = 'Attempted to use undefined named icon';\nconst MISSING_EXTERNAL_ICON = 'External icon is missing on the given URL';\nconst FAILED_EXTERNAL_ICON = 'Failed to load external SVG'; // TODO: Consider moving to CDK along with SvgService and SvgDefsHostComponent\n// @dynamic\n\nlet TuiSvgComponent = /*#__PURE__*/(() => {\n  let TuiSvgComponent = class TuiSvgComponent {\n    constructor(documentRef, windowRef, iconsPath, tuiSanitizer, svgService, staticRequestService, sanitizer, elementRef, userAgent, processor) {\n      this.documentRef = documentRef;\n      this.windowRef = windowRef;\n      this.iconsPath = iconsPath;\n      this.tuiSanitizer = tuiSanitizer;\n      this.svgService = svgService;\n      this.staticRequestService = staticRequestService;\n      this.sanitizer = sanitizer;\n      this.elementRef = elementRef;\n      this.userAgent = userAgent;\n      this.processor = processor;\n      this.src$ = new ReplaySubject(1);\n      this.isIE = isIE(this.userAgent);\n      this.icon = '';\n      this.innerHTML$ = this.src$.pipe(switchMap(() => this.isExternal ? this.getExternalIcon(this.icon) : of(this.getSafeHtml(this.icon))), startWith(''));\n    }\n\n    set src(src) {\n      this.icon = this.processor(src);\n      this.src$.next();\n    }\n\n    get src() {\n      return this.icon;\n    }\n\n    get use() {\n      return this.icon.includes('.svg#') ? this.icon : this.resolveName(this.icon, this.iconsPath);\n    }\n\n    get isInnerHTML() {\n      return this.isSrc || this.isExternal || this.isName && this.isShadowDOM;\n    }\n\n    get isShadowDOM() {\n      return getDocumentOrShadowRoot(this.elementRef.nativeElement) !== this.documentRef;\n    }\n\n    get isUse() {\n      return this.use.includes('.svg#');\n    }\n\n    get isExternal() {\n      return this.isUrl || this.isIE && this.isUse || this.isCrossDomain;\n    }\n\n    get isUrl() {\n      return this.icon.endsWith('.svg');\n    }\n\n    get isSrc() {\n      return isPresumedHTMLString(this.icon);\n    }\n\n    get isName() {\n      return !this.isUrl && !this.isUse && !this.isSrc;\n    }\n\n    get isCrossDomain() {\n      const {\n        use,\n        isUse,\n        windowRef\n      } = this;\n      return isUse && use.startsWith('http') && !!windowRef.origin && !use.startsWith(windowRef.origin);\n    }\n\n    onError(message = MISSING_EXTERNAL_ICON) {\n      const {\n        icon\n      } = this;\n      const event = tuiCustomEvent(TUI_ICON_ERROR, {\n        bubbles: true,\n        detail: {\n          message,\n          icon\n        }\n      }, this.documentRef);\n      tuiAssert.assert(false, message, icon);\n      this.elementRef.nativeElement.dispatchEvent(event);\n    }\n\n    resolveName(name, iconsPath) {\n      return iconsPath(name);\n    }\n\n    getSafeHtml(src) {\n      return this.isSrc ? this.sanitize(src) : this.process(src);\n    }\n\n    process(src) {\n      const icon = this.svgService.getOriginal(src);\n\n      if (this.isName && !icon && !!src) {\n        this.onError(UNDEFINED_NAMED_ICON);\n      } // Empty line for innerHTML when icon is shown through USE tag\n\n\n      return !this.isShadowDOM || !this.isName ? '' : this.sanitize(icon || '');\n    }\n\n    sanitize(src) {\n      return this.tuiSanitizer ? this.sanitizer.bypassSecurityTrustHtml(this.tuiSanitizer.sanitize(SecurityContext.HTML, src) || '') : src;\n    }\n\n    getExternalIcon(src) {\n      const url = src.includes('.svg') ? src : this.use;\n      return this.staticRequestService.request(url).pipe(catchError(() => {\n        this.onError(FAILED_EXTERNAL_ICON);\n        return of('');\n      }), map(response => this.sanitize(response.replace('<svg', '<svg focusable=\"false\"'))));\n    }\n\n  };\n\n  TuiSvgComponent.ɵfac = function TuiSvgComponent_Factory(t) {\n    return new (t || TuiSvgComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(WINDOW), ɵngcc0.ɵɵdirectiveInject(TUI_ICONS_PATH), ɵngcc0.ɵɵdirectiveInject(TUI_SANITIZER, 8), ɵngcc0.ɵɵdirectiveInject(TuiSvgService), ɵngcc0.ɵɵdirectiveInject(TuiStaticRequestService), ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(USER_AGENT), ɵngcc0.ɵɵdirectiveInject(TUI_SVG_SRC_PROCESSOR));\n  };\n\n  TuiSvgComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiSvgComponent,\n    selectors: [[\"tui-svg\"]],\n    inputs: {\n      src: \"src\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"tuiLet\"], [\"class\", \"src\", 3, \"innerHTML\", 4, \"ngIf\", \"ngIfElse\"], [\"useTemplate\", \"\"], [1, \"src\", 3, \"innerHTML\"], [\"version\", \"1.1\", \"xmlns\", \"http://www.w3.org/2000/svg\", 0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\", \"focusable\", \"false\", \"width\", \"100%\", \"height\", \"100%\", 3, \"error\"]],\n    template: function TuiSvgComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TuiSvgComponent_ng_container_0_Template, 4, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"tuiLet\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.innerHTML$));\n      }\n    },\n    directives: [ɵngcc1.TuiLetDirective, ɵngcc2.NgIf],\n    pipes: [ɵngcc2.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:inline-block;vertical-align:middle;flex-shrink:0;line-height:0;height:1.5rem;width:1.5rem;fill:currentColor;font-size:1rem}.src[_ngcontent-%COMP%]{display:flex;height:100%;align-items:center;justify-content:center}\"],\n    changeDetection: 0\n  });\n\n  __decorate([Input(), tuiRequiredSetter()], TuiSvgComponent.prototype, \"src\", null);\n\n  __decorate([tuiPure], TuiSvgComponent.prototype, \"resolveName\", null);\n\n  TuiSvgComponent = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Inject(WINDOW)), __param(2, Inject(TUI_ICONS_PATH)), __param(3, Optional()), __param(3, Inject(TUI_SANITIZER)), __param(4, Inject(TuiSvgService)), __param(5, Inject(TuiStaticRequestService)), __param(6, Inject(DomSanitizer)), __param(7, Inject(ElementRef)), __param(8, Inject(USER_AGENT)), __param(9, Inject(TUI_SVG_SRC_PROCESSOR))], TuiSvgComponent);\n  return TuiSvgComponent;\n})();\nlet TuiSvgModule = /*#__PURE__*/(() => {\n  let TuiSvgModule = class TuiSvgModule {};\n\n  TuiSvgModule.ɵfac = function TuiSvgModule_Factory(t) {\n    return new (t || TuiSvgModule)();\n  };\n\n  TuiSvgModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiSvgModule\n  });\n  TuiSvgModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiLetModule]]\n  });\n  return TuiSvgModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiSvgModule, {\n    declarations: function () {\n      return [TuiSvgComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiLetModule];\n    },\n    exports: function () {\n      return [TuiSvgComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiSvgComponent, TuiSvgModule }; //# sourceMappingURL=taiga-ui-core-components-svg.js.map","map":null,"metadata":{},"sourceType":"module"}