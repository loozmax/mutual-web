{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { WINDOW } from '@ng-web-apis/common';\nimport { InjectionToken, inject, ElementRef, Inject, Injectable, NgZone, Attribute, Directive, Output, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nconst RESIZE_OPTION_BOX_DEFAULT = 'content-box';\n/** @type {?} */\n\nconst RESIZE_OPTION_BOX = new InjectionToken('Box model to observe changes', {\n  providedIn: 'root',\n  factory: () => RESIZE_OPTION_BOX_DEFAULT\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst RESIZE_OBSERVER_SUPPORT = new InjectionToken('Resize Observer API support', {\n  providedIn: 'root',\n  factory: () => !!inject(WINDOW).ResizeObserver\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// @dynamic\n\nlet ResizeObserverService = /*#__PURE__*/(() => {\n  class ResizeObserverService extends Observable {\n    /**\n     * @param {?} __0\n     * @param {?} ngZone\n     * @param {?} support\n     * @param {?} box\n     */\n    constructor({\n      nativeElement\n    }, ngZone, support, box) {\n      /** @type {?} */\n      let observer;\n      super(subscriber => {\n        if (!support) {\n          subscriber.error('ResizeObserver is not supported in your browser');\n          return;\n        }\n\n        observer = new ResizeObserver(entries => {\n          ngZone.run(() => {\n            subscriber.next(entries);\n          });\n        });\n        observer.observe(nativeElement, {\n          box\n        });\n        return () => {\n          observer.disconnect();\n        };\n      });\n      return this.pipe(share());\n    }\n\n  }\n\n  ResizeObserverService.ɵfac = function ResizeObserverService_Factory(t) {\n    return new (t || ResizeObserverService)(ɵngcc0.ɵɵinject(ElementRef), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(RESIZE_OBSERVER_SUPPORT), ɵngcc0.ɵɵinject(RESIZE_OPTION_BOX));\n  };\n\n  ResizeObserverService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ResizeObserverService,\n    factory: ResizeObserverService.ɵfac\n  });\n  /** @nocollapse */\n\n  return ResizeObserverService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed\n\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction boxExtractor({\n  nativeElement\n}) {\n  /** @type {?} */\n  const attribute =\n  /** @type {?} */\n  nativeElement.getAttribute('waResizeBox');\n  return boxFactory(attribute);\n}\n/**\n * @param {?} box\n * @return {?}\n */\n\n\nfunction boxFactory(box) {\n  return box || RESIZE_OPTION_BOX_DEFAULT;\n} // @dynamic\n\n\nlet ResizeObserverDirective = /*#__PURE__*/(() => {\n  class ResizeObserverDirective {\n    /**\n     * @param {?} entries$\n     * @param {?} _box\n     */\n    constructor(entries$, _box) {\n      this.waResizeObserver = entries$;\n    }\n\n  }\n\n  ResizeObserverDirective.ɵfac = function ResizeObserverDirective_Factory(t) {\n    return new (t || ResizeObserverDirective)(ɵngcc0.ɵɵdirectiveInject(ResizeObserverService), ɵngcc0.ɵɵinjectAttribute('waResizeBox'));\n  };\n\n  ResizeObserverDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ResizeObserverDirective,\n    selectors: [[\"\", \"waResizeObserver\", \"\"]],\n    outputs: {\n      waResizeObserver: \"waResizeObserver\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ResizeObserverService, {\n      provide: RESIZE_OPTION_BOX,\n      deps: [ElementRef],\n      useFactory: boxExtractor\n    }])]\n  });\n  /** @nocollapse */\n\n  return ResizeObserverDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ResizeObserverModule = /*#__PURE__*/(() => {\n  class ResizeObserverModule {}\n\n  ResizeObserverModule.ɵfac = function ResizeObserverModule_Factory(t) {\n    return new (t || ResizeObserverModule)();\n  };\n\n  ResizeObserverModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ResizeObserverModule\n  });\n  ResizeObserverModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return ResizeObserverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ResizeObserverModule, {\n    declarations: [ResizeObserverDirective],\n    exports: [ResizeObserverDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { boxExtractor, boxFactory, ResizeObserverDirective, ResizeObserverModule, ResizeObserverService, RESIZE_OPTION_BOX_DEFAULT, RESIZE_OPTION_BOX, RESIZE_OBSERVER_SUPPORT }; //# sourceMappingURL=ng-web-apis-resize-observer.js.map","map":null,"metadata":{},"sourceType":"module"}