{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, forwardRef, EventEmitter, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Output, ContentChild, TemplateRef, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { TuiDestroyService, AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, isNativeFocused, getClipboardDataText, setNativeFocused, tuiRequiredSetter, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';\nimport { TUI_DATA_LIST_HOST, TUI_MASK_SYMBOLS_REGEXP, formatPhone, TuiTextfieldCleanerDirective, TUI_TEXTFIELD_CLEANER, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiDataListDirective, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { fromEvent, merge, Observable } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { windowToggle, flatMap, startWith, takeUntil } from 'rxjs/operators';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nimport * as ɵngcc3 from '@taiga-ui/kit/directives';\nimport * as ɵngcc4 from 'angular2-text-mask';\nimport * as ɵngcc5 from '@angular/forms';\nimport * as ɵngcc6 from 'rxjs';\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst SELECTION_STREAM = new InjectionToken('A stream of selection changes');\nconst INPUT_PHONE_PROVIDERS = [TuiDestroyService, FIXED_DROPDOWN_CONTROLLER_PROVIDER, {\n  provide: AbstractTuiControl,\n  useExisting: forwardRef(() => TuiInputPhoneComponent)\n}, {\n  provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n  useExisting: forwardRef(() => TuiInputPhoneComponent)\n}, {\n  provide: TUI_DATA_LIST_HOST,\n  useExisting: forwardRef(() => TuiInputPhoneComponent)\n}, {\n  provide: SELECTION_STREAM,\n  deps: [TuiDestroyService, DOCUMENT],\n  useFactory: selectionStreamFactory\n}];\n\nfunction selectionStreamFactory(destroy$, documentRef) {\n  return fromEvent(documentRef, 'selectionchange').pipe(windowToggle(merge(fromEvent(documentRef, 'mouseup'), fromEvent(documentRef, 'keydown')), () => fromEvent(documentRef, 'mousedown')), flatMap(windowed$ => windowed$.pipe(startWith(null))), takeUntil(destroy$));\n} // @dynamic\n\n\nlet TuiInputPhoneComponent = /*#__PURE__*/(() => {\n  let TuiInputPhoneComponent = class TuiInputPhoneComponent extends AbstractTuiControl {\n    constructor(control, changeDetectorRef, selection$, textfieldCleaner) {\n      super(control, changeDetectorRef);\n      this.textfieldCleaner = textfieldCleaner;\n      this.phoneMaskAfterCountryCode = '(###) ###-##-##';\n      this.allowText = false;\n      this.search = '';\n      this.searchChange = new EventEmitter();\n      this.textMaskOptions = {\n        mask: value => this.allowText && !this.value && isText(value) && value !== '+' ? false : [...this.countryCode.split(''), ' ', ...this.phoneMaskAfterCountryCode.replace(/[^#\\- ()]+/g, '').split('').map(item => item === '#' ? /\\d/ : item)],\n        pipe: value => {\n          if (this.allowText) {\n            return value;\n          }\n\n          return value === '' && this.focused && !this.readOnly ? `${this.countryCode} ` : value.replace(/-$/, '');\n        },\n        guide: false\n      };\n      this.countryCode = '+7';\n      this.open = false;\n      selection$.subscribe(() => {\n        this.setCaretPosition();\n      });\n    }\n\n    set countryCodeSetter(countryCode) {\n      this.updateValueWithNewCountryCode(countryCode);\n      this.countryCode = countryCode;\n    }\n\n    get nativeFocusableElement() {\n      return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;\n    }\n\n    get focused() {\n      return isNativeFocused(this.nativeFocusableElement) || !!this.dropdown && this.dropdown.focused;\n    }\n\n    get computedValue() {\n      return this.value ? formatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode) : this.search || '';\n    }\n\n    get inputMode() {\n      return this.allowText ? 'text' : 'numeric';\n    }\n\n    get canOpen() {\n      return this.interactive && !!this.datalist;\n    }\n\n    get canClean() {\n      return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;\n    }\n\n    onHovered(hovered) {\n      this.updateHovered(hovered);\n    }\n\n    onDrop(event) {\n      if (!event.dataTransfer) {\n        return;\n      }\n\n      this.setValueWithoutPrefix(event.dataTransfer.getData('text'));\n      event.preventDefault();\n    }\n\n    onPaste(event) {\n      this.setValueWithoutPrefix(getClipboardDataText(event));\n    }\n\n    onActiveZone(active) {\n      this.updateFocused(active);\n\n      if (active && !this.computedValue && !this.readOnly && !this.allowText) {\n        this.updateSearch(this.countryCode);\n        return;\n      }\n\n      if (this.computedValue === this.countryCode || this.search !== null && isNaN(parseInt(this.search.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10))) {\n        this.updateSearch('');\n      }\n    }\n\n    onBackspace(event) {\n      const target = event.target;\n\n      if ((target.selectionStart || 0) <= this.nonRemovableLength && target.selectionStart === target.selectionEnd) {\n        event.preventDefault();\n      }\n    }\n\n    onValueChange(value) {\n      value = value === '' ? this.countryCode : value;\n      const parsed = isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, '');\n      this.updateSearch(parsed);\n      this.updateValue(parsed === this.countryCode || isText(parsed) ? '' : parsed);\n      this.open = true;\n    }\n\n    handleOption(item) {\n      this.focusInput();\n      this.updateValue(item);\n      this.updateSearch('');\n      this.open = false;\n    }\n\n    setDisabledState() {\n      super.setDisabledState();\n      this.open = false;\n    }\n\n    writeValue(value) {\n      super.writeValue(value);\n      this.updateSearch('');\n    }\n\n    getFallbackValue() {\n      return '';\n    }\n\n    get caretIsInForbiddenArea() {\n      const {\n        nativeFocusableElement\n      } = this;\n\n      if (!nativeFocusableElement) {\n        return false;\n      }\n\n      const {\n        selectionStart,\n        selectionEnd\n      } = nativeFocusableElement;\n      return isNativeFocused(nativeFocusableElement) && selectionStart !== null && selectionStart < this.nonRemovableLength && selectionStart === selectionEnd;\n    }\n\n    get nonRemovableLength() {\n      return this.isTextValue ? 0 : this.countryCode.length + 1;\n    }\n\n    get maxPhoneLength() {\n      return this.countryCode.length + this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length;\n    }\n\n    get isTextValue() {\n      return !!this.search && isText(this.search);\n    }\n\n    setCaretPosition() {\n      if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {\n        this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);\n      }\n    }\n\n    setValueWithoutPrefix(value) {\n      if (this.readOnly) {\n        return;\n      }\n\n      this.open = true;\n      this.updateValue(this.cleanValue(value));\n      this.updateSearch(this.allowText && isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, ''));\n    }\n\n    cleanValue(value) {\n      const reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.substring(1));\n      const oldValueExist = this.value.length > this.countryCode.length && this.value.length < this.maxPhoneLength;\n      const newValueLength = value.replace(TUI_MASK_SYMBOLS_REGEXP, '').length;\n      const cleanNewValue = value.replace(/[^0-9]+/g, '');\n      const selectionLength = String(getSelection()).length;\n\n      if (oldValueExist && selectionLength === 0) {\n        return `${this.value}${cleanNewValue}`.slice(0, this.maxPhoneLength);\n      }\n\n      if (newValueLength < this.maxPhoneLength - 1) {\n        return `${this.countryCode}${cleanNewValue}`.slice(0, this.maxPhoneLength);\n      }\n\n      return `${this.countryCode}${cleanNewValue.replace(reg, '')}`.slice(0, this.maxPhoneLength);\n    }\n\n    focusInput() {\n      if (this.nativeFocusableElement) {\n        setNativeFocused(this.nativeFocusableElement, true, true);\n      }\n    }\n\n    updateSearch(search) {\n      if (this.search === search) {\n        return;\n      }\n\n      this.search = search;\n      this.searchChange.emit(search);\n    }\n\n    updateValueWithNewCountryCode(newCountryCode) {\n      if (!this.isTextValue) {\n        this.updateValue(this.value.replace(this.countryCode, newCountryCode));\n      }\n    }\n\n  };\n\n  TuiInputPhoneComponent.ɵfac = function TuiInputPhoneComponent_Factory(t) {\n    return new (t || TuiInputPhoneComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(SELECTION_STREAM), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_CLEANER));\n  };\n\n  TuiInputPhoneComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiInputPhoneComponent,\n    selectors: [[\"tui-input-phone\"]],\n    contentQueries: function TuiInputPhoneComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datalist = _t.first);\n      }\n    },\n    viewQuery: function TuiInputPhoneComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TuiHostedDropdownComponent, 5);\n        ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    inputs: {\n      phoneMaskAfterCountryCode: \"phoneMaskAfterCountryCode\",\n      allowText: \"allowText\",\n      search: \"search\",\n      countryCodeSetter: [\"countryCode\", \"countryCodeSetter\"]\n    },\n    outputs: {\n      searchChange: \"searchChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature(INPUT_PHONE_PROVIDERS), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 14,\n    consts: [[1, \"hosted\", 3, \"canOpen\", \"content\", \"open\", \"openChange\", \"tuiActiveZoneChange\"], [\"tuiValueAccessor\", \"\", \"tuiTextfieldType\", \"tel\", 1, \"textfield\", 3, \"tuiTextfieldInputMode\", \"pseudoHovered\", \"pseudoFocused\", \"invalid\", \"nativeId\", \"readOnly\", \"disabled\", \"focusable\", \"textMask\", \"value\", \"tuiTextfieldCleaner\", \"valueChange\", \"hoveredChange\", \"drop\", \"keydown.backspace\", \"paste.prevent\"]],\n    template: function TuiInputPhoneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n        ɵngcc0.ɵɵlistener(\"openChange\", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          return ctx.open = $event;\n        })(\"tuiActiveZoneChange\", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {\n          return ctx.onActiveZone($event);\n        });\n        ɵngcc0.ɵɵelementStart(1, \"tui-primitive-textfield\", 1);\n        ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          return ctx.onValueChange($event);\n        })(\"hoveredChange\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_hoveredChange_1_listener($event) {\n          return ctx.onHovered($event);\n        })(\"drop\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_drop_1_listener($event) {\n          return ctx.onDrop($event);\n        })(\"keydown.backspace\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_keydown_backspace_1_listener($event) {\n          return ctx.onBackspace($event);\n        })(\"paste.prevent\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_paste_prevent_1_listener($event) {\n          return ctx.onPaste($event);\n        });\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵprojection(3, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"canOpen\", ctx.canOpen)(\"content\", ctx.datalist || \"\")(\"open\", ctx.open);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"tuiTextfieldInputMode\", ctx.inputMode)(\"pseudoHovered\", ctx.pseudoHovered)(\"pseudoFocused\", ctx.computedFocused)(\"invalid\", ctx.computedInvalid)(\"nativeId\", ctx.nativeId)(\"readOnly\", ctx.readOnly)(\"disabled\", ctx.computedDisabled)(\"focusable\", ctx.focusable)(\"textMask\", ctx.textMaskOptions)(\"value\", ctx.computedValue)(\"tuiTextfieldCleaner\", ctx.canClean);\n      }\n    },\n    directives: [ɵngcc1.TuiHostedDropdownComponent, ɵngcc2.TuiActiveZoneDirective, ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc3.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldTypeDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc4.MaskedInputDirective, ɵngcc1.TuiTextfieldCleanerDirective],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n    changeDetection: 0\n  });\n\n  __decorate([ViewChild(TuiHostedDropdownComponent)], TuiInputPhoneComponent.prototype, \"dropdown\", void 0);\n\n  __decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputPhoneComponent.prototype, \"textfield\", void 0);\n\n  __decorate([Input('countryCode'), tuiRequiredSetter()], TuiInputPhoneComponent.prototype, \"countryCodeSetter\", null);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputPhoneComponent.prototype, \"phoneMaskAfterCountryCode\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputPhoneComponent.prototype, \"allowText\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputPhoneComponent.prototype, \"search\", void 0);\n\n  __decorate([Output()], TuiInputPhoneComponent.prototype, \"searchChange\", void 0);\n\n  __decorate([ContentChild(TuiDataListDirective, {\n    read: TemplateRef\n  })], TuiInputPhoneComponent.prototype, \"datalist\", void 0);\n\n  TuiInputPhoneComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(SELECTION_STREAM)), __param(3, Inject(TUI_TEXTFIELD_CLEANER))], TuiInputPhoneComponent);\n  return TuiInputPhoneComponent;\n})();\n\nfunction isText(value) {\n  return isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));\n}\n\nvar TuiInputPhoneDirective_1;\nlet TuiInputPhoneDirective = TuiInputPhoneDirective_1 = class TuiInputPhoneDirective extends TuiAbstractTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n  process(input) {\n    this.input = input;\n  }\n\n  ngDoCheck() {\n    if (!this.input) {\n      return;\n    }\n\n    this.input.type = 'tel';\n    this.input.inputMode = this.host.inputMode;\n  }\n\n};\n\nTuiInputPhoneDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputPhoneDirective_BaseFactory;\n  return function TuiInputPhoneDirective_Factory(t) {\n    return (ɵTuiInputPhoneDirective_BaseFactory || (ɵTuiInputPhoneDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputPhoneDirective)))(t || TuiInputPhoneDirective);\n  };\n}();\n\nTuiInputPhoneDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputPhoneDirective,\n  selectors: [[\"tui-input-phone\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputPhoneDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputPhoneModule = /*#__PURE__*/(() => {\n  let TuiInputPhoneModule = class TuiInputPhoneModule {};\n\n  TuiInputPhoneModule.ɵfac = function TuiInputPhoneModule_Factory(t) {\n    return new (t || TuiInputPhoneModule)();\n  };\n\n  TuiInputPhoneModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputPhoneModule\n  });\n  TuiInputPhoneModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[TextMaskModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule]]\n  });\n  return TuiInputPhoneModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputPhoneModule, {\n    declarations: function () {\n      return [TuiInputPhoneComponent, TuiInputPhoneDirective];\n    },\n    imports: function () {\n      return [TextMaskModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule];\n    },\n    exports: function () {\n      return [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INPUT_PHONE_PROVIDERS, SELECTION_STREAM, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, selectionStreamFactory }; //# sourceMappingURL=taiga-ui-kit-components-input-phone.js.map","map":null,"metadata":{},"sourceType":"module"}