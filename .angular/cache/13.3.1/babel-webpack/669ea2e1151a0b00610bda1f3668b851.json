{"ast":null,"code":"import { EMPTY_ARRAY, tuiZonefull } from '@taiga-ui/cdk';\nimport { debounceTime, scan, distinctUntilChanged, switchMap, startWith, map } from 'rxjs/operators';\nimport { pipe } from 'rxjs';\n\nfunction smartSearch(getSearchFunction, searchDebouceTimeMs = 400) {\n  return source => source.pipe(debounceTime(searchDebouceTimeMs), scan((previousSearched, current) => {\n    return previousSearched !== '' && current.startsWith(previousSearched) ? previousSearched : current;\n  }, ''), distinctUntilChanged(), switchMap(value => getSearchFunction(value).pipe(startWith(null))), startWith(EMPTY_ARRAY));\n}\n/**\n * Works like regular map + distinctUntilChanged\n * and only returns to NgZone if value has changed\n *\n * @param project mapping function\n * @param ngZone NgZone instance\n */\n\n\nfunction tuiZonefulMap(project, ngZone) {\n  return pipe(map(project), distinctUntilChanged(), tuiZonefull(ngZone));\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { smartSearch, tuiZonefulMap }; //# sourceMappingURL=taiga-ui-core-observables.js.map","map":null,"metadata":{},"sourceType":"module"}