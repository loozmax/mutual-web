{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { ComponentFactoryResolver, Injector, ElementRef, Input, Directive, Inject } from '@angular/core';\nimport { TuiPortalService, TuiActiveZoneDirective, tuiDefaultProp, tuiPure, AbstractTuiControl } from '@taiga-ui/cdk';\nimport { TuiDropdownBoxComponent } from '@taiga-ui/core/components/dropdown-box';\nimport { DEFAULT_MIN_HEIGHT, DEFAULT_MAX_HEIGHT } from '@taiga-ui/core/constants';\nimport { checkFixedPosition } from '@taiga-ui/core/utils/dom';\nimport { TuiHintService } from '@taiga-ui/core/services'; // @bad TODO: Possibly refactor to make more abstract\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from '@taiga-ui/core/services';\nlet AbstractTuiDropdown = /*#__PURE__*/(() => {\n  let AbstractTuiDropdown = class AbstractTuiDropdown {\n    constructor(componentFactoryResolver, injector, portalService, elementRef, activeZone) {\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.injector = injector;\n      this.portalService = portalService;\n      this.elementRef = elementRef;\n      this.activeZone = activeZone;\n      this.content = '';\n      this.tuiDropdownHost = null;\n      this.minHeight = DEFAULT_MIN_HEIGHT;\n      this.maxHeight = DEFAULT_MAX_HEIGHT;\n      this.align = 'left';\n      this.direction = null;\n      this.sided = false;\n      this.limitMinWidth = 'min';\n      this.dropdownBoxRef = null;\n    }\n\n    ngOnDestroy() {\n      this.closeDropdownBox();\n    }\n\n    ngAfterViewChecked() {\n      // @awful TODO: This is probably wrong to call both but in TuiHostedDropdown some changes do not propagate otherwise\n      if (this.dropdownBoxRef !== null) {\n        this.dropdownBoxRef.changeDetectorRef.detectChanges();\n        this.dropdownBoxRef.changeDetectorRef.markForCheck();\n      }\n    }\n\n    get clientRect() {\n      return this.elementRef.nativeElement.getBoundingClientRect();\n    }\n\n    get host() {\n      return this.tuiDropdownHost || this.elementRef.nativeElement;\n    }\n\n    get fixed() {\n      return checkFixedPosition(this.elementRef.nativeElement);\n    }\n\n    toggleDropdown(value) {\n      if (value) {\n        this.openDropdownBox();\n      } else {\n        this.closeDropdownBox();\n      }\n    }\n\n    openDropdownBox() {\n      if (this.dropdownBoxRef !== null) {\n        return;\n      }\n\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(TuiDropdownBoxComponent);\n      this.dropdownBoxRef = this.portalService.add(componentFactory, this.injector);\n      this.dropdownBoxRef.changeDetectorRef.detectChanges();\n    }\n\n    closeDropdownBox() {\n      if (this.dropdownBoxRef === null) {\n        return;\n      }\n\n      this.portalService.remove(this.dropdownBoxRef);\n      this.dropdownBoxRef = null;\n    }\n\n  };\n\n  AbstractTuiDropdown.ɵfac = function AbstractTuiDropdown_Factory(t) {\n    return new (t || AbstractTuiDropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TuiPortalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TuiActiveZoneDirective));\n  };\n\n  AbstractTuiDropdown.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractTuiDropdown,\n    inputs: {\n      content: [\"tuiDropdownContent\", \"content\"],\n      tuiDropdownHost: \"tuiDropdownHost\",\n      minHeight: [\"tuiDropdownMinHeight\", \"minHeight\"],\n      maxHeight: [\"tuiDropdownMaxHeight\", \"maxHeight\"],\n      align: [\"tuiDropdownAlign\", \"align\"],\n      direction: [\"tuiDropdownDirection\", \"direction\"],\n      sided: [\"tuiDropdownSided\", \"sided\"],\n      limitMinWidth: [\"tuiDropdownLimitWidth\", \"limitMinWidth\"]\n    }\n  });\n\n  __decorate([Input('tuiDropdownContent'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"content\", void 0);\n\n  __decorate([Input('tuiDropdownHost'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"tuiDropdownHost\", void 0);\n\n  __decorate([Input('tuiDropdownMinHeight'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"minHeight\", void 0);\n\n  __decorate([Input('tuiDropdownMaxHeight'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"maxHeight\", void 0);\n\n  __decorate([Input('tuiDropdownAlign'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"align\", void 0);\n\n  __decorate([Input('tuiDropdownDirection'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"direction\", void 0);\n\n  __decorate([Input('tuiDropdownSided'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"sided\", void 0);\n\n  __decorate([Input('tuiDropdownLimitWidth'), tuiDefaultProp()], AbstractTuiDropdown.prototype, \"limitMinWidth\", void 0);\n\n  __decorate([tuiPure], AbstractTuiDropdown.prototype, \"fixed\", null);\n\n  __decorate([tuiPure], AbstractTuiDropdown.prototype, \"toggleDropdown\", null);\n\n  return AbstractTuiDropdown;\n})();\nlet AbstractTuiHint = /*#__PURE__*/(() => {\n  let AbstractTuiHint = class AbstractTuiHint {\n    constructor(elementRef, hintService, activeZone, options) {\n      this.elementRef = elementRef;\n      this.hintService = hintService;\n      this.activeZone = activeZone;\n      this.options = options;\n      this.mode = this.options.mode;\n      this.direction = this.options.direction;\n      this.content = '';\n    }\n\n    ngOnDestroy() {\n      this.hideTooltip();\n    }\n\n    showTooltip() {\n      this.hintService.add(this);\n    }\n\n    hideTooltip() {\n      this.hintService.remove(this);\n    }\n\n  };\n\n  AbstractTuiHint.ɵfac = function AbstractTuiHint_Factory(t) {\n    return new (t || AbstractTuiHint)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TuiHintService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TuiActiveZoneDirective), ɵngcc0.ɵɵdirectiveInject(undefined));\n  };\n\n  AbstractTuiHint.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractTuiHint,\n    inputs: {\n      mode: [\"tuiHintMode\", \"mode\"],\n      direction: [\"tuiHintDirection\", \"direction\"]\n    }\n  });\n\n  __decorate([Input('tuiHintMode'), tuiDefaultProp()], AbstractTuiHint.prototype, \"mode\", void 0);\n\n  __decorate([Input('tuiHintDirection'), tuiDefaultProp()], AbstractTuiHint.prototype, \"direction\", void 0);\n  /** Default values for abstract hint options */\n\n\n  return AbstractTuiHint;\n})();\nconst TUI_ABSTRACT_HINT_DEFAULT_OPTIONS = {\n  mode: null,\n  direction: 'bottom-left'\n}; // @dynamic\n\nlet TuiAbstractTextfieldHost = /*#__PURE__*/(() => {\n  let TuiAbstractTextfieldHost = class TuiAbstractTextfieldHost {\n    constructor(host) {\n      this.host = host;\n    }\n\n    get readOnly() {\n      return this.host.readOnly;\n    }\n\n    get disabled() {\n      return this.host.computedDisabled;\n    }\n\n    get invalid() {\n      return this.host.computedInvalid;\n    }\n\n    get focusable() {\n      return this.host.computedFocusable;\n    }\n\n    get value() {\n      return String(this.host.value);\n    }\n\n    process(_input) {}\n\n  };\n\n  TuiAbstractTextfieldHost.ɵfac = function TuiAbstractTextfieldHost_Factory(t) {\n    return new (t || TuiAbstractTextfieldHost)(ɵngcc0.ɵɵdirectiveInject(AbstractTuiControl));\n  };\n\n  TuiAbstractTextfieldHost.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiAbstractTextfieldHost\n  });\n  TuiAbstractTextfieldHost = __decorate([__param(0, Inject(AbstractTuiControl))], TuiAbstractTextfieldHost);\n  return TuiAbstractTextfieldHost;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AbstractTuiDropdown, AbstractTuiHint, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, TuiAbstractTextfieldHost }; //# sourceMappingURL=taiga-ui-core-abstract.js.map","map":null,"metadata":{},"sourceType":"module"}