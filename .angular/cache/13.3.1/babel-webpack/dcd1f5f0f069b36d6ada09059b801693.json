{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Input, HostBinding, Component, ChangeDetectionStrategy, ElementRef, Inject, Directive, ViewChild, Injectable, Pipe, NgModule } from '@angular/core';\nimport { tuiDefaultProp, px, isEdgeOlderThan, CHROMIUM_EDGE_START_VERSION, isIE, TuiResizeService, tuiPure, TuiDestroyService, TuiRepeatTimesModule } from '@taiga-ui/cdk';\nimport { USER_AGENT, WINDOW } from '@ng-web-apis/common';\nimport { Observable, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nconst _c0 = [\"tuiProgressBar\", \"\"];\nconst _c1 = [\"progressCircle\"];\nconst _c2 = [\"tuiProgressLabel\", \"\"];\nconst _c3 = [[[\"progress\"]], [[\"tui-progress-circle\"]], \"*\"];\nconst _c4 = [\"progress\", \"tui-progress-circle\", \"*\"];\n\nfunction TuiProgressSegmentedComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    const index_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"background\", index_r1 < ctx_r0.value ? ctx_r0.getActiveColor(index_r1) : null);\n  }\n}\n\nlet TuiProgressBarComponent = /*#__PURE__*/(() => {\n  let TuiProgressBarComponent = class TuiProgressBarComponent {\n    constructor() {\n      this.size = 'm';\n    }\n\n  };\n\n  TuiProgressBarComponent.ɵfac = function TuiProgressBarComponent_Factory(t) {\n    return new (t || TuiProgressBarComponent)();\n  };\n\n  TuiProgressBarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiProgressBarComponent,\n    selectors: [[\"progress\", \"tuiProgressBar\", \"\"]],\n    hostVars: 3,\n    hostBindings: function TuiProgressBarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-size\", ctx.size);\n        ɵngcc0.ɵɵstyleProp(\"--tui-progress-color\", ctx.color);\n      }\n    },\n    inputs: {\n      size: \"size\",\n      color: \"color\"\n    },\n    attrs: _c0,\n    decls: 0,\n    vars: 0,\n    template: function TuiProgressBarComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;color:var(--tui-progress-color,currentColor);background-color:var(--tui-base-03);display:block;width:100%;color:var(--tui-primary);border-radius:var(--tui-radius-xs);overflow:hidden}[_nghost-%COMP%]::-webkit-progress-value{-webkit-transition:width var(--tui-duration) linear;transition:width var(--tui-duration) linear;background:var(--tui-progress-color,currentColor)}[_nghost-%COMP%]::-moz-progress-bar{background:var(--tui-progress-color,currentColor)}[_nghost-%COMP%]::-webkit-progress-bar{background-color:var(--tui-base-03)}[data-size='m'][_nghost-%COMP%]{height:1.5rem}[data-size='s'][_nghost-%COMP%]{border-radius:var(--tui-radius-xs);height:.5rem}[data-size='s'][_nghost-%COMP%]::-webkit-progress-value{border-radius:var(--tui-radius-xs)}[data-size='s'][_nghost-%COMP%]::-moz-progress-bar{border-radius:var(--tui-radius-xs)}label[tuiProgressLabel][_nghost-%COMP%]:not(:first-child), label[tuiProgressLabel]   [_nghost-%COMP%]:not(:first-child){position:absolute;top:0;left:0;width:100%;height:100%;background-color:transparent}label[tuiProgressLabel][_nghost-%COMP%]:not(:first-child)::-webkit-progress-bar, label[tuiProgressLabel]   [_nghost-%COMP%]:not(:first-child)::-webkit-progress-bar{background-color:transparent}\"],\n    changeDetection: 0\n  });\n\n  __decorate([Input(), HostBinding('style.--tui-progress-color')], TuiProgressBarComponent.prototype, \"color\", void 0);\n\n  __decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiProgressBarComponent.prototype, \"size\", void 0);\n  /**\n   * TODO in v3.0 move inside {@link TuiProgressColorSegmentsDirective} (as a private method)\n   * (after deletion of {@link TuiProgressColorSegmentsPipe} and {@link TuiProgressColorSegmentsAsyncPipe})\n   */\n\n\n  return TuiProgressBarComponent;\n})();\n\nconst calculateColorSegments = (colors, progressWidth) => {\n  const segmentWidth = Math.ceil(progressWidth / colors.length);\n  const colorsString = colors.reduce((acc, color, i) => `${acc}, ${color} ${px(i * segmentWidth)} ${px((i + 1) * segmentWidth)}`, '');\n  return `linear-gradient(to right ${colorsString})`;\n};\n\nlet TuiProgressColorSegmentsDirective = /*#__PURE__*/(() => {\n  let TuiProgressColorSegmentsDirective = class TuiProgressColorSegmentsDirective {\n    constructor(elementRef, resize$, userAgent) {\n      this.elementRef = elementRef;\n      this.resize$ = resize$;\n      this.userAgent = userAgent;\n      this.isOldBrowsers = isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent) || isIE(this.userAgent);\n      this.colors = [];\n    }\n\n    get calcSegments$() {\n      return this.resize$.pipe(map(() => this.isOldBrowsers ? this.colors[0] : calculateColorSegments(this.colors, this.elementRef.nativeElement.offsetWidth)));\n    }\n\n  };\n\n  TuiProgressColorSegmentsDirective.ɵfac = function TuiProgressColorSegmentsDirective_Factory(t) {\n    return new (t || TuiProgressColorSegmentsDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(TuiResizeService), ɵngcc0.ɵɵdirectiveInject(USER_AGENT));\n  };\n\n  TuiProgressColorSegmentsDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiProgressColorSegmentsDirective,\n    selectors: [[\"progress\", \"tuiProgressBar\", \"\", \"tuiProgressColorSegments\", \"\"]],\n    hostVars: 1,\n    hostBindings: function TuiProgressColorSegmentsDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"$.style.--tui-progress-color\", function TuiProgressColorSegmentsDirective___style___tui_progress_color_HostBindingHandler() {\n          return 0;\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"$.style.--tui-progress-color\", ctx.calcSegments$);\n      }\n    },\n    inputs: {\n      colors: [\"tuiProgressColorSegments\", \"colors\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService, TuiResizeService])]\n  });\n\n  __decorate([Input('tuiProgressColorSegments')], TuiProgressColorSegmentsDirective.prototype, \"colors\", void 0);\n\n  __decorate([tuiPure], TuiProgressColorSegmentsDirective.prototype, \"calcSegments$\", null);\n\n  TuiProgressColorSegmentsDirective = __decorate([__param(0, Inject(ElementRef)), __param(1, Inject(TuiResizeService)), __param(2, Inject(USER_AGENT))], TuiProgressColorSegmentsDirective); // @dynamic\n\n  return TuiProgressColorSegmentsDirective;\n})();\nlet TuiProgressCircleComponent = /*#__PURE__*/(() => {\n  let TuiProgressCircleComponent = class TuiProgressCircleComponent {\n    constructor(userAgent, windowRef, elementRef) {\n      this.userAgent = userAgent;\n      this.windowRef = windowRef;\n      this.elementRef = elementRef;\n      this.value = 0;\n      this.max = 1;\n      this.color = null;\n      this.size = 'm';\n    }\n\n    get progressPercentage() {\n      return this.value / this.max;\n    }\n\n    get oldEdgeRadiusFallback() {\n      if (!isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent)) {\n        return null;\n      }\n\n      const strokeWidth = parseInt(this.windowRef.getComputedStyle(this.progressCircle.nativeElement).strokeWidth, 10);\n      return (this.elementRef.nativeElement.offsetWidth - strokeWidth) / 2;\n    }\n\n  };\n\n  TuiProgressCircleComponent.ɵfac = function TuiProgressCircleComponent_Factory(t) {\n    return new (t || TuiProgressCircleComponent)(ɵngcc0.ɵɵdirectiveInject(USER_AGENT), ɵngcc0.ɵɵdirectiveInject(WINDOW), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n  };\n\n  TuiProgressCircleComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiProgressCircleComponent,\n    selectors: [[\"tui-progress-circle\"]],\n    viewQuery: function TuiProgressCircleComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.progressCircle = _t.first);\n      }\n    },\n    hostVars: 5,\n    hostBindings: function TuiProgressCircleComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-size\", ctx.size);\n        ɵngcc0.ɵɵstyleProp(\"--tui-progress-color\", ctx.color)(\"--progress-percentage\", ctx.progressPercentage);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      max: \"max\",\n      color: \"color\",\n      size: \"size\"\n    },\n    decls: 5,\n    vars: 4,\n    consts: [[1, \"t-hidden-progress\", 3, \"value\", \"max\"], [\"height\", \"100%\", \"width\", \"100%\", \"aria-hidden\", \"true\", 1, \"t-svg\"], [\"cx\", \"50%\", \"cy\", \"50%\", 1, \"t-track\"], [\"cx\", \"50%\", \"cy\", \"50%\", 1, \"t-progress\"], [\"progressCircle\", \"\"]],\n    template: function TuiProgressCircleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"progress\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"svg\", 1);\n        ɵngcc0.ɵɵelement(2, \"circle\", 2)(3, \"circle\", 3, 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"value\", ctx.value)(\"max\", ctx.max);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"r\", ctx.oldEdgeRadiusFallback);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"r\", ctx.oldEdgeRadiusFallback);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{position:relative;display:block;color:var(--tui-primary);transform:rotate(-90deg);transform-origin:center;font-size:1rem}[data-size='s'][_nghost-%COMP%]{width:2em;height:2em}[data-size='s'][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{\\n  r: 0.75em;\\n  stroke-width:.5em}[data-size='s'][_nghost-%COMP%]   .t-progress[_ngcontent-%COMP%]{\\n  r: 0.75em;\\n  stroke-width:.5em;stroke-dasharray:4.71238898em;stroke-dashoffset:calc(4.71238898em - var(--progress-percentage) * 4.71238898em)}[data-size='m'][_nghost-%COMP%]{width:3em;height:3em}[data-size='m'][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{\\n  r: 1.375em;\\n  stroke-width:.25em}[data-size='m'][_nghost-%COMP%]   .t-progress[_ngcontent-%COMP%]{\\n  r: 1.3125em;\\n  stroke-width:.375em;stroke-dasharray:8.24668072em;stroke-dashoffset:calc(8.24668072em - var(--progress-percentage) * 8.24668072em)}[data-size='l'][_nghost-%COMP%]{width:4em;height:4em}[data-size='l'][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{\\n  r: 1.875em;\\n  stroke-width:.25em}[data-size='l'][_nghost-%COMP%]   .t-progress[_ngcontent-%COMP%]{\\n  r: 1.8125em;\\n  stroke-width:.375em;stroke-dasharray:11.38827337em;stroke-dashoffset:calc(11.38827337em - var(--progress-percentage) * 11.38827337em)}[data-size=xl][_nghost-%COMP%]{width:7em;height:7em}[data-size=xl][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{\\n  r: 3.375em;\\n  stroke-width:.25em}[data-size=xl][_nghost-%COMP%]   .t-progress[_ngcontent-%COMP%]{\\n  r: 3.3125em;\\n  stroke-width:.375em;stroke-dasharray:20.81305133em;stroke-dashoffset:calc(20.81305133em - var(--progress-percentage) * 20.81305133em)}.t-track[_ngcontent-%COMP%]{fill:transparent;stroke:var(--tui-base-03)}.t-progress[_ngcontent-%COMP%]{fill:transparent;stroke:var(--tui-progress-color,currentColor);transition:stroke-dashoffset var(--tui-duration) linear}.t-hidden-progress[_ngcontent-%COMP%]{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}.t-svg[_ngcontent-%COMP%]{overflow:unset}\"],\n    changeDetection: 0\n  });\n\n  __decorate([ViewChild('progressCircle', {\n    static: true\n  })], TuiProgressCircleComponent.prototype, \"progressCircle\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiProgressCircleComponent.prototype, \"value\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiProgressCircleComponent.prototype, \"max\", void 0);\n\n  __decorate([Input(), HostBinding('style.--tui-progress-color'), tuiDefaultProp()], TuiProgressCircleComponent.prototype, \"color\", void 0);\n\n  __decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiProgressCircleComponent.prototype, \"size\", void 0);\n\n  __decorate([HostBinding('style.--progress-percentage')], TuiProgressCircleComponent.prototype, \"progressPercentage\", null);\n\n  TuiProgressCircleComponent = __decorate([__param(0, Inject(USER_AGENT)), __param(1, Inject(WINDOW)), __param(2, Inject(ElementRef))], TuiProgressCircleComponent);\n  return TuiProgressCircleComponent;\n})();\nlet TuiProgressLabelComponent = /*#__PURE__*/(() => {\n  let TuiProgressLabelComponent = class TuiProgressLabelComponent {};\n\n  TuiProgressLabelComponent.ɵfac = function TuiProgressLabelComponent_Factory(t) {\n    return new (t || TuiProgressLabelComponent)();\n  };\n\n  TuiProgressLabelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiProgressLabelComponent,\n    selectors: [[\"label\", \"tuiProgressLabel\", \"\"]],\n    attrs: _c2,\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"t-label\"]],\n    template: function TuiProgressLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 0);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{position:relative;display:inline-block}.t-label[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;font:var(--tui-font-text-s);color:var(--tui-text-01);flex-direction:column;justify-content:center;align-items:center}\"],\n    changeDetection: 0\n  });\n  return TuiProgressLabelComponent;\n})();\n\nfunction nonNegativeInt(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\nfunction positiveInt(value) {\n  return Number.isInteger(value) && value > 0;\n}\n\nlet TuiProgressSegmentedComponent = /*#__PURE__*/(() => {\n  let TuiProgressSegmentedComponent = class TuiProgressSegmentedComponent {\n    constructor() {\n      this.value = 0;\n      this.max = 1;\n      this.size = 'm';\n      this.colors = 'var(--tui-primary)';\n    }\n\n    getActiveColor(index = 0) {\n      return typeof this.colors === 'string' ? this.colors : this.colors[index] || this.colors[this.colors.length - 1];\n    }\n\n  };\n\n  TuiProgressSegmentedComponent.ɵfac = function TuiProgressSegmentedComponent_Factory(t) {\n    return new (t || TuiProgressSegmentedComponent)();\n  };\n\n  TuiProgressSegmentedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiProgressSegmentedComponent,\n    selectors: [[\"tui-progress-segmented\"]],\n    hostVars: 1,\n    hostBindings: function TuiProgressSegmentedComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      max: \"max\",\n      size: \"size\",\n      colors: \"colors\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[1, \"t-hidden-progress\", 3, \"value\", \"max\"], [\"aria-hidden\", \"true\", \"class\", \"t-segment\", 3, \"background\", 4, \"tuiRepeatTimes\", \"tuiRepeatTimesOf\"], [\"aria-hidden\", \"true\", 1, \"t-segment\"]],\n    template: function TuiProgressSegmentedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"progress\", 0);\n        ɵngcc0.ɵɵtemplate(1, TuiProgressSegmentedComponent_span_1_Template, 1, 2, \"span\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"value\", ctx.value)(\"max\", ctx.max);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"tuiRepeatTimesOf\", ctx.max);\n      }\n    },\n    directives: [ɵngcc2.TuiRepeatTimesDirective],\n    styles: [\"[_nghost-%COMP%]{display:flex}.t-segment[_ngcontent-%COMP%]{transition-property:background-color;transition-duration:var(--tui-duration,300ms);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background-color:var(--tui-base-03)}.t-segment[_ngcontent-%COMP%]:not(:last-child){margin-right:.25rem}[data-size='s'][_nghost-%COMP%]   .t-segment[_ngcontent-%COMP%]{height:.25rem}[data-size='m'][_nghost-%COMP%]   .t-segment[_ngcontent-%COMP%]{height:.5rem}.t-hidden-progress[_ngcontent-%COMP%]{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}\"],\n    changeDetection: 0\n  });\n\n  __decorate([Input(), tuiDefaultProp(nonNegativeInt, 'Must be non-negative integer between 0 and max')], TuiProgressSegmentedComponent.prototype, \"value\", void 0);\n\n  __decorate([Input(), tuiDefaultProp(positiveInt, 'Must be positive integer')], TuiProgressSegmentedComponent.prototype, \"max\", void 0);\n\n  __decorate([Input(), HostBinding('attr.data-size')], TuiProgressSegmentedComponent.prototype, \"size\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiProgressSegmentedComponent.prototype, \"colors\", void 0); // TODO delete in v3.0\n\n\n  return TuiProgressSegmentedComponent;\n})();\nlet AbstractTuiColorSegments = /*#__PURE__*/(() => {\n  let AbstractTuiColorSegments = class AbstractTuiColorSegments {\n    constructor(userAgent, elementRef) {\n      this.userAgent = userAgent;\n      this.elementRef = elementRef;\n      this.isOldBrowsers = isEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent) || isIE(this.userAgent);\n    }\n\n    calculate(colors) {\n      if (this.isOldBrowsers) {\n        return colors[0];\n      }\n\n      const elementWidth = this.elementRef.nativeElement.offsetWidth;\n      return calculateColorSegments(colors, elementWidth);\n    }\n\n  };\n\n  AbstractTuiColorSegments.ɵfac = function AbstractTuiColorSegments_Factory(t) {\n    return new (t || AbstractTuiColorSegments)(ɵngcc0.ɵɵinject(USER_AGENT), ɵngcc0.ɵɵinject(ElementRef));\n  };\n\n  AbstractTuiColorSegments.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AbstractTuiColorSegments,\n    factory: function (t) {\n      return AbstractTuiColorSegments.ɵfac(t);\n    }\n  });\n  AbstractTuiColorSegments = __decorate([__param(0, Inject(USER_AGENT)), __param(1, Inject(ElementRef))], AbstractTuiColorSegments); // TODO delete in v3.0\n\n  return AbstractTuiColorSegments;\n})();\nlet TuiProgressColorSegmentsPipe = /*#__PURE__*/(() => {\n  let TuiProgressColorSegmentsPipe = class TuiProgressColorSegmentsPipe extends AbstractTuiColorSegments {\n    /**\n     * @deprecated use tuiProgressColorSegments directive instead\n     * {@link TuiProgressColorSegmentsDirective}\n     * @example: `<progress tuiProgressBar [tuiProgressColorSegments]=\"colors\">`\n     */\n    transform(colors) {\n      return this.calculate(colors);\n    }\n\n  };\n\n  TuiProgressColorSegmentsPipe.ɵfac = /*@__PURE__*/function () {\n    let ɵTuiProgressColorSegmentsPipe_BaseFactory;\n    return function TuiProgressColorSegmentsPipe_Factory(t) {\n      return (ɵTuiProgressColorSegmentsPipe_BaseFactory || (ɵTuiProgressColorSegmentsPipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiProgressColorSegmentsPipe)))(t || TuiProgressColorSegmentsPipe);\n    };\n  }();\n\n  TuiProgressColorSegmentsPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"tuiProgressColorSegments\",\n    type: TuiProgressColorSegmentsPipe,\n    pure: true\n  }); // TODO delete in v3.0\n\n  return TuiProgressColorSegmentsPipe;\n})();\nlet TuiProgressColorSegmentsAsyncPipe = /*#__PURE__*/(() => {\n  let TuiProgressColorSegmentsAsyncPipe = class TuiProgressColorSegmentsAsyncPipe extends AbstractTuiColorSegments {\n    /**\n     * @deprecated use tuiProgressColorSegments directive instead\n     * {@link TuiProgressColorSegmentsDirective}\n     * @example: `<progress tuiProgressBar [tuiProgressColorSegments]=\"colors\">`\n     */\n    transform(colors) {\n      return timer(0).pipe(map(() => this.calculate(colors)));\n    }\n\n  };\n\n  TuiProgressColorSegmentsAsyncPipe.ɵfac = /*@__PURE__*/function () {\n    let ɵTuiProgressColorSegmentsAsyncPipe_BaseFactory;\n    return function TuiProgressColorSegmentsAsyncPipe_Factory(t) {\n      return (ɵTuiProgressColorSegmentsAsyncPipe_BaseFactory || (ɵTuiProgressColorSegmentsAsyncPipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiProgressColorSegmentsAsyncPipe)))(t || TuiProgressColorSegmentsAsyncPipe);\n    };\n  }();\n\n  TuiProgressColorSegmentsAsyncPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"tuiProgressColorSegmentsAsync\",\n    type: TuiProgressColorSegmentsAsyncPipe,\n    pure: true\n  });\n  return TuiProgressColorSegmentsAsyncPipe;\n})();\nlet TuiProgressModule = /*#__PURE__*/(() => {\n  let TuiProgressModule = class TuiProgressModule {};\n\n  TuiProgressModule.ɵfac = function TuiProgressModule_Factory(t) {\n    return new (t || TuiProgressModule)();\n  };\n\n  TuiProgressModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiProgressModule\n  });\n  TuiProgressModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiRepeatTimesModule]]\n  });\n  return TuiProgressModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiProgressModule, {\n    declarations: function () {\n      return [TuiProgressBarComponent, TuiProgressColorSegmentsDirective, TuiProgressColorSegmentsPipe, TuiProgressColorSegmentsAsyncPipe, TuiProgressCircleComponent, TuiProgressLabelComponent, TuiProgressSegmentedComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiRepeatTimesModule];\n    },\n    exports: function () {\n      return [TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsDirective, TuiProgressColorSegmentsPipe, TuiProgressColorSegmentsAsyncPipe, TuiProgressLabelComponent, TuiProgressSegmentedComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AbstractTuiColorSegments, TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsAsyncPipe, TuiProgressColorSegmentsDirective, TuiProgressColorSegmentsPipe, TuiProgressLabelComponent, TuiProgressModule, TuiProgressSegmentedComponent, nonNegativeInt, positiveInt }; //# sourceMappingURL=taiga-ui-kit-components-progress.js.map","map":null,"metadata":{},"sourceType":"module"}