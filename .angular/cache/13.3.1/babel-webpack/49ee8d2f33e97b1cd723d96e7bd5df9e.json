{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { NgControl, FormArrayName, FormGroupName, FormGroupDirective, ReactiveFormsModule } from '@angular/forms';\nimport { TuiValidationError, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';\nimport { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';\nimport { merge, EMPTY, of, isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { TuiErrorModule } from '@taiga-ui/core';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@taiga-ui/core';\nimport * as ɵngcc3 from '@angular/forms';\n\nfunction TuiFieldErrorComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst EMPTY_RECORD = {}; // @dynamic\n\nlet TuiFieldErrorComponent = /*#__PURE__*/(() => {\n  let TuiFieldErrorComponent = class TuiFieldErrorComponent {\n    constructor(ngControl, formArrayName, formGroupName, formGroup, validationErrors) {\n      this.ngControl = ngControl;\n      this.formArrayName = formArrayName;\n      this.formGroupName = formGroupName;\n      this.formGroup = formGroup;\n      this.validationErrors = validationErrors;\n      this.order = [];\n\n      if (this.ngControl) {\n        this.ngControl.valueAccessor = this;\n      }\n    }\n\n    get change$() {\n      var _a, _b;\n\n      return merge(((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges) || EMPTY, ((_b = this.control) === null || _b === void 0 ? void 0 : _b.statusChanges) || EMPTY);\n    }\n\n    get computedError() {\n      return this.invalid && this.touched && this.error || of(null);\n    }\n\n    registerOnChange() {}\n\n    registerOnTouched() {}\n\n    setDisabledState() {}\n\n    writeValue() {}\n\n    get error() {\n      const {\n        errorId\n      } = this;\n\n      if (!errorId) {\n        return of(null);\n      }\n\n      const firstError = this.controlErrors[errorId];\n      const errorContent = this.validationErrors[errorId];\n      return this.getError(firstError, errorContent);\n    }\n\n    get invalid() {\n      return !!this.control && this.control.invalid;\n    }\n\n    get touched() {\n      return !!this.control && this.control.touched;\n    }\n\n    get control() {\n      if (this.ngControl) {\n        return this.ngControl.control;\n      }\n\n      if (this.formArrayName) {\n        return this.formArrayName.control;\n      }\n\n      if (this.formGroupName) {\n        return this.formGroupName.control;\n      }\n\n      if (this.formGroup) {\n        return this.formGroup.control;\n      }\n\n      return null;\n    }\n\n    get errorId() {\n      return this.getErrorId(this.order, this.controlErrors);\n    }\n\n    get controlErrors() {\n      return this.control && this.control.errors || EMPTY_RECORD;\n    }\n\n    getErrorId(order, controlErrors) {\n      const id = order && order.find(errorId => controlErrors[errorId]);\n      const fallback = Object.keys(controlErrors)[0];\n      return id || fallback || '';\n    }\n\n    getError(firstError, errorContent) {\n      if (firstError instanceof TuiValidationError) {\n        return of(firstError);\n      }\n\n      if (errorContent === undefined && typeof firstError === 'string') {\n        return of(new TuiValidationError(firstError));\n      }\n\n      if (isObservable(errorContent)) {\n        return errorContent.pipe(map(error => new TuiValidationError(error || '', firstError)));\n      }\n\n      return of(new TuiValidationError(errorContent || '', firstError));\n    }\n\n  };\n\n  TuiFieldErrorComponent.ɵfac = function TuiFieldErrorComponent_Factory(t) {\n    return new (t || TuiFieldErrorComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(FormArrayName, 10), ɵngcc0.ɵɵdirectiveInject(FormGroupName, 10), ɵngcc0.ɵɵdirectiveInject(FormGroupDirective, 10), ɵngcc0.ɵɵdirectiveInject(TUI_VALIDATION_ERRORS));\n  };\n\n  TuiFieldErrorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiFieldErrorComponent,\n    selectors: [[\"tui-field-error\"]],\n    inputs: {\n      order: \"order\"\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[4, \"ngIf\"], [3, \"error\"]],\n    template: function TuiFieldErrorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TuiFieldErrorComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵelement(2, \"tui-error\", 1);\n        ɵngcc0.ɵɵpipe(3, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.change$));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"error\", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.computedError));\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.TuiErrorComponent],\n    pipes: [ɵngcc1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block}\"]\n  });\n\n  __decorate([Input(), tuiDefaultProp()], TuiFieldErrorComponent.prototype, \"order\", void 0);\n\n  __decorate([tuiPure], TuiFieldErrorComponent.prototype, \"change$\", null);\n\n  __decorate([tuiPure], TuiFieldErrorComponent.prototype, \"getErrorId\", null);\n\n  __decorate([tuiPure], TuiFieldErrorComponent.prototype, \"getError\", null);\n\n  TuiFieldErrorComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Optional()), __param(1, Self()), __param(1, Inject(FormArrayName)), __param(2, Optional()), __param(2, Self()), __param(2, Inject(FormGroupName)), __param(3, Optional()), __param(3, Self()), __param(3, Inject(FormGroupDirective)), __param(4, Inject(TUI_VALIDATION_ERRORS))], TuiFieldErrorComponent);\n  /**\n   * @deprecated use {@link TuiFieldErrorPipeModule} (from '@taiga-ui/kit') instead\n   */\n\n  return TuiFieldErrorComponent;\n})();\nlet TuiFieldErrorModule = /*#__PURE__*/(() => {\n  let TuiFieldErrorModule = class TuiFieldErrorModule {};\n\n  TuiFieldErrorModule.ɵfac = function TuiFieldErrorModule_Factory(t) {\n    return new (t || TuiFieldErrorModule)();\n  };\n\n  TuiFieldErrorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiFieldErrorModule\n  });\n  TuiFieldErrorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiErrorModule, ReactiveFormsModule]]\n  });\n  return TuiFieldErrorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiFieldErrorModule, {\n    declarations: function () {\n      return [TuiFieldErrorComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiErrorModule, ReactiveFormsModule];\n    },\n    exports: function () {\n      return [TuiFieldErrorComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiFieldErrorComponent, TuiFieldErrorModule }; //# sourceMappingURL=taiga-ui-kit-components-field-error.js.map","map":null,"metadata":{},"sourceType":"module"}