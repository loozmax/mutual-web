{"ast":null,"code":"import { ElementRef, NgZone, Optional } from '@angular/core';\nimport { WINDOW } from '@ng-web-apis/common';\nimport { tuiZoneOptimized, watch } from '@taiga-ui/cdk';\nimport { TUI_IS_MOBILE_RES, TUI_MEDIA, TUI_MODE } from '@taiga-ui/core/tokens';\nimport { fromEvent, EMPTY } from 'rxjs';\nimport { startWith, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { TuiModeDirective } from '@taiga-ui/core/directives/mode';\n\nfunction isMobileResFactory(windowRef, {\n  mobile\n}, {\n  nativeElement\n}, ngZone) {\n  const mobile$ = fromEvent(windowRef, 'resize').pipe(startWith(null), map(() => windowRef.innerWidth < mobile), distinctUntilChanged(), tuiZoneOptimized(ngZone));\n  nativeElement['$.class._mobile'] = mobile$;\n  return mobile$;\n}\n\nconst TUI_IS_MOBILE_RES_PROVIDER = {\n  provide: TUI_IS_MOBILE_RES,\n  deps: [WINDOW, TUI_MEDIA, ElementRef, NgZone],\n  useFactory: isMobileResFactory\n};\n\nfunction modeFactory(mode, {\n  nativeElement\n}) {\n  const mode$ = mode ? mode.change$.pipe(startWith(null), map(() => mode.mode)) : EMPTY;\n  nativeElement['$.data-mode.attr'] = mode$;\n  return mode$;\n}\n\nconst MODE_PROVIDER = {\n  provide: TUI_MODE,\n  deps: [[new Optional(), TuiModeDirective], ElementRef],\n  useFactory: modeFactory\n};\n\nfunction watchedControllerFactory(controller, changeDetectorRef, destroy$) {\n  controller.change$.pipe(watch(changeDetectorRef), takeUntil(destroy$)).subscribe();\n  return controller;\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MODE_PROVIDER, TUI_IS_MOBILE_RES_PROVIDER, isMobileResFactory, modeFactory, watchedControllerFactory }; //# sourceMappingURL=taiga-ui-core-providers.js.map","map":null,"metadata":{},"sourceType":"module"}