{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, NgZone, ElementRef, Optional, SkipSelf, Input, Output, Directive, NgModule } from '@angular/core';\nimport { tuiDefaultProp, tuiPure } from '@taiga-ui/cdk/decorators';\nimport { tuiZoneOptimized } from '@taiga-ui/cdk/observables';\nimport { TUI_ACTIVE_ELEMENT } from '@taiga-ui/cdk/tokens';\nimport { Observable } from 'rxjs';\nimport { map, startWith, distinctUntilChanged, skip } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nvar TuiActiveZoneDirective_1;\nlet TuiActiveZoneDirective = TuiActiveZoneDirective_1 = class TuiActiveZoneDirective {\n  constructor(active$, ngZone, elementRef, directParentActiveZone) {\n    this.active$ = active$;\n    this.ngZone = ngZone;\n    this.elementRef = elementRef;\n    this.directParentActiveZone = directParentActiveZone;\n    this.subActiveZones = [];\n    this.tuiActiveZoneParent = null;\n    this.tuiActiveZoneChange = this.active$.pipe(map(element => !!element && this.contains(element)), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.ngZone));\n\n    if (this.directParentActiveZone) {\n      this.directParentActiveZone.addSubActiveZone(this);\n    }\n  }\n\n  set tuiActiveZoneParentSetter(zone) {\n    this.setZone(zone);\n  }\n\n  ngOnDestroy() {\n    if (this.directParentActiveZone) {\n      this.directParentActiveZone.removeSubActiveZone(this);\n    }\n\n    if (this.tuiActiveZoneParent) {\n      this.tuiActiveZoneParent.removeSubActiveZone(this);\n    }\n  }\n\n  contains(node) {\n    return this.elementRef.nativeElement.contains(node) || this.subActiveZones.some((item, index, array) => array.indexOf(item) === index && item.contains(node));\n  }\n\n  setZone(zone) {\n    if (this.tuiActiveZoneParent) {\n      this.tuiActiveZoneParent.removeSubActiveZone(this);\n    }\n\n    if (zone) {\n      zone.addSubActiveZone(this);\n    }\n\n    this.tuiActiveZoneParent = zone;\n  }\n\n  addSubActiveZone(activeZone) {\n    this.subActiveZones = [...this.subActiveZones, activeZone];\n  }\n\n  removeSubActiveZone(activeZone) {\n    const index = this.subActiveZones.findIndex(item => item === activeZone);\n    this.subActiveZones = [...this.subActiveZones.slice(0, index), ...this.subActiveZones.slice(index + 1)];\n  }\n\n};\n\nTuiActiveZoneDirective.ɵfac = function TuiActiveZoneDirective_Factory(t) {\n  return new (t || TuiActiveZoneDirective)(ɵngcc0.ɵɵdirectiveInject(TUI_ACTIVE_ELEMENT), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(TuiActiveZoneDirective_1, 12));\n};\n\nTuiActiveZoneDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiActiveZoneDirective,\n  selectors: [[\"\", \"tuiActiveZone\", \"\", 5, \"ng-container\"], [\"\", \"tuiActiveZoneChange\", \"\", 5, \"ng-container\"], [\"\", \"tuiActiveZoneParent\", \"\", 5, \"ng-container\"]],\n  inputs: {\n    tuiActiveZoneParentSetter: [\"tuiActiveZoneParent\", \"tuiActiveZoneParentSetter\"]\n  },\n  outputs: {\n    tuiActiveZoneChange: \"tuiActiveZoneChange\"\n  },\n  exportAs: [\"tuiActiveZone\"]\n});\n\nTuiActiveZoneDirective.ctorParameters = () => [{\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TUI_ACTIVE_ELEMENT]\n  }]\n}, {\n  type: NgZone,\n  decorators: [{\n    type: Inject,\n    args: [NgZone]\n  }]\n}, {\n  type: ElementRef,\n  decorators: [{\n    type: Inject,\n    args: [ElementRef]\n  }]\n}, {\n  type: TuiActiveZoneDirective,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }, {\n    type: Inject,\n    args: [TuiActiveZoneDirective_1]\n  }]\n}];\n\n__decorate([Input('tuiActiveZoneParent'), tuiDefaultProp()], TuiActiveZoneDirective.prototype, \"tuiActiveZoneParentSetter\", null);\n\n__decorate([Output()], TuiActiveZoneDirective.prototype, \"tuiActiveZoneChange\", void 0);\n\n__decorate([tuiPure], TuiActiveZoneDirective.prototype, \"setZone\", null);\n\nTuiActiveZoneDirective = TuiActiveZoneDirective_1 = __decorate([__param(0, Inject(TUI_ACTIVE_ELEMENT)), __param(1, Inject(NgZone)), __param(2, Inject(ElementRef)), __param(3, Optional()), __param(3, SkipSelf()), __param(3, Inject(TuiActiveZoneDirective_1))], TuiActiveZoneDirective);\nlet TuiActiveZoneModule = /*#__PURE__*/(() => {\n  let TuiActiveZoneModule = class TuiActiveZoneModule {};\n\n  TuiActiveZoneModule.ɵfac = function TuiActiveZoneModule_Factory(t) {\n    return new (t || TuiActiveZoneModule)();\n  };\n\n  TuiActiveZoneModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiActiveZoneModule\n  });\n  TuiActiveZoneModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiActiveZoneModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiActiveZoneModule, {\n    declarations: [TuiActiveZoneDirective],\n    exports: [TuiActiveZoneDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiActiveZoneDirective, TuiActiveZoneModule }; //# sourceMappingURL=taiga-ui-cdk-directives-active-zone.js.map","map":null,"metadata":{},"sourceType":"module"}