{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, ComponentFactoryResolver, Injector, ElementRef, Host, Optional, ChangeDetectorRef, NgZone, Renderer2, ViewContainerRef, Input, Directive, forwardRef, NgModule } from '@angular/core';\nimport { ALWAYS_TRUE_HANDLER, typedFromEvent, getNativeFocused, px, CHAR_ZERO_WIDTH_SPACE, CHAR_NO_BREAK_SPACE, TuiPortalService, TuiActiveZoneDirective, TuiDestroyService, TuiParentsScrollService } from '@taiga-ui/cdk';\nimport { AbstractTuiDropdown, TUI_DOCUMENT_OR_SHADOW_ROOT, TUI_ELEMENT_REF, TUI_DROPDOWN_DIRECTIVE, TuiDropdownBoxModule } from '@taiga-ui/core';\nimport { getWordRange } from '@taiga-ui/kit/utils/dom';\nimport { merge } from 'rxjs';\nimport { switchMapTo, takeUntil, map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nvar TuiDropdownSelectionDirective_1;\nconst EMPTY_RECT = {\n  bottom: 0,\n  height: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n  width: 0\n}; // @dynamic\n\nlet TuiDropdownSelectionDirective = TuiDropdownSelectionDirective_1 = class TuiDropdownSelectionDirective extends AbstractTuiDropdown {\n  constructor(documentRef, componentFactoryResolver, injector, portalService, elementRef, activeZone, shadowRootRef, customElementRef, destroy$, refresh$, changeDetectorRef, ngZone, renderer, viewContainerRef) {\n    super(componentFactoryResolver, injector, portalService, customElementRef || elementRef, activeZone);\n    this.refresh$ = refresh$;\n    this.changeDetectorRef = changeDetectorRef;\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.viewContainerRef = viewContainerRef;\n    this.visibilityHandler = ALWAYS_TRUE_HANDLER;\n    this.position = 'selection';\n    this.documentRef = shadowRootRef || documentRef; // SSR protection\n\n    if (!this.documentRef.createRange) {\n      return;\n    }\n\n    this.range = this.documentRef.createRange();\n    const {\n      nativeElement\n    } = this.elementRef;\n    merge(typedFromEvent(this.documentRef, 'mouseup'), typedFromEvent(nativeElement, 'mousedown').pipe(switchMapTo(typedFromEvent(nativeElement, 'mousemove').pipe(takeUntil(typedFromEvent(this.documentRef, 'mouseup'))))), typedFromEvent(nativeElement, 'keyup')).pipe(map(() => {\n      const active = getNativeFocused(this.documentRef);\n      const selection = this.documentRef.getSelection(); // TODO: iframe warning\n\n      if ((active instanceof HTMLInputElement || active instanceof HTMLTextAreaElement) && nativeElement.contains(active)) {\n        return this.veryVerySadInputFix(active);\n      }\n\n      return selection && selection.rangeCount ? selection.getRangeAt(0) : this.range;\n    }), takeUntil(destroy$)).subscribe(range => {\n      const contained = !!range && nativeElement.contains(range.commonAncestorContainer);\n      this.range = contained ? range : this.range;\n      const valid = contained && (!this.visibilityHandler || !this.range || this.visibilityHandler(this.range));\n      this.toggleDropdownBox(!!range && (valid || this.inDropdown(range)));\n    });\n  }\n\n  set tuiDropdownSelection(handler) {\n    if (!handler || !this.range) {\n      return;\n    }\n\n    const inHostAndValid = this.elementRef.nativeElement.contains(this.range.commonAncestorContainer) && handler(this.range);\n    this.visibilityHandler = handler;\n    this.toggleDropdownBox(inHostAndValid);\n  }\n\n  get clientRect() {\n    const {\n      defaultView\n    } = this.documentRef;\n    const {\n      rangeRect\n    } = this;\n    const frameElement = defaultView ? defaultView.frameElement : null;\n\n    if (!frameElement) {\n      return rangeRect;\n    }\n\n    const documentRect = frameElement.getBoundingClientRect();\n    return {\n      top: rangeRect.top + documentRect.top,\n      left: rangeRect.left + documentRect.left,\n      right: rangeRect.left + documentRect.left + rangeRect.width,\n      bottom: rangeRect.top + documentRect.top + rangeRect.height,\n      width: rangeRect.width,\n      height: rangeRect.height\n    };\n  }\n\n  ngOnDestroy() {\n    this.closeDropdownBox();\n\n    if (this.ghost) {\n      this.renderer.removeChild(this.viewContainerRef.element.nativeElement, this.ghost);\n    }\n  }\n  /**\n   * get ClientRect of current Range according to provided position\n   */\n\n\n  get rangeRect() {\n    if (!this.range) {\n      return EMPTY_RECT;\n    }\n\n    switch (this.position) {\n      case 'tag':\n        {\n          const {\n            commonAncestorContainer\n          } = this.range;\n          const element = commonAncestorContainer.nodeType === Node.ELEMENT_NODE ? commonAncestorContainer : commonAncestorContainer.parentNode;\n          return element.getBoundingClientRect();\n        }\n\n      case 'word':\n        return getWordRange(this.range).getBoundingClientRect();\n\n      default:\n        return this.range.getBoundingClientRect();\n    }\n  }\n  /**\n   * Toggle dropdown visibility (has to be in ngZone.run because it could be initiated inside iframe in Editor)\n   */\n\n\n  toggleDropdownBox(visible) {\n    this.ngZone.run(() => {\n      if (visible) {\n        this.openDropdownBox();\n      } else {\n        this.closeDropdownBox();\n      }\n\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * Check if Node is inside dropdown\n   */\n\n\n  boxContains(node) {\n    return !!this.dropdownBoxRef && this.dropdownBoxRef.location.nativeElement.contains(node);\n  }\n  /**\n   * Check if given range is at least partially inside dropdown\n   */\n\n\n  inDropdown(range) {\n    const {\n      startContainer,\n      endContainer\n    } = range;\n    const inDropdown = this.boxContains(range.commonAncestorContainer);\n    const hostToDropdown = this.boxContains(endContainer) && this.elementRef.nativeElement.contains(startContainer);\n    const dropdownToHost = this.boxContains(startContainer) && this.elementRef.nativeElement.contains(endContainer);\n    return inDropdown || hostToDropdown || dropdownToHost;\n  }\n  /**\n   * Position invisible DIV and create Range similar to selected range inside input/textarea\n   */\n\n\n  veryVerySadInputFix(element) {\n    const {\n      ghost = this.initGhost(element)\n    } = this;\n    const {\n      top,\n      left,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    const {\n      selectionStart,\n      selectionEnd\n    } = element;\n    const range = this.documentRef.createRange();\n    const hostRect = this.elementRef.nativeElement.getBoundingClientRect();\n    ghost.style.top = px(top - hostRect.top);\n    ghost.style.left = px(left - hostRect.left);\n    ghost.style.width = px(width);\n    ghost.style.height = px(height);\n    ghost.textContent = CHAR_ZERO_WIDTH_SPACE + element.value + CHAR_NO_BREAK_SPACE;\n    range.setStart(ghost.firstChild, selectionStart || 0);\n    range.setEnd(ghost.firstChild, selectionEnd || 0);\n    return range;\n  }\n  /**\n   * Create an invisible DIV styled exactly like input/textarea element inside directive\n   */\n\n\n  initGhost(element) {\n    const ghost = this.renderer.createElement('div');\n    const {\n      nativeElement\n    } = this.viewContainerRef.element;\n    const {\n      font,\n      letterSpacing,\n      textTransform,\n      padding\n    } = getComputedStyle(element);\n    ghost.style.position = 'absolute';\n    ghost.style.pointerEvents = 'none';\n    ghost.style.opacity = '0';\n    ghost.style.whiteSpace = 'pre-wrap';\n    ghost.style.font = font;\n    ghost.style.letterSpacing = letterSpacing;\n    ghost.style.textTransform = textTransform;\n    ghost.style.padding = padding;\n    this.renderer.appendChild(nativeElement, ghost);\n    this.ghost = ghost;\n    return ghost;\n  }\n\n};\n\nTuiDropdownSelectionDirective.ɵfac = function TuiDropdownSelectionDirective_Factory(t) {\n  return new (t || TuiDropdownSelectionDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(TuiPortalService), ɵngcc0.ɵɵdirectiveInject(ElementRef, 1), ɵngcc0.ɵɵdirectiveInject(TuiActiveZoneDirective, 8), ɵngcc0.ɵɵdirectiveInject(TUI_DOCUMENT_OR_SHADOW_ROOT, 8), ɵngcc0.ɵɵdirectiveInject(TUI_ELEMENT_REF, 8), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService), ɵngcc0.ɵɵdirectiveInject(TuiParentsScrollService), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef));\n};\n\nTuiDropdownSelectionDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiDropdownSelectionDirective,\n  selectors: [[\"\", \"tuiDropdownSelection\", \"\", 5, \"ng-container\"]],\n  inputs: {\n    position: [\"tuiDropdownSelectionPosition\", \"position\"],\n    tuiDropdownSelection: \"tuiDropdownSelection\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_DROPDOWN_DIRECTIVE,\n    useExisting: forwardRef(() => TuiDropdownSelectionDirective_1)\n  }, TuiParentsScrollService, TuiDestroyService]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nTuiDropdownSelectionDirective.ctorParameters = () => [{\n  type: Document,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ComponentFactoryResolver,\n  decorators: [{\n    type: Inject,\n    args: [ComponentFactoryResolver]\n  }]\n}, {\n  type: Injector,\n  decorators: [{\n    type: Inject,\n    args: [Injector]\n  }]\n}, {\n  type: TuiPortalService,\n  decorators: [{\n    type: Inject,\n    args: [TuiPortalService]\n  }]\n}, {\n  type: ElementRef,\n  decorators: [{\n    type: Host\n  }, {\n    type: Inject,\n    args: [ElementRef]\n  }]\n}, {\n  type: TuiActiveZoneDirective,\n  decorators: [{\n    type: Inject,\n    args: [TuiActiveZoneDirective]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: Document,\n  decorators: [{\n    type: Inject,\n    args: [TUI_DOCUMENT_OR_SHADOW_ROOT]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: ElementRef,\n  decorators: [{\n    type: Inject,\n    args: [TUI_ELEMENT_REF]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: TuiDestroyService,\n  decorators: [{\n    type: Inject,\n    args: [TuiDestroyService]\n  }]\n}, {\n  type: TuiParentsScrollService,\n  decorators: [{\n    type: Inject,\n    args: [TuiParentsScrollService]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: NgZone,\n  decorators: [{\n    type: Inject,\n    args: [NgZone]\n  }]\n}, {\n  type: Renderer2,\n  decorators: [{\n    type: Inject,\n    args: [Renderer2]\n  }]\n}, {\n  type: ViewContainerRef,\n  decorators: [{\n    type: Inject,\n    args: [ViewContainerRef]\n  }]\n}];\n\n__decorate([Input()], TuiDropdownSelectionDirective.prototype, \"tuiDropdownSelection\", null);\n\n__decorate([Input('tuiDropdownSelectionPosition')], TuiDropdownSelectionDirective.prototype, \"position\", void 0);\n\nTuiDropdownSelectionDirective = TuiDropdownSelectionDirective_1 = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Inject(ComponentFactoryResolver)), __param(2, Inject(Injector)), __param(3, Inject(TuiPortalService)), __param(4, Host()), __param(4, Inject(ElementRef)), __param(5, Inject(TuiActiveZoneDirective)), __param(5, Optional()), __param(6, Inject(TUI_DOCUMENT_OR_SHADOW_ROOT)), __param(6, Optional()), __param(7, Inject(TUI_ELEMENT_REF)), __param(7, Optional()), __param(8, Inject(TuiDestroyService)), __param(9, Inject(TuiParentsScrollService)), __param(10, Inject(ChangeDetectorRef)), __param(11, Inject(NgZone)), __param(12, Inject(Renderer2)), __param(13, Inject(ViewContainerRef))], TuiDropdownSelectionDirective);\nlet TuiDropdownSelectionModule = /*#__PURE__*/(() => {\n  let TuiDropdownSelectionModule = class TuiDropdownSelectionModule {};\n\n  TuiDropdownSelectionModule.ɵfac = function TuiDropdownSelectionModule_Factory(t) {\n    return new (t || TuiDropdownSelectionModule)();\n  };\n\n  TuiDropdownSelectionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiDropdownSelectionModule\n  });\n  TuiDropdownSelectionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[TuiDropdownBoxModule]]\n  });\n  return TuiDropdownSelectionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiDropdownSelectionModule, {\n    declarations: function () {\n      return [TuiDropdownSelectionDirective];\n    },\n    imports: function () {\n      return [TuiDropdownBoxModule];\n    },\n    exports: function () {\n      return [TuiDropdownSelectionDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiDropdownSelectionDirective, TuiDropdownSelectionModule }; //# sourceMappingURL=taiga-ui-kit-directives-dropdown-selection.js.map","map":null,"metadata":{},"sourceType":"module"}