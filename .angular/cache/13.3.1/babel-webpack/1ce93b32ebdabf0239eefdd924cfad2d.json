{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { forwardRef, Optional, Self, Inject, ChangeDetectorRef, Injector, Type, ViewChild, Input, HostListener, Component, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiControl, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TuiMonth, TUI_FIRST_DAY, TUI_LAST_DAY, changeDateSeparator, nullableSame, DATE_RANGE_FILLER_LENGTH, TuiDayRange, DATE_FILLER_LENGTH, RANGE_SEPARATOR_CHAR, setNativeFocused, TUI_IS_MOBILE, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, tuiDefaultProp, TuiActiveZoneModule, TuiLetModule } from '@taiga-ui/cdk';\nimport { TUI_DEFAULT_MARKER_HANDLER, sizeBigger, TuiDialogService, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiTextfieldExampleTextDirective, TUI_TEXTFIELD_EXAMPLE_TEXT, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { MAX_DAY_RANGE_LENGTH_MAPPER, EMPTY_MASK } from '@taiga-ui/kit/constants';\nimport { TUI_CALENDAR_DATA_STREAM, TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_MOBILE_CALENDAR, TUI_DATE_TEXTS } from '@taiga-ui/kit/tokens';\nimport { tuiCreateDateRangeMask, tuiCreateAutoCorrectedDateRangePipe } from '@taiga-ui/kit/utils/mask';\nimport { PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport { Observable } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { TuiReplayControlValueChangesFactory } from '@taiga-ui/kit/utils/miscellaneous';\nimport { CommonModule } from '@angular/common';\nimport { TuiCalendarRangeModule } from '@taiga-ui/kit/components/calendar-range';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { TextMaskModule } from 'angular2-text-mask'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nimport * as ɵngcc3 from '@taiga-ui/kit/directives';\nimport * as ɵngcc4 from 'angular2-text-mask';\nimport * as ɵngcc5 from '@taiga-ui/kit/components/calendar-range';\nimport * as ɵngcc6 from '@angular/common';\nimport * as ɵngcc7 from '@angular/forms';\nimport * as ɵngcc8 from 'rxjs';\n\nfunction TuiInputDateRangeComponent_tui_primitive_textfield_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-primitive-textfield\", 5);\n    ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputDateRangeComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onValueChange($event);\n    })(\"hoveredChange\", function TuiInputDateRangeComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_hoveredChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onHovered($event);\n    })(\"pressedChange\", function TuiInputDateRangeComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_pressedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onPressed($event);\n    });\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dateFiller_r7 = ctx.tuiLet;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    const _r1 = ɵngcc0.ɵɵreference(4);\n\n    const _r3 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"pseudoFocused\", ctx_r0.innerPseudoFocused)(\"pseudoHovered\", ctx_r0.pseudoHovered)(\"pseudoPressed\", ctx_r0.pseudoPressed)(\"invalid\", ctx_r0.computedInvalid)(\"tuiTextfieldExampleText\", ctx_r0.computedExampleText)(\"nativeId\", ctx_r0.nativeId)(\"filler\", ctx_r0.getComputedRangeFiller(dateFiller_r7))(\"readOnly\", ctx_r0.readOnly)(\"iconContent\", ctx_r0.computedMobile ? _r1 : _r3)(\"disabled\", ctx_r0.computedDisabled)(\"textMask\", ctx_r0.computedMask)(\"value\", ctx_r0.computedValue);\n  }\n}\n\nfunction TuiInputDateRangeComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-svg\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiInputDateRangeComponent_ng_template_3_Template_tui_svg_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onMobileClick();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"icon\", !ctx_r2.computedDisabled);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r2.calendarIcon);\n  }\n}\n\nfunction TuiInputDateRangeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tui-svg\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"icon\", !ctx_r4.computedDisabled);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r4.calendarIcon);\n  }\n}\n\nfunction TuiInputDateRangeComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-calendar-range\", 8);\n    ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputDateRangeComponent_ng_template_7_Template_tui_calendar_range_valueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onRangeChange($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"defaultViewedMonth\", ctx_r6.defaultViewedMonth)(\"disabledItemHandler\", ctx_r6.disabledItemHandler)(\"items\", ctx_r6.items)(\"min\", ctx_r6.min)(\"max\", ctx_r6.max)(\"markerHandler\", ctx_r6.markerHandler)(\"minLength\", ctx_r6.minLength)(\"maxLength\", ctx_r6.maxLength)(\"value\", ctx_r6.value);\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\n\nconst RANGE_STREAM_FACTORY = (control, valueTransformer) => TuiReplayControlValueChangesFactory(control, valueTransformer);\n\nconst TUI_INPUT_DATE_RANGE_PROVIDERS = [{\n  provide: AbstractTuiControl,\n  useExisting: forwardRef(() => TuiInputDateRangeComponent)\n}, {\n  provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n  useExisting: forwardRef(() => TuiInputDateRangeComponent)\n}, {\n  provide: TUI_CALENDAR_DATA_STREAM,\n  deps: [[new Optional(), new Self(), NgControl], [new Optional(), forwardRef(() => TUI_DATE_RANGE_VALUE_TRANSFORMER)]],\n  useFactory: RANGE_STREAM_FACTORY\n}, LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER]; // @dynamic\n\nlet TuiInputDateRangeComponent = /*#__PURE__*/(() => {\n  let TuiInputDateRangeComponent = class TuiInputDateRangeComponent extends AbstractTuiNullableControl {\n    constructor(control, changeDetectorRef, injector, isMobile, dialogService, mobileCalendar, textfieldSize, textfieldExampleText, dateFormat, dateSeparator, dateTexts$, valueTransformer) {\n      super(control, changeDetectorRef, valueTransformer);\n      this.injector = injector;\n      this.isMobile = isMobile;\n      this.dialogService = dialogService;\n      this.mobileCalendar = mobileCalendar;\n      this.textfieldSize = textfieldSize;\n      this.textfieldExampleText = textfieldExampleText;\n      this.dateFormat = dateFormat;\n      this.dateSeparator = dateSeparator;\n      this.dateTexts$ = dateTexts$;\n      this.valueTransformer = valueTransformer;\n      this.textMaskOptions = {\n        mask: tuiCreateDateRangeMask(this.dateFormat, this.dateSeparator),\n        pipe: tuiCreateAutoCorrectedDateRangePipe(this),\n        guide: false\n      };\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;\n      this.defaultViewedMonth = TuiMonth.currentLocal();\n      this.items = [];\n      this.min = TUI_FIRST_DAY;\n      this.max = TUI_LAST_DAY;\n      this.minLength = null;\n      this.maxLength = null;\n      this.open = false;\n      this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;\n      this.dateFiller$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));\n    }\n\n    get nativeFocusableElement() {\n      return this.textfield ? this.textfield.nativeFocusableElement : null;\n    }\n\n    get focused() {\n      return !!this.textfield && this.textfield.focused;\n    }\n\n    get computedMobile() {\n      return this.isMobile && !!this.mobileCalendar;\n    }\n\n    get calendarIcon() {\n      return sizeBigger(this.textfieldSize.size) ? 'tuiIconCalendarLarge' : 'tuiIconCalendar';\n    }\n\n    get canOpen() {\n      return this.interactive && !this.computedMobile;\n    }\n\n    get computedExampleText() {\n      return this.items.length ? this.textfieldExampleText.exampleText : '';\n    }\n\n    get computedMask() {\n      return this.activePeriod ? EMPTY_MASK : this.textMaskOptions;\n    }\n\n    get activePeriod() {\n      return this.items.find(item => nullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) && a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null;\n    }\n\n    get computedValue() {\n      const {\n        value,\n        nativeValue,\n        activePeriod\n      } = this;\n\n      if (activePeriod) {\n        return String(activePeriod);\n      }\n\n      return value ? value.getFormattedDayRange(this.dateFormat, this.dateSeparator) : nativeValue;\n    }\n\n    get innerPseudoFocused() {\n      if (this.pseudoFocused === false) {\n        return false;\n      }\n\n      if (this.open || this.computedFocused) {\n        return true;\n      }\n\n      return null;\n    }\n\n    get nativeValue() {\n      return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n    }\n\n    set nativeValue(value) {\n      if (!this.nativeFocusableElement) {\n        return;\n      }\n\n      this.nativeFocusableElement.value = value;\n    }\n\n    onClick() {\n      if (!this.isMobile) {\n        this.toggle();\n      }\n    }\n\n    getComputedRangeFiller(dateFiller) {\n      return this.activePeriod ? '' : this.getDateRangeFiller(dateFiller);\n    }\n\n    onMobileClick() {\n      if (!this.mobileCalendar) {\n        this.toggle();\n        return;\n      }\n\n      this.dialogService.open(new PolymorpheusComponent(this.mobileCalendar, this.injector), {\n        size: 'fullscreen',\n        closeable: false,\n        data: {\n          single: false,\n          min: this.maxLengthMapper(this.min, this.value, this.maxLength, true),\n          max: this.maxLengthMapper(this.max, this.value, this.maxLength, false),\n          disabledItemHandler: this.disabledItemHandler\n        }\n      }).pipe(takeUntil(this.destroy$)).subscribe(value => {\n        this.updateValue(value);\n      });\n    }\n\n    onOpenChange(open) {\n      this.open = open;\n    }\n\n    onValueChange(value) {\n      if (this.control) {\n        this.control.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n\n      if (!value) {\n        this.onOpenChange(true);\n      }\n\n      if (value.length !== DATE_RANGE_FILLER_LENGTH) {\n        this.updateValue(null);\n        return;\n      }\n\n      const parsedValue = TuiDayRange.normalizeParse(value, this.dateFormat);\n      this.updateValue(!this.minLength && !this.maxLength ? parsedValue : this.clampValue(parsedValue));\n    }\n\n    onRangeChange(range) {\n      this.toggle();\n      this.focusInput();\n\n      if (!range) {\n        this.nativeValue = '';\n      }\n\n      if (!nullableSame(this.value, range, (a, b) => a.daySame(b))) {\n        this.updateValue(range);\n      }\n    }\n\n    onItemSelect(item) {\n      this.toggle();\n      this.focusInput();\n\n      if (typeof item !== 'string') {\n        this.updateValue(item.range.dayLimit(this.min, this.max));\n        return;\n      }\n\n      if (this.activePeriod !== null) {\n        this.updateValue(null);\n        this.nativeValue = '';\n      }\n    }\n\n    onHovered(hovered) {\n      this.updateHovered(hovered);\n    }\n\n    onPressed(pressed) {\n      this.updatePressed(pressed);\n    }\n\n    onActiveZone(focused) {\n      this.updateFocused(focused);\n\n      if (!focused && !this.itemSelected && (this.nativeValue.length === DATE_FILLER_LENGTH || this.nativeValue.length === DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {\n        this.updateValue(TuiDayRange.normalizeParse(this.nativeValue, this.dateFormat));\n      }\n    }\n\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = value ? this.computedValue : '';\n    }\n\n    get itemSelected() {\n      return this.items.findIndex(item => String(item) === this.nativeValue) !== -1;\n    }\n\n    toggle() {\n      this.open = !this.open;\n    }\n\n    focusInput(preventScroll = false) {\n      if (this.nativeFocusableElement) {\n        setNativeFocused(this.nativeFocusableElement, true, preventScroll);\n      }\n    }\n\n    clampValue(value) {\n      const clampedBottom = this.minLength && value.from.append(this.minLength).dayAfter(value.to) ? new TuiDayRange(value.from, value.from.append(this.minLength).append({\n        day: -1\n      })) : value;\n      const availableMax = this.maxLength ? clampedBottom.from.append(this.maxLength).append({\n        day: -1\n      }) : this.max;\n      return clampedBottom.to.dayAfter(availableMax) ? new TuiDayRange(clampedBottom.from, availableMax) : clampedBottom;\n    }\n\n    getDateRangeFiller(dateFiller) {\n      return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;\n    }\n\n  };\n\n  TuiInputDateRangeComponent.ɵfac = function TuiInputDateRangeComponent_Factory(t) {\n    return new (t || TuiInputDateRangeComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(TUI_IS_MOBILE), ɵngcc0.ɵɵdirectiveInject(TuiDialogService), ɵngcc0.ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_EXAMPLE_TEXT), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_DATE_RANGE_VALUE_TRANSFORMER, 8));\n  };\n\n  TuiInputDateRangeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiInputDateRangeComponent,\n    selectors: [[\"tui-input-date-range\"]],\n    viewQuery: function TuiInputDateRangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostBindings: function TuiInputDateRangeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TuiInputDateRangeComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      disabledItemHandler: \"disabledItemHandler\",\n      markerHandler: \"markerHandler\",\n      defaultViewedMonth: \"defaultViewedMonth\",\n      items: \"items\",\n      min: \"min\",\n      max: \"max\",\n      minLength: \"minLength\",\n      maxLength: \"maxLength\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature(TUI_INPUT_DATE_RANGE_PROVIDERS), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 6,\n    consts: [[1, \"hosted\", 3, \"canOpen\", \"content\", \"open\", \"openChange\", \"tuiActiveZoneChange\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"numeric\", \"class\", \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"invalid\", \"tuiTextfieldExampleText\", \"nativeId\", \"filler\", \"readOnly\", \"iconContent\", \"disabled\", \"textMask\", \"value\", \"valueChange\", \"hoveredChange\", \"pressedChange\", 4, \"tuiLet\"], [\"mobileIconContent\", \"\"], [\"iconContent\", \"\"], [\"dropdown\", \"\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"numeric\", 1, \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"invalid\", \"tuiTextfieldExampleText\", \"nativeId\", \"filler\", \"readOnly\", \"iconContent\", \"disabled\", \"textMask\", \"value\", \"valueChange\", \"hoveredChange\", \"pressedChange\"], [\"automation-id\", \"tui-input-date-range__icon\", 3, \"src\", \"click\"], [3, \"src\"], [3, \"defaultViewedMonth\", \"disabledItemHandler\", \"items\", \"min\", \"max\", \"markerHandler\", \"minLength\", \"maxLength\", \"value\", \"valueChange\"]],\n    template: function TuiInputDateRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n        ɵngcc0.ɵɵlistener(\"openChange\", function TuiInputDateRangeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          return ctx.onOpenChange($event);\n        })(\"tuiActiveZoneChange\", function TuiInputDateRangeComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {\n          return ctx.onActiveZone($event);\n        });\n        ɵngcc0.ɵɵtemplate(1, TuiInputDateRangeComponent_tui_primitive_textfield_1_Template, 3, 12, \"tui-primitive-textfield\", 1);\n        ɵngcc0.ɵɵpipe(2, \"async\");\n        ɵngcc0.ɵɵtemplate(3, TuiInputDateRangeComponent_ng_template_3_Template, 1, 3, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(5, TuiInputDateRangeComponent_ng_template_5_Template, 1, 3, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(7, TuiInputDateRangeComponent_ng_template_7_Template, 1, 9, \"ng-template\", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r5 = ɵngcc0.ɵɵreference(8);\n\n        ɵngcc0.ɵɵproperty(\"canOpen\", ctx.canOpen)(\"content\", _r5)(\"open\", ctx.open && ctx.canOpen);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"tuiLet\", ɵngcc0.ɵɵpipeBind1(2, 4, ctx.dateFiller$));\n      }\n    },\n    directives: [ɵngcc1.TuiHostedDropdownComponent, ɵngcc2.TuiActiveZoneDirective, ɵngcc2.TuiLetDirective, ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc3.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc1.TuiTextfieldExampleTextDirective, ɵngcc4.MaskedInputDirective, ɵngcc1.TuiSvgComponent, ɵngcc5.TuiCalendarRangeComponent],\n    pipes: [ɵngcc6.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.icon[_ngcontent-%COMP%]{pointer-events:auto}\"]\n  });\n\n  __decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputDateRangeComponent.prototype, \"textfield\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"disabledItemHandler\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"markerHandler\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"defaultViewedMonth\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"items\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"min\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"max\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"minLength\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputDateRangeComponent.prototype, \"maxLength\", void 0);\n\n  __decorate([HostListener('click')], TuiInputDateRangeComponent.prototype, \"onClick\", null);\n\n  TuiInputDateRangeComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(Injector)), __param(3, Inject(TUI_IS_MOBILE)), __param(4, Inject(TuiDialogService)), __param(5, Optional()), __param(5, Inject(TUI_MOBILE_CALENDAR)), __param(6, Inject(TUI_TEXTFIELD_SIZE)), __param(7, Inject(TUI_TEXTFIELD_EXAMPLE_TEXT)), __param(8, Inject(TUI_DATE_FORMAT)), __param(9, Inject(TUI_DATE_SEPARATOR)), __param(10, Inject(TUI_DATE_TEXTS)), __param(11, Optional()), __param(11, Inject(TUI_DATE_RANGE_VALUE_TRANSFORMER))], TuiInputDateRangeComponent);\n  return TuiInputDateRangeComponent;\n})();\nvar TuiInputDateRangeDirective_1;\nlet TuiInputDateRangeDirective = TuiInputDateRangeDirective_1 = class TuiInputDateRangeDirective extends TuiAbstractTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n  process(input) {\n    input.inputMode = 'numeric';\n  }\n\n};\n\nTuiInputDateRangeDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputDateRangeDirective_BaseFactory;\n  return function TuiInputDateRangeDirective_Factory(t) {\n    return (ɵTuiInputDateRangeDirective_BaseFactory || (ɵTuiInputDateRangeDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputDateRangeDirective)))(t || TuiInputDateRangeDirective);\n  };\n}();\n\nTuiInputDateRangeDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputDateRangeDirective,\n  selectors: [[\"tui-input-date-range\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputDateRangeDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputDateRangeModule = /*#__PURE__*/(() => {\n  let TuiInputDateRangeModule = class TuiInputDateRangeModule {};\n\n  TuiInputDateRangeModule.ɵfac = function TuiInputDateRangeModule_Factory(t) {\n    return new (t || TuiInputDateRangeModule)();\n  };\n\n  TuiInputDateRangeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputDateRangeModule\n  });\n  TuiInputDateRangeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TextMaskModule, TuiActiveZoneModule, TuiLetModule, PolymorpheusModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiCalendarRangeModule, TuiValueAccessorModule]]\n  });\n  return TuiInputDateRangeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputDateRangeModule, {\n    declarations: function () {\n      return [TuiInputDateRangeComponent, TuiInputDateRangeDirective];\n    },\n    imports: function () {\n      return [CommonModule, TextMaskModule, TuiActiveZoneModule, TuiLetModule, PolymorpheusModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiCalendarRangeModule, TuiValueAccessorModule];\n    },\n    exports: function () {\n      return [TuiInputDateRangeComponent, TuiInputDateRangeDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RANGE_STREAM_FACTORY, TUI_INPUT_DATE_RANGE_PROVIDERS, TuiInputDateRangeComponent, TuiInputDateRangeDirective, TuiInputDateRangeModule }; //# sourceMappingURL=taiga-ui-kit-components-input-date-range.js.map","map":null,"metadata":{},"sourceType":"module"}