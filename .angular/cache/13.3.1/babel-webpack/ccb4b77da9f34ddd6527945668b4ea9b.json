{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, Input, HostBinding, Directive, NgModule } from '@angular/core';\nimport { MODE_PROVIDER } from '@taiga-ui/core/providers';\nimport { TUI_MODE } from '@taiga-ui/core/tokens';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nlet TuiWrapperDirective = /*#__PURE__*/(() => {\n  let TuiWrapperDirective = class TuiWrapperDirective {\n    constructor(mode$) {\n      this.mode$ = mode$;\n      this.disabled = false;\n      this.readOnly = false; // TODO: Rename to `hover` in 3.0\n\n      this.hovered = null; // TODO: Rename to `active` in 3.0\n\n      this.pressed = null;\n      this.focused = false;\n      this.invalid = false;\n      this.appearance = '';\n    }\n\n    get computedInvalid() {\n      return !this.disabled && !this.readOnly && this.invalid;\n    }\n\n    get computedFocused() {\n      return this.focused && !this.disabled;\n    }\n\n    get interactiveState() {\n      if (this.disabled) {\n        return \"disabled\"\n        /* Disabled */\n        ;\n      }\n\n      if (this.readOnly) {\n        return \"readonly\"\n        /* Readonly */\n        ;\n      }\n\n      if (this.pressed) {\n        return \"pressed\"\n        /* Pressed */\n        ;\n      }\n\n      if (this.hovered) {\n        return \"hovered\"\n        /* Hovered */\n        ;\n      }\n\n      return null;\n    }\n\n    get noHover() {\n      return this.readOnly || this.hovered === false;\n    }\n\n    get noActive() {\n      return this.readOnly || this.pressed === false;\n    }\n\n  };\n\n  TuiWrapperDirective.ɵfac = function TuiWrapperDirective_Factory(t) {\n    return new (t || TuiWrapperDirective)(ɵngcc0.ɵɵdirectiveInject(TUI_MODE));\n  };\n\n  TuiWrapperDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiWrapperDirective,\n    selectors: [[\"tui-wrapper\"], [\"\", \"tuiWrapper\", \"\"]],\n    hostVars: 10,\n    hostBindings: function TuiWrapperDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"$.data-mode.attr\", function TuiWrapperDirective___data_mode_attr_HostBindingHandler() {\n          return ctx.mode$;\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-appearance\", ctx.appearance)(\"data-state\", ctx.interactiveState);\n        ɵngcc0.ɵɵclassProp(\"_invalid\", ctx.computedInvalid)(\"_focused\", ctx.computedFocused)(\"_no-hover\", ctx.noHover)(\"_no-active\", ctx.noActive);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      readOnly: \"readOnly\",\n      hovered: \"hovered\",\n      pressed: \"pressed\",\n      focused: \"focused\",\n      invalid: \"invalid\",\n      appearance: \"appearance\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MODE_PROVIDER])]\n  });\n\n  __decorate([Input()], TuiWrapperDirective.prototype, \"disabled\", void 0);\n\n  __decorate([Input()], TuiWrapperDirective.prototype, \"readOnly\", void 0);\n\n  __decorate([Input()], TuiWrapperDirective.prototype, \"hovered\", void 0);\n\n  __decorate([Input()], TuiWrapperDirective.prototype, \"pressed\", void 0);\n\n  __decorate([Input()], TuiWrapperDirective.prototype, \"focused\", void 0);\n\n  __decorate([Input()], TuiWrapperDirective.prototype, \"invalid\", void 0);\n\n  __decorate([Input(), HostBinding('attr.data-appearance')], TuiWrapperDirective.prototype, \"appearance\", void 0);\n\n  __decorate([HostBinding('class._invalid')], TuiWrapperDirective.prototype, \"computedInvalid\", null);\n\n  __decorate([HostBinding('class._focused')], TuiWrapperDirective.prototype, \"computedFocused\", null);\n\n  __decorate([HostBinding('attr.data-state')], TuiWrapperDirective.prototype, \"interactiveState\", null);\n\n  __decorate([HostBinding('class._no-hover')], TuiWrapperDirective.prototype, \"noHover\", null);\n\n  __decorate([HostBinding('class._no-active')], TuiWrapperDirective.prototype, \"noActive\", null);\n\n  TuiWrapperDirective = __decorate([__param(0, Inject(TUI_MODE))], TuiWrapperDirective);\n  return TuiWrapperDirective;\n})();\nlet TuiWrapperModule = /*#__PURE__*/(() => {\n  let TuiWrapperModule = class TuiWrapperModule {};\n\n  TuiWrapperModule.ɵfac = function TuiWrapperModule_Factory(t) {\n    return new (t || TuiWrapperModule)();\n  };\n\n  TuiWrapperModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiWrapperModule\n  });\n  TuiWrapperModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiWrapperModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiWrapperModule, {\n    declarations: [TuiWrapperDirective],\n    exports: [TuiWrapperDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiWrapperDirective, TuiWrapperModule }; //# sourceMappingURL=taiga-ui-core-directives-wrapper.js.map","map":null,"metadata":{},"sourceType":"module"}