{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, ElementRef, Inject, Input, Directive, NgModule } from '@angular/core';\nimport { typedFromEvent, TuiDestroyService, TuiHoveredService, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';\nimport { TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, AbstractTuiHint } from '@taiga-ui/core/abstract';\nimport { TuiHintService } from '@taiga-ui/core/services';\nimport { of } from 'rxjs';\nimport { filter, startWith, distinctUntilChanged, switchMap, delay, takeUntil } from 'rxjs/operators';\n/** Default values for pointer hint options */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core/services';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nconst TUI_POINTER_HINT_DEFAULT_OPTIONS = Object.assign(Object.assign({}, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS), {\n  tuiHintShowDelay: 0,\n  tuiHintHideDelay: 0\n});\nconst TUI_POINTER_HINT_OPTIONS = new InjectionToken('Default parameters for pointer hint directive', {\n  factory: () => TUI_POINTER_HINT_DEFAULT_OPTIONS\n});\n\nconst tuiPointerHintOptionsProvider = options => ({\n  provide: TUI_POINTER_HINT_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_POINTER_HINT_DEFAULT_OPTIONS), options)\n});\n\nlet TuiPointerHintDirective = /*#__PURE__*/(() => {\n  let TuiPointerHintDirective = class TuiPointerHintDirective extends AbstractTuiHint {\n    constructor(elementRef, hintService, destroy$, hoveredService, options) {\n      super(elementRef, hintService, null, options);\n      this.destroy$ = destroy$;\n      this.options = options;\n      this.currentMouseRect = this.mousePositionToClientRect();\n      this.tuiHintShowDelay = this.options.tuiHintShowDelay;\n      this.tuiHintHideDelay = this.options.tuiHintHideDelay;\n      this.content = '';\n      const hint$ = hoveredService.createHovered$(this.elementRef.nativeElement).pipe(filter(() => !!this.content), startWith(false), distinctUntilChanged());\n      hint$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? this.tuiHintShowDelay : this.tuiHintHideDelay))), takeUntil(destroy$)).subscribe({\n        next: visible => {\n          if (visible) {\n            this.showTooltip();\n          } else {\n            this.hideTooltip();\n          }\n        },\n        complete: () => {\n          this.hideTooltip();\n        }\n      });\n      this.initMouseMoveSubscription();\n    } // TODO: Remove null in 3.0\n\n\n    set tuiPointerHint(value) {\n      if (!value) {\n        this.hideTooltip();\n        this.content = '';\n        return;\n      }\n\n      this.content = value;\n    }\n\n    getElementClientRect() {\n      return this.currentMouseRect;\n    }\n\n    initMouseMoveSubscription() {\n      const mouseMove$ = typedFromEvent(this.elementRef.nativeElement, 'mousemove');\n      mouseMove$.pipe(takeUntil(this.destroy$)).subscribe(({\n        clientX,\n        clientY\n      }) => {\n        this.currentMouseRect = this.mousePositionToClientRect(clientX, clientY);\n      });\n    }\n\n    mousePositionToClientRect(x = 0, y = 0) {\n      return {\n        left: x,\n        right: x,\n        top: y,\n        bottom: y,\n        width: 0,\n        height: 0\n      };\n    }\n\n  };\n\n  TuiPointerHintDirective.ɵfac = function TuiPointerHintDirective_Factory(t) {\n    return new (t || TuiPointerHintDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(TuiHintService), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService), ɵngcc0.ɵɵdirectiveInject(TuiHoveredService), ɵngcc0.ɵɵdirectiveInject(TUI_POINTER_HINT_OPTIONS));\n  };\n\n  TuiPointerHintDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiPointerHintDirective,\n    selectors: [[\"\", \"tuiPointerHint\", \"\", 5, \"ng-container\"]],\n    inputs: {\n      tuiHintShowDelay: \"tuiHintShowDelay\",\n      tuiHintHideDelay: \"tuiHintHideDelay\",\n      tuiPointerHint: \"tuiPointerHint\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  __decorate([Input(), tuiDefaultProp()], TuiPointerHintDirective.prototype, \"tuiHintShowDelay\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiPointerHintDirective.prototype, \"tuiHintHideDelay\", void 0);\n\n  __decorate([Input(), tuiRequiredSetter()], TuiPointerHintDirective.prototype, \"tuiPointerHint\", null);\n\n  TuiPointerHintDirective = __decorate([__param(0, Inject(ElementRef)), __param(1, Inject(TuiHintService)), __param(2, Inject(TuiDestroyService)), __param(3, Inject(TuiHoveredService)), __param(4, Inject(TUI_POINTER_HINT_OPTIONS))], TuiPointerHintDirective);\n  return TuiPointerHintDirective;\n})();\nlet TuiPointerHintModule = /*#__PURE__*/(() => {\n  let TuiPointerHintModule = class TuiPointerHintModule {};\n\n  TuiPointerHintModule.ɵfac = function TuiPointerHintModule_Factory(t) {\n    return new (t || TuiPointerHintModule)();\n  };\n\n  TuiPointerHintModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiPointerHintModule\n  });\n  TuiPointerHintModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiPointerHintModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiPointerHintModule, {\n    declarations: [TuiPointerHintDirective],\n    exports: [TuiPointerHintDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TUI_POINTER_HINT_DEFAULT_OPTIONS, TUI_POINTER_HINT_OPTIONS, TuiPointerHintDirective, TuiPointerHintModule, tuiPointerHintOptionsProvider }; //# sourceMappingURL=taiga-ui-core-directives-pointer-hint.js.map","map":null,"metadata":{},"sourceType":"module"}