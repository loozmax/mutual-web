{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, ContentChild, HostListener, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiNullableControl, TUI_IS_IOS, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, TuiMapperPipeModule } from '@taiga-ui/cdk';\nimport { tuiCreateNumberMask, tuiEnableAutoCorrectDecimalSymbol, tuiCreateAutoCorrectedNumberPipe, maskedMoneyValueIsEmpty, maskedNumberStringToNumber, TUI_DECIMAL_SYMBOLS, getFractionPartPadded, formatNumber, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { PolymorpheusOutletComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport { CommonModule } from '@angular/common';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/kit/directives';\nimport * as ɵngcc3 from 'angular2-text-mask';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc6 from '@taiga-ui/cdk';\nimport * as ɵngcc7 from '@angular/forms';\n\nfunction TuiInputNumberComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r1 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"content\", _r1);\n  }\n}\n\nfunction TuiInputNumberComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2);\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]], [[\"\", \"polymorpheus-outlet\", \"\"]]];\n\nconst _c1 = function (a0, a1, a2, a3, a4) {\n  return [a0, a1, a2, a3, a4];\n};\n\nconst _c2 = [\"*\", \"input\", \"[polymorpheus-outlet]\"];\nvar TuiInputNumberComponent_1;\nconst DEFAULT_MAX_LENGTH = 18; // @dynamic\n\nlet TuiInputNumberComponent = TuiInputNumberComponent_1 = class TuiInputNumberComponent extends AbstractTuiNullableControl {\n  constructor(control, changeDetectorRef, numberFormat, isIOS) {\n    super(control, changeDetectorRef);\n    this.numberFormat = numberFormat;\n    this.isIOS = isIOS;\n    this.min = -Infinity;\n    this.max = Infinity;\n    this.decimal = 'not-zero';\n    this.precision = 2;\n    this.prefix = '';\n    this.postfix = '';\n\n    this.mask = (allowNegative, decimal, decimalLimit, nativeFocusableElement) => ({\n      mask: tuiCreateNumberMask({\n        allowNegative,\n        decimalLimit,\n        allowDecimal: decimal !== 'never',\n        requireDecimal: decimal === 'always',\n        decimalSymbol: this.numberFormat.decimalSeparator,\n        thousandSymbol: this.numberFormat.thousandSeparator,\n        autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(this.numberFormat)\n      }),\n      pipe: tuiCreateAutoCorrectedNumberPipe(decimal === 'always' ? decimalLimit : 0, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, nativeFocusableElement, allowNegative, this.isIOS),\n      guide: false\n    });\n  }\n\n  get nativeFocusableElement() {\n    return !this.primitiveTextfield || this.computedDisabled ? null : this.primitiveTextfield.nativeFocusableElement;\n  }\n\n  get focused() {\n    return !!this.primitiveTextfield && this.primitiveTextfield.focused;\n  }\n\n  get isNegativeAllowed() {\n    return this.min < 0;\n  }\n\n  get inputMode() {\n    return this.decimal === 'never' ? 'numeric' : 'decimal';\n  }\n\n  get calculatedMaxLength() {\n    const decimalPart = this.decimal !== 'never' && this.nativeValue.includes(this.numberFormat.decimalSeparator);\n    const precision = decimalPart ? this.precision + 1 : 0;\n    const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;\n    return DEFAULT_MAX_LENGTH + precision + takeThousand;\n  }\n\n  get formattedValue() {\n    return this.getFormattedValue(this.value || 0);\n  }\n\n  get computedValue() {\n    if (this.focused) {\n      return this.nativeValue;\n    }\n\n    return this.value === null ? '' : this.formattedValue;\n  }\n\n  onZero(event) {\n    const decimal = this.nativeValue.split(this.numberFormat.decimalSeparator)[1] || '';\n    const {\n      nativeFocusableElement\n    } = this;\n\n    if (decimal.length < this.precision || !nativeFocusableElement || !nativeFocusableElement.selectionStart || this.nativeValue[nativeFocusableElement.selectionStart] !== '0') {\n      return;\n    }\n\n    event.preventDefault();\n    nativeFocusableElement.selectionStart++;\n  }\n\n  onValueChange(value) {\n    if (maskedMoneyValueIsEmpty(value)) {\n      this.updateValue(null);\n      return;\n    }\n\n    if (this.isNativeValueNotFinished) {\n      return;\n    }\n\n    const capped = this.absoluteCapInputValue(value);\n\n    if (capped === null || isNaN(capped)) {\n      return;\n    }\n\n    this.updateValue(capped);\n\n    if (capped !== maskedNumberStringToNumber(value, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)) {\n      this.nativeValue = this.formattedValue;\n    }\n  }\n\n  onKeyDown(event) {\n    if (!TUI_DECIMAL_SYMBOLS.includes(event.key)) {\n      return;\n    }\n\n    if (this.decimal === 'never') {\n      event.preventDefault();\n      return;\n    }\n\n    if (this.nativeValue.includes(this.numberFormat.decimalSeparator)) {\n      event.preventDefault();\n      this.setCaretAfterComma();\n    }\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n\n    if (focused) {\n      return;\n    }\n\n    const nativeNumberValue = this.nativeNumberValue;\n\n    if (isNaN(nativeNumberValue)) {\n      this.clear();\n      return;\n    }\n\n    const clamped = Math.min(this.max, Math.max(this.min, nativeNumberValue));\n    this.updateValue(clamped);\n    this.nativeValue = this.formattedValue;\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  getFormattedValue(value) {\n    const absValue = Math.abs(value);\n    const hasFraction = absValue % 1 > 0;\n    let limit = this.decimal === 'always' || hasFraction ? this.precision : 0;\n    const fraction = hasFraction ? getFractionPartPadded(value, this.precision) : '';\n\n    if (this.focused && this.decimal !== 'always') {\n      limit = fraction.length;\n    }\n\n    return formatNumber(value, limit, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.numberFormat.zeroPadding);\n  }\n\n  get isNativeValueNotFinished() {\n    const nativeNumberValue = this.nativeNumberValue;\n    return nativeNumberValue < 0 ? nativeNumberValue > this.max : nativeNumberValue < this.min;\n  }\n\n  get nativeValue() {\n    return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n  }\n\n  set nativeValue(value) {\n    if (!this.primitiveTextfield || !this.nativeFocusableElement) {\n      return;\n    }\n\n    this.primitiveTextfield.value = value;\n    this.nativeFocusableElement.value = value;\n  }\n\n  get nativeNumberValue() {\n    return maskedNumberStringToNumber(this.nativeValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n  }\n\n  clear() {\n    this.nativeValue = '';\n    this.updateValue(null);\n  }\n\n  absoluteCapInputValue(inputValue) {\n    const value = maskedNumberStringToNumber(inputValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n    const capped = value < 0 ? Math.max(Math.max(this.min, Number.MIN_SAFE_INTEGER), value) : Math.min(value, Math.min(this.max, Number.MAX_SAFE_INTEGER));\n    const ineligibleValue = isNaN(capped) || capped < this.min || capped > this.max;\n    return ineligibleValue ? null : capped;\n  }\n\n  setCaretAfterComma() {\n    if (!this.nativeFocusableElement) {\n      return;\n    }\n\n    const afterCommaPosition = this.nativeValue.length - this.precision;\n    this.nativeFocusableElement.setSelectionRange(afterCommaPosition, afterCommaPosition);\n  }\n\n};\n\nTuiInputNumberComponent.ɵfac = function TuiInputNumberComponent_Factory(t) {\n  return new (t || TuiInputNumberComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_NUMBER_FORMAT), ɵngcc0.ɵɵdirectiveInject(TUI_IS_IOS));\n};\n\nTuiInputNumberComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiInputNumberComponent,\n  selectors: [[\"tui-input-number\"]],\n  contentQueries: function TuiInputNumberComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PolymorpheusOutletComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.polymorpheusValueContent = _t.first);\n    }\n  },\n  viewQuery: function TuiInputNumberComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.primitiveTextfield = _t.first);\n    }\n  },\n  hostBindings: function TuiInputNumberComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown.0\", function TuiInputNumberComponent_keydown_0_HostBindingHandler($event) {\n        return ctx.onZero($event);\n      });\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    decimal: \"decimal\",\n    precision: \"precision\",\n    prefix: \"prefix\",\n    postfix: \"postfix\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiInputNumberComponent_1)\n  }, {\n    provide: AbstractTuiControl,\n    useExisting: forwardRef(() => TuiInputNumberComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 25,\n  consts: [[\"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"decimal\", 1, \"textfield\", 3, \"pseudoHovered\", \"pseudoFocused\", \"pseudoPressed\", \"invalid\", \"tuiTextfieldMaxLength\", \"readOnly\", \"disabled\", \"textMask\", \"value\", \"prefix\", \"postfix\", \"focusable\", \"valueChange\", \"hoveredChange\", \"focusedChange\", \"pressedChange\", \"keydown\"], [\"polymorpheus-outlet\", \"\", 3, \"content\", 4, \"ngIf\"], [\"valueContent\", \"\"], [\"polymorpheus-outlet\", \"\", 3, \"content\"]],\n  template: function TuiInputNumberComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵelementStart(0, \"tui-primitive-textfield\", 0);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"hoveredChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_hoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"focusedChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n        return ctx.onFocused($event);\n      })(\"pressedChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_pressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      })(\"keydown\", function TuiInputNumberComponent_Template_tui_primitive_textfield_keydown_0_listener($event) {\n        return ctx.onKeyDown($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"tuiMapper\");\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵprojection(3, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n      ɵngcc0.ɵɵtemplate(4, TuiInputNumberComponent_div_4_Template, 1, 1, \"div\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(5, TuiInputNumberComponent_ng_template_5_Template, 1, 0, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"pseudoHovered\", ctx.computedHovered)(\"pseudoFocused\", ctx.computedFocused)(\"pseudoPressed\", ctx.computedPressed)(\"invalid\", ctx.computedInvalid)(\"tuiTextfieldMaxLength\", ctx.calculatedMaxLength)(\"readOnly\", ctx.readOnly)(\"disabled\", ctx.computedDisabled)(\"textMask\", ɵngcc0.ɵɵpipeBindV(1, 13, ɵngcc0.ɵɵpureFunction5(19, _c1, ctx.isNegativeAllowed, ctx.mask, ctx.decimal, ctx.precision, ctx.nativeFocusableElement)))(\"value\", ctx.computedValue)(\"prefix\", ctx.prefix)(\"postfix\", ctx.postfix)(\"focusable\", ctx.focusable);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.polymorpheusValueContent);\n    }\n  },\n  directives: [ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc2.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc1.TuiTextfieldMaxLengthDirective, ɵngcc3.MaskedInputDirective, ɵngcc4.NgIf, ɵngcc5.PolymorpheusOutletComponent],\n  pipes: [ɵngcc6.TuiMapperPipe],\n  styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n  changeDetection: 0\n});\n\nTuiInputNumberComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_NUMBER_FORMAT]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [TUI_IS_IOS]\n  }]\n}];\n\n__decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputNumberComponent.prototype, \"primitiveTextfield\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputNumberComponent.prototype, \"min\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputNumberComponent.prototype, \"max\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputNumberComponent.prototype, \"decimal\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputNumberComponent.prototype, \"precision\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputNumberComponent.prototype, \"prefix\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputNumberComponent.prototype, \"postfix\", void 0);\n\n__decorate([ContentChild(PolymorpheusOutletComponent)], TuiInputNumberComponent.prototype, \"polymorpheusValueContent\", void 0);\n\n__decorate([HostListener('keydown.0', ['$event'])], TuiInputNumberComponent.prototype, \"onZero\", null);\n\nTuiInputNumberComponent = TuiInputNumberComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_NUMBER_FORMAT)), __param(3, Inject(TUI_IS_IOS))], TuiInputNumberComponent);\nvar TuiInputNumberDirective_1;\nlet TuiInputNumberDirective = TuiInputNumberDirective_1 = class TuiInputNumberDirective extends TuiAbstractTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n  process(input) {\n    this.input = input;\n  }\n\n  ngDoCheck() {\n    if (!this.input) {\n      return;\n    }\n\n    this.input.maxLength = this.host.calculatedMaxLength;\n    this.input.inputMode = 'decimal';\n  }\n\n};\n\nTuiInputNumberDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputNumberDirective_BaseFactory;\n  return function TuiInputNumberDirective_Factory(t) {\n    return (ɵTuiInputNumberDirective_BaseFactory || (ɵTuiInputNumberDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputNumberDirective)))(t || TuiInputNumberDirective);\n  };\n}();\n\nTuiInputNumberDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputNumberDirective,\n  selectors: [[\"tui-input-number\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputNumberDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputNumberModule = /*#__PURE__*/(() => {\n  let TuiInputNumberModule = class TuiInputNumberModule {};\n\n  TuiInputNumberModule.ɵfac = function TuiInputNumberModule_Factory(t) {\n    return new (t || TuiInputNumberModule)();\n  };\n\n  TuiInputNumberModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputNumberModule\n  });\n  TuiInputNumberModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TextMaskModule, TuiMapperPipeModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule]]\n  });\n  return TuiInputNumberModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputNumberModule, {\n    declarations: function () {\n      return [TuiInputNumberComponent, TuiInputNumberDirective];\n    },\n    imports: function () {\n      return [CommonModule, TextMaskModule, TuiMapperPipeModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule];\n    },\n    exports: function () {\n      return [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiInputNumberComponent, TuiInputNumberDirective, TuiInputNumberModule }; //# sourceMappingURL=taiga-ui-kit-components-input-number.js.map","map":null,"metadata":{},"sourceType":"module"}