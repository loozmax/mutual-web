{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, Renderer2, Inject, ElementRef, Self, Optional, Input, Directive, NgModule } from '@angular/core';\nimport { TuiDestroyService, TuiObscuredService, TuiHoveredService, TuiActiveZoneDirective, tuiDefaultProp, tuiRequiredSetter, TuiParentsScrollService } from '@taiga-ui/cdk';\nimport { TUI_ABSTRACT_HINT_DEFAULT_OPTIONS, AbstractTuiHint } from '@taiga-ui/core/abstract';\nimport { DESCRIBED_BY } from '@taiga-ui/core/directives/described-by';\nimport { TuiHintService } from '@taiga-ui/core/services';\nimport { Subject, combineLatest, of } from 'rxjs';\nimport { startWith, map, switchMap, delay, take, distinctUntilChanged, takeUntil } from 'rxjs/operators'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core/services';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nconst TUI_TOOLTIP_ICON = 'tuiIconTooltipLarge';\n/** Default values for hint options */\n\nconst TUI_HINT_DEFAULT_OPTIONS = Object.assign(Object.assign({}, TUI_ABSTRACT_HINT_DEFAULT_OPTIONS), {\n  tuiHintShowDelay: 500,\n  tuiHintHideDelay: 200,\n  tooltipIcon: TUI_TOOLTIP_ICON\n});\nconst TUI_HINT_OPTIONS = new InjectionToken('Default parameters for hint directive', {\n  factory: () => TUI_HINT_DEFAULT_OPTIONS\n});\n\nconst tuiHintOptionsProvider = options => ({\n  provide: TUI_HINT_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_HINT_DEFAULT_OPTIONS), options)\n});\n\nconst HINT_HOVERED_CLASS = '_hint_hovered';\nlet TuiHintDirective = /*#__PURE__*/(() => {\n  let TuiHintDirective = class TuiHintDirective extends AbstractTuiHint {\n    constructor(renderer, elementRef, hintService, destroy$, obscured$, hoveredService, activeZone, options) {\n      super(elementRef, hintService, activeZone, options);\n      this.renderer = renderer;\n      this.options = options;\n      this.tuiHintShowDelay = this.options.tuiHintShowDelay;\n      this.tuiHintHideDelay = this.options.tuiHintHideDelay;\n      this.tuiHintHost = null;\n      this.componentHovered$ = new Subject(); // @bad TODO: Use private provider\n\n      combineLatest(hoveredService.createHovered$(elementRef.nativeElement), this.componentHovered$.pipe(startWith(false))).pipe(map(([directiveHovered, componentHovered]) => directiveHovered || componentHovered), switchMap(visible => {\n        this.toggleClass(visible);\n        return of(visible).pipe(delay(visible ? this.tuiHintShowDelay : this.tuiHintHideDelay));\n      }), switchMap(visible => visible && this.mode !== 'overflow' ? obscured$.pipe(map(obscured => !obscured), take(2)) : of(visible)), distinctUntilChanged(), takeUntil(destroy$)).subscribe(visible => {\n        if (visible) {\n          this.showTooltip();\n        } else {\n          this.hideTooltip();\n        }\n      });\n      this.hintService.register(this);\n    } // TODO: Remove null in 3.0\n\n\n    set tuiHint(value) {\n      if (!value) {\n        this.hideTooltip();\n        this.content = '';\n        return;\n      }\n\n      this.content = value;\n    }\n\n    get id() {\n      return this.tuiHintId ? this.tuiHintId + DESCRIBED_BY : null;\n    }\n\n    get host() {\n      return this.tuiHintHost ? this.tuiHintHost : this.elementRef.nativeElement;\n    }\n\n    getElementClientRect() {\n      return this.host.getBoundingClientRect();\n    }\n\n    ngOnDestroy() {\n      this.hintService.unregister(this);\n    }\n\n    showTooltip() {\n      if (this.content === '') {\n        return;\n      }\n\n      this.toggleClass(true);\n      this.hintService.add(this);\n    }\n\n    hideTooltip() {\n      this.toggleClass(false);\n      this.hintService.remove(this);\n    }\n\n    toggleClass(add) {\n      if (add) {\n        this.renderer.addClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);\n      } else {\n        this.renderer.removeClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);\n      }\n    }\n\n  };\n\n  TuiHintDirective.ɵfac = function TuiHintDirective_Factory(t) {\n    return new (t || TuiHintDirective)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(TuiHintService), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService), ɵngcc0.ɵɵdirectiveInject(TuiObscuredService, 2), ɵngcc0.ɵɵdirectiveInject(TuiHoveredService), ɵngcc0.ɵɵdirectiveInject(TuiActiveZoneDirective, 8), ɵngcc0.ɵɵdirectiveInject(TUI_HINT_OPTIONS));\n  };\n\n  TuiHintDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiHintDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", 5, \"ng-container\"]],\n    inputs: {\n      tuiHintShowDelay: \"tuiHintShowDelay\",\n      tuiHintHideDelay: \"tuiHintHideDelay\",\n      tuiHintHost: \"tuiHintHost\",\n      tuiHint: \"tuiHint\",\n      tuiHintId: \"tuiHintId\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiObscuredService, TuiParentsScrollService, TuiDestroyService]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  __decorate([Input()], TuiHintDirective.prototype, \"tuiHintId\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiHintDirective.prototype, \"tuiHintShowDelay\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiHintDirective.prototype, \"tuiHintHideDelay\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiHintDirective.prototype, \"tuiHintHost\", void 0);\n\n  __decorate([Input(), tuiRequiredSetter()], TuiHintDirective.prototype, \"tuiHint\", null);\n\n  TuiHintDirective = __decorate([__param(0, Inject(Renderer2)), __param(1, Inject(ElementRef)), __param(2, Inject(TuiHintService)), __param(3, Inject(TuiDestroyService)), __param(4, Inject(TuiObscuredService)), __param(4, Self()), __param(5, Inject(TuiHoveredService)), __param(6, Optional()), __param(6, Inject(TuiActiveZoneDirective)), __param(7, Inject(TUI_HINT_OPTIONS))], TuiHintDirective);\n  return TuiHintDirective;\n})();\nlet TuiHintModule = /*#__PURE__*/(() => {\n  let TuiHintModule = class TuiHintModule {};\n\n  TuiHintModule.ɵfac = function TuiHintModule_Factory(t) {\n    return new (t || TuiHintModule)();\n  };\n\n  TuiHintModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiHintModule\n  });\n  TuiHintModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiHintModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiHintModule, {\n    declarations: [TuiHintDirective],\n    exports: [TuiHintDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HINT_HOVERED_CLASS, TUI_HINT_DEFAULT_OPTIONS, TUI_HINT_OPTIONS, TUI_TOOLTIP_ICON, TuiHintDirective, TuiHintModule, tuiHintOptionsProvider }; //# sourceMappingURL=taiga-ui-core-directives-hint.js.map","map":null,"metadata":{},"sourceType":"module"}