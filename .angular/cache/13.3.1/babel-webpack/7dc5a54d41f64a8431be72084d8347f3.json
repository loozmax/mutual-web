{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { AbstractTuiNullableControl, isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiHoveredModule, TuiPressedModule } from '@taiga-ui/cdk';\nimport { TuiModeDirective, TuiWrapperModule } from '@taiga-ui/core';\nimport { TuiCheckboxComponent, TuiCheckboxModule } from '@taiga-ui/kit/components/checkbox';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from '@taiga-ui/core';\nimport * as ɵngcc3 from '@taiga-ui/kit/components/checkbox';\nimport * as ɵngcc4 from '@angular/forms';\nconst _c0 = [\"*\"];\nvar TuiCheckboxBlockComponent_1;\nlet TuiCheckboxBlockComponent = TuiCheckboxBlockComponent_1 = class TuiCheckboxBlockComponent extends AbstractTuiNullableControl {\n  constructor(control, changeDetectorRef, modeDirective) {\n    super(control, changeDetectorRef);\n    this.modeDirective = modeDirective;\n    this.contentAlign = 'right';\n    this.hideCheckbox = false;\n    this.size = 'l';\n  }\n\n  get nativeFocusableElement() {\n    return this.checkbox ? this.checkbox.nativeFocusableElement : null;\n  }\n\n  get checked() {\n    return this.value !== false && this.hideCheckbox;\n  }\n\n  get checkboxSize() {\n    return this.size === 'l' ? 'l' : 'm';\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get appearance() {\n    if (!this.modeDirective || !this.modeDirective.mode) {\n      return this.checked ? \"whiteblock-active\"\n      /* WhiteblockActive */\n      : \"whiteblock\"\n      /* Whiteblock */\n      ;\n    }\n\n    return this.checked ? \"primary\"\n    /* Primary */\n    : \"secondary\"\n    /* Secondary */\n    ;\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onFocusVisible(focusVisible) {\n    this.updateFocusVisible(focusVisible);\n  }\n\n  onModelChange(value) {\n    this.updateValue(value);\n  }\n\n};\n\nTuiCheckboxBlockComponent.ɵfac = function TuiCheckboxBlockComponent_Factory(t) {\n  return new (t || TuiCheckboxBlockComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TuiModeDirective, 8));\n};\n\nTuiCheckboxBlockComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiCheckboxBlockComponent,\n  selectors: [[\"tui-checkbox-block\"]],\n  viewQuery: function TuiCheckboxBlockComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiCheckboxComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);\n    }\n  },\n  hostVars: 6,\n  hostBindings: function TuiCheckboxBlockComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-tui-host-align\", ctx.contentAlign)(\"data-size\", ctx.size);\n      ɵngcc0.ɵɵclassProp(\"_hidden_checkbox\", ctx.hideCheckbox)(\"_active\", ctx.checked);\n    }\n  },\n  inputs: {\n    contentAlign: \"contentAlign\",\n    hideCheckbox: \"hideCheckbox\",\n    size: \"size\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiCheckboxBlockComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 7,\n  vars: 15,\n  consts: [[1, \"wrapper\", 3, \"tuiHoveredChange\", \"tuiPressedChange\"], [3, \"appearance\", \"disabled\", \"focused\", \"hovered\", \"pressed\", \"invalid\"], [1, \"content-wrapper\"], [1, \"content\"], [1, \"view\", 3, \"disabled\", \"nativeId\", \"pseudoInvalid\", \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"size\", \"focusable\", \"ngModel\", \"ngModelChange\", \"focusedChange\", \"focusVisibleChange\"], [1, \"label\"]],\n  template: function TuiCheckboxBlockComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n      ɵngcc0.ɵɵlistener(\"tuiHoveredChange\", function TuiCheckboxBlockComponent_Template_label_tuiHoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"tuiPressedChange\", function TuiCheckboxBlockComponent_Template_label_tuiPressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"tui-wrapper\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"tui-checkbox\", 4);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function TuiCheckboxBlockComponent_Template_tui_checkbox_ngModelChange_4_listener($event) {\n        return ctx.onModelChange($event);\n      })(\"focusedChange\", function TuiCheckboxBlockComponent_Template_tui_checkbox_focusedChange_4_listener($event) {\n        return ctx.onFocused($event);\n      })(\"focusVisibleChange\", function TuiCheckboxBlockComponent_Template_tui_checkbox_focusVisibleChange_4_listener($event) {\n        return ctx.onFocusVisible($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵprojection(6);\n      ɵngcc0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"appearance\", ctx.appearance)(\"disabled\", ctx.computedDisabled)(\"focused\", ctx.computedFocusVisible)(\"hovered\", ctx.computedHovered)(\"pressed\", ctx.computedPressed)(\"invalid\", ctx.computedInvalid);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.computedDisabled || ctx.readOnly)(\"nativeId\", ctx.nativeId)(\"pseudoInvalid\", ctx.computedInvalid)(\"pseudoFocused\", false)(\"pseudoHovered\", ctx.computedHovered)(\"pseudoPressed\", ctx.computedPressed)(\"size\", ctx.checkboxSize)(\"focusable\", ctx.focusable)(\"ngModel\", ctx.value);\n    }\n  },\n  directives: [ɵngcc1.TuiHoveredDirective, ɵngcc1.TuiPressedDirective, ɵngcc2.TuiWrapperDirective, ɵngcc3.TuiCheckboxComponent, ɵngcc4.NgControlStatus, ɵngcc4.NgModel],\n  styles: [\"[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);display:inline-block;vertical-align:top;border-radius:var(--tui-radius-m)}[data-size='l'][_nghost-%COMP%], [data-size='m'][_nghost-%COMP%]{font:var(--tui-font-text-m)}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.wrapper[_ngcontent-%COMP%]{position:relative;border-radius:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.content-wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column}[data-size='s'][_nghost-%COMP%]   .content-wrapper[_ngcontent-%COMP%]{min-height:var(--tui-height-s)}[data-size='m'][_nghost-%COMP%]   .content-wrapper[_ngcontent-%COMP%]{min-height:var(--tui-height-m)}[data-size='l'][_nghost-%COMP%]   .content-wrapper[_ngcontent-%COMP%]{min-height:var(--tui-height-l)}.content[_ngcontent-%COMP%]{display:flex;align-items:center;min-height:inherit}[data-tui-host-align=right][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{flex-direction:row-reverse}[data-size='s'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 1rem 0 .5rem}[data-size='s'][data-tui-host-align=right][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 .5rem 0 1rem}[data-size='s']._hidden_checkbox[_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 1rem}[data-size='m'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 1rem 0 .75rem}[data-size='m'][data-tui-host-align=right][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 .75rem 0 1rem}[data-size='m']._hidden_checkbox[_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 1.5rem}[data-size='l'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 1rem}[data-size='l']._hidden_checkbox[_nghost-%COMP%]   .content[_ngcontent-%COMP%]{padding:0 2.25rem}.view[_ngcontent-%COMP%]{margin-top:.75rem;margin-right:.75rem;align-self:flex-start}[data-tui-host-align=right][_nghost-%COMP%]   .view[_ngcontent-%COMP%]{margin-left:.75rem;margin-right:0}[data-size='s'][_nghost-%COMP%]   .view[_ngcontent-%COMP%]{margin-top:.5rem;margin-right:.5rem}[data-size='s'][data-tui-host-align=right][_nghost-%COMP%]   .view[_ngcontent-%COMP%]{margin-left:.5rem}[data-size='m'][_nghost-%COMP%]   .view[_ngcontent-%COMP%]{margin-top:.875rem}[data-size='l'][_nghost-%COMP%]   .view[_ngcontent-%COMP%]{margin-top:1rem}._hidden_checkbox[_nghost-%COMP%]   .view[_ngcontent-%COMP%]{position:absolute;height:1px;width:1px;margin:-1px;border:0;padding:0;overflow:hidden;clip:rect(0,0,0,0);-webkit-clip-path:inset(0);clip-path:inset(0)}.label[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;flex-grow:1}._hidden_checkbox[_nghost-%COMP%]   .label[_ngcontent-%COMP%]{text-align:center}\"],\n  changeDetection: 0\n});\n\nTuiCheckboxBlockComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: TuiModeDirective,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TuiModeDirective]\n  }]\n}];\n\n__decorate([ViewChild(TuiCheckboxComponent)], TuiCheckboxBlockComponent.prototype, \"checkbox\", void 0);\n\n__decorate([Input(), HostBinding('attr.data-tui-host-align'), tuiDefaultProp()], TuiCheckboxBlockComponent.prototype, \"contentAlign\", void 0);\n\n__decorate([Input(), HostBinding('class._hidden_checkbox'), tuiDefaultProp()], TuiCheckboxBlockComponent.prototype, \"hideCheckbox\", void 0);\n\n__decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiCheckboxBlockComponent.prototype, \"size\", void 0);\n\n__decorate([HostBinding('class._active')], TuiCheckboxBlockComponent.prototype, \"checked\", null);\n\nTuiCheckboxBlockComponent = TuiCheckboxBlockComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Optional()), __param(2, Inject(TuiModeDirective))], TuiCheckboxBlockComponent);\nlet TuiCheckboxBlockModule = /*#__PURE__*/(() => {\n  let TuiCheckboxBlockModule = class TuiCheckboxBlockModule {};\n\n  TuiCheckboxBlockModule.ɵfac = function TuiCheckboxBlockModule_Factory(t) {\n    return new (t || TuiCheckboxBlockModule)();\n  };\n\n  TuiCheckboxBlockModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiCheckboxBlockModule\n  });\n  TuiCheckboxBlockModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule, TuiWrapperModule]]\n  });\n  return TuiCheckboxBlockModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiCheckboxBlockModule, {\n    declarations: function () {\n      return [TuiCheckboxBlockComponent];\n    },\n    imports: function () {\n      return [FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule, TuiWrapperModule];\n    },\n    exports: function () {\n      return [TuiCheckboxBlockComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiCheckboxBlockComponent, TuiCheckboxBlockModule }; //# sourceMappingURL=taiga-ui-kit-components-checkbox-block.js.map","map":null,"metadata":{},"sourceType":"module"}