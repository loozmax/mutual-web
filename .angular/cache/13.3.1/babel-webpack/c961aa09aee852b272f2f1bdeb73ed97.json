{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, ElementRef, HostListener, Directive, NgModule } from '@angular/core';\nimport { isPresent, typedFromEvent, isNativeFocusedIn, getClosestFocusable, setNativeMouseFocused, TuiDestroyService } from '@taiga-ui/cdk';\nimport { TuiHostedDropdownComponent } from '@taiga-ui/core';\nimport { merge, of, timer, Observable } from 'rxjs';\nimport { debounceTime, map, filter, share, tap, switchMap, mapTo, debounce, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nimport * as ɵngcc2 from '@taiga-ui/core';\nlet TuiDropdownHoverDirective = /*#__PURE__*/(() => {\n  let TuiDropdownHoverDirective = class TuiDropdownHoverDirective {\n    constructor(destroy$, {\n      nativeElement\n    }, dropdown) {\n      this.dropdown = dropdown;\n      const dropdown$ = dropdown.openChange.pipe( // Give change detection time to open dropdown\n      debounceTime(0), map(() => dropdown.dropdown), filter(isPresent), share());\n      const open$ = merge(typedFromEvent(nativeElement, 'mouseenter'), typedFromEvent(nativeElement, 'click').pipe(tap(e => e.stopImmediatePropagation())), dropdown$.pipe(switchMap(element => merge(typedFromEvent(element, 'focusin'), typedFromEvent(element, 'mouseenter'))))).pipe(mapTo(true));\n      const close$ = merge(typedFromEvent(nativeElement, 'mouseleave'), dropdown$.pipe(switchMap(element => typedFromEvent(element, 'mouseleave').pipe(filter(() => !isNativeFocusedIn(element)))))).pipe(mapTo(false));\n      merge(open$, close$).pipe(debounce(value => value ? of(value) : timer(300)), distinctUntilChanged(), takeUntil(destroy$)).subscribe(open => {\n        dropdown.updateOpen(open);\n      });\n    }\n\n    onMouseEnter() {\n      const {\n        host\n      } = this.dropdown;\n\n      if (isNativeFocusedIn(host)) {\n        return;\n      }\n\n      const focusable = getClosestFocusable(host, false, host, false);\n\n      if (focusable) {\n        setNativeMouseFocused(focusable);\n      }\n    }\n\n  };\n\n  TuiDropdownHoverDirective.ɵfac = function TuiDropdownHoverDirective_Factory(t) {\n    return new (t || TuiDropdownHoverDirective)(ɵngcc0.ɵɵdirectiveInject(TuiDestroyService), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(TuiHostedDropdownComponent));\n  };\n\n  TuiDropdownHoverDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiDropdownHoverDirective,\n    selectors: [[\"tui-hosted-dropdown\", \"tuiDropdownHover\", \"\"]],\n    hostBindings: function TuiDropdownHoverDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function TuiDropdownHoverDirective_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService])]\n  });\n\n  __decorate([HostListener('mouseenter')], TuiDropdownHoverDirective.prototype, \"onMouseEnter\", null);\n\n  TuiDropdownHoverDirective = __decorate([__param(0, Inject(TuiDestroyService)), __param(1, Inject(ElementRef)), __param(2, Inject(TuiHostedDropdownComponent))], TuiDropdownHoverDirective);\n  return TuiDropdownHoverDirective;\n})();\nlet TuiDropdownHoverModule = /*#__PURE__*/(() => {\n  let TuiDropdownHoverModule = class TuiDropdownHoverModule {};\n\n  TuiDropdownHoverModule.ɵfac = function TuiDropdownHoverModule_Factory(t) {\n    return new (t || TuiDropdownHoverModule)();\n  };\n\n  TuiDropdownHoverModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiDropdownHoverModule\n  });\n  TuiDropdownHoverModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiDropdownHoverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiDropdownHoverModule, {\n    declarations: [TuiDropdownHoverDirective],\n    exports: [TuiDropdownHoverDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiDropdownHoverDirective, TuiDropdownHoverModule }; //# sourceMappingURL=taiga-ui-kit-directives-dropdown-hover.js.map","map":null,"metadata":{},"sourceType":"module"}