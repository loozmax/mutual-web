{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { EventEmitter, Inject, Input, HostBinding, Output, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { tuiDefaultProp } from '@taiga-ui/cdk';\nimport { TUI_CLOSE_WORD, TUI_NOTIFICATION_OPTIONS } from '@taiga-ui/core/tokens';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { TuiButtonModule } from '@taiga-ui/core/components/button';\nimport { TuiSvgModule } from '@taiga-ui/core/components/svg';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@taiga-ui/core/components/svg';\nimport * as ɵngcc3 from '@taiga-ui/core/components/button';\nimport * as ɵngcc4 from 'rxjs';\n\nfunction TuiNotificationComponent_tui_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tui-svg\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r0.icon);\n  }\n}\n\nfunction TuiNotificationComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiNotificationComponent_button_3_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.close.emit();\n    });\n    ɵngcc0.ɵɵpipe(1, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"title\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r1.closeWord$));\n  }\n}\n\nconst _c0 = [\"*\"];\nconst STATUS_ICON = {\n  info: 'tuiIconInfo',\n  success: 'tuiIconCheckCircle',\n  error: 'tuiIconCancel',\n  warning: 'tuiIconAttention'\n}; // @bad TODO: Think about moving to kit\n\nlet TuiNotificationComponent = /*#__PURE__*/(() => {\n  let TuiNotificationComponent = class TuiNotificationComponent {\n    constructor(closeWord$, options) {\n      this.closeWord$ = closeWord$;\n      this.options = options;\n      this.hasIcon = this.options.hasIcon;\n      this.status = this.options.status;\n      this.close = new EventEmitter();\n    }\n\n    get icon() {\n      return STATUS_ICON[this.status];\n    }\n\n    get hasClose() {\n      return !!this.close.observers.length;\n    }\n\n  };\n\n  TuiNotificationComponent.ɵfac = function TuiNotificationComponent_Factory(t) {\n    return new (t || TuiNotificationComponent)(ɵngcc0.ɵɵdirectiveInject(TUI_CLOSE_WORD), ɵngcc0.ɵɵdirectiveInject(TUI_NOTIFICATION_OPTIONS));\n  };\n\n  TuiNotificationComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiNotificationComponent,\n    selectors: [[\"tui-notification\"]],\n    hostVars: 5,\n    hostBindings: function TuiNotificationComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-tui-host-status\", ctx.status);\n        ɵngcc0.ɵɵclassProp(\"_has-icon\", ctx.hasIcon)(\"_has-close-button\", ctx.hasClose);\n      }\n    },\n    inputs: {\n      hasIcon: \"hasIcon\",\n      status: \"status\"\n    },\n    outputs: {\n      close: \"close\"\n    },\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 2,\n    consts: [[\"automation-id\", \"tui-notification__icon\", \"class\", \"icon\", 3, \"src\", 4, \"ngIf\"], [1, \"content\"], [\"tuiIconButton\", \"\", \"type\", \"button\", \"automation-id\", \"tui-notification__close\", \"size\", \"xs\", \"icon\", \"tuiIconCloseLarge\", \"appearance\", \"icon\", \"class\", \"close\", 3, \"title\", \"click\", 4, \"ngIf\"], [\"automation-id\", \"tui-notification__icon\", 1, \"icon\", 3, \"src\"], [\"tuiIconButton\", \"\", \"type\", \"button\", \"automation-id\", \"tui-notification__close\", \"size\", \"xs\", \"icon\", \"tuiIconCloseLarge\", \"appearance\", \"icon\", 1, \"close\", 3, \"title\", \"click\"]],\n    template: function TuiNotificationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, TuiNotificationComponent_tui_svg_0_Template, 1, 1, \"tui-svg\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, TuiNotificationComponent_button_3_Template, 2, 3, \"button\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasIcon);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasClose);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.TuiSvgComponent, ɵngcc3.TuiButtonComponent],\n    pipes: [ɵngcc1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;padding:.8125rem 1rem .6875rem;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);box-sizing:border-box;overflow:hidden}[_nghost-%COMP%]:after{position:absolute;top:0;left:0;width:100%;height:100%;content:'';pointer-events:none}._has-close-button[_nghost-%COMP%]{padding-right:2rem}._has-icon[_nghost-%COMP%]{padding-left:2.75rem}[data-tui-host-status=info][_nghost-%COMP%]{color:var(--tui-info-fill)}[data-tui-host-status=info][_nghost-%COMP%]:after{background:var(--tui-info-bg)}[data-tui-host-status=success][_nghost-%COMP%]{color:var(--tui-success-fill)}[data-tui-host-status=success][_nghost-%COMP%]:after{background:var(--tui-success-bg)}[data-tui-host-status=error][_nghost-%COMP%]{color:var(--tui-error-fill)}[data-tui-host-status=error][_nghost-%COMP%]:after{background:var(--tui-error-bg)}[data-tui-host-status=warning][_nghost-%COMP%]{color:var(--tui-warning-fill)}[data-tui-host-status=warning][_nghost-%COMP%]:after{background:var(--tui-warning-bg)}.content[_ngcontent-%COMP%]{word-wrap:break-word;color:var(--tui-text-01)}.icon[_ngcontent-%COMP%]{position:absolute;top:0;left:1rem;display:flex;width:1rem;height:100%;max-height:3rem;align-items:center}.close[_ngcontent-%COMP%]{position:absolute;top:.625rem;right:.5rem}\"],\n    changeDetection: 0\n  });\n\n  __decorate([Input(), HostBinding('class._has-icon'), tuiDefaultProp()], TuiNotificationComponent.prototype, \"hasIcon\", void 0);\n\n  __decorate([Input(), HostBinding('attr.data-tui-host-status'), tuiDefaultProp()], TuiNotificationComponent.prototype, \"status\", void 0);\n\n  __decorate([Output()], TuiNotificationComponent.prototype, \"close\", void 0);\n\n  __decorate([HostBinding('class._has-close-button')], TuiNotificationComponent.prototype, \"hasClose\", null);\n\n  TuiNotificationComponent = __decorate([__param(0, Inject(TUI_CLOSE_WORD)), __param(1, Inject(TUI_NOTIFICATION_OPTIONS))], TuiNotificationComponent);\n  return TuiNotificationComponent;\n})();\nlet TuiNotificationModule = /*#__PURE__*/(() => {\n  let TuiNotificationModule = class TuiNotificationModule {};\n\n  TuiNotificationModule.ɵfac = function TuiNotificationModule_Factory(t) {\n    return new (t || TuiNotificationModule)();\n  };\n\n  TuiNotificationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiNotificationModule\n  });\n  TuiNotificationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiSvgModule, TuiButtonModule]]\n  });\n  return TuiNotificationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiNotificationModule, {\n    declarations: function () {\n      return [TuiNotificationComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiSvgModule, TuiButtonModule];\n    },\n    exports: function () {\n      return [TuiNotificationComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { STATUS_ICON, TuiNotificationComponent, TuiNotificationModule }; //# sourceMappingURL=taiga-ui-core-components-notification.js.map","map":null,"metadata":{},"sourceType":"module"}