{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let FormBaseViewModel = /*#__PURE__*/(() => {\n  class FormBaseViewModel {\n    constructor() {\n      this.controlsGroup = this.getControls();\n    }\n    /**\n     * получаем контрол по имени\n     * @param controlName имя контрола\n     * @returns контрол если такой есть\n     */\n\n\n    getControl(controlName) {\n      const name = Object.keys(this.controlsGroup.controls).find(name => name === controlName);\n      return name ? this.controlsGroup.controls[name] : null;\n    }\n    /**\n     * получаем текущее значение по имени контрола\n     * @param controlName имя контрола\n     * @returns текущее значение контрола\n     */\n\n\n    getFormValue(controlName) {\n      var _a, _b;\n\n      return (_b = (_a = this.getControl(controlName)) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.toString();\n    }\n    /**\n     * метод для установки значения в контрол\n     * @param controlName имя\n     * @param value значение\n     */\n\n\n    setFormValue(controlName, value) {\n      var _a;\n\n      return (_a = this.getControl(controlName)) === null || _a === void 0 ? void 0 : _a.setValue(value);\n    }\n\n    getControls() {\n      throw new Error('');\n    }\n\n  }\n\n  FormBaseViewModel.ɵfac = function FormBaseViewModel_Factory(t) {\n    return new (t || FormBaseViewModel)();\n  };\n\n  FormBaseViewModel.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FormBaseViewModel\n  });\n  return FormBaseViewModel;\n})();","map":null,"metadata":{},"sourceType":"module"}