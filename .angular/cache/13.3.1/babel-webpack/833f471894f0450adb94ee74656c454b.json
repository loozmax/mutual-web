{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, ElementRef, Renderer2, Input, Directive, NgModule } from '@angular/core';\nimport { svgNodeFilter, px, TuiResizeService, tuiDefaultProp, TuiDestroyService } from '@taiga-ui/cdk';\nimport { Observable } from 'rxjs'; // @dynamic\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nlet TuiHighlightDirective = /*#__PURE__*/(() => {\n  let TuiHighlightDirective = class TuiHighlightDirective {\n    constructor(documentRef, elementRef, renderer, resize$) {\n      this.documentRef = documentRef;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.highlight = this.setUpHighlight();\n      this.treeWalker = this.documentRef.createTreeWalker(this.elementRef.nativeElement, NodeFilter.SHOW_TEXT, svgNodeFilter, false);\n      this.tuiHighlight = '';\n      this.tuiHighlightColor = 'var(--tui-selection)';\n      resize$.subscribe(() => {\n        this.updateStyles();\n      });\n    }\n\n    get match() {\n      return this.indexOf(this.elementRef.nativeElement.textContent) !== -1;\n    }\n\n    ngOnChanges() {\n      this.updateStyles();\n    }\n\n    updateStyles() {\n      this.highlight.style.display = 'none';\n\n      if (!this.match) {\n        return;\n      }\n\n      this.treeWalker.currentNode = this.elementRef.nativeElement;\n\n      do {\n        const index = this.indexOf(this.treeWalker.currentNode.nodeValue);\n\n        if (index === -1) {\n          continue;\n        }\n\n        const range = this.documentRef.createRange();\n        range.setStart(this.treeWalker.currentNode, index);\n        range.setEnd(this.treeWalker.currentNode, index + this.tuiHighlight.length);\n        const hostRect = this.elementRef.nativeElement.getBoundingClientRect();\n        const {\n          left,\n          top,\n          width,\n          height\n        } = range.getBoundingClientRect();\n        const {\n          style\n        } = this.highlight;\n        style.background = this.tuiHighlightColor;\n        style.left = px(left - hostRect.left);\n        style.top = px(top - hostRect.top);\n        style.width = px(width);\n        style.height = px(height);\n        style.display = 'block';\n        return;\n      } while (this.treeWalker.nextNode());\n    }\n\n    indexOf(source) {\n      return !source || !this.tuiHighlight ? -1 : source.toLowerCase().indexOf(this.tuiHighlight.toLowerCase());\n    }\n\n    setUpHighlight() {\n      const highlight = this.renderer.createElement('div');\n      const {\n        style\n      } = highlight;\n      style.background = this.tuiHighlightColor;\n      style.zIndex = '-1';\n      style.position = 'absolute';\n      this.renderer.appendChild(this.elementRef.nativeElement, highlight);\n      return highlight;\n    }\n\n  };\n\n  TuiHighlightDirective.ɵfac = function TuiHighlightDirective_Factory(t) {\n    return new (t || TuiHighlightDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(TuiResizeService));\n  };\n\n  TuiHighlightDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiHighlightDirective,\n    selectors: [[\"\", \"tuiHighlight\", \"\"]],\n    hostVars: 4,\n    hostBindings: function TuiHighlightDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"position\", \"relative\")(\"z-index\", 0);\n      }\n    },\n    inputs: {\n      tuiHighlight: \"tuiHighlight\",\n      tuiHighlightColor: \"tuiHighlightColor\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService, TuiResizeService]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  __decorate([Input(), tuiDefaultProp()], TuiHighlightDirective.prototype, \"tuiHighlight\", void 0);\n\n  __decorate([Input()], TuiHighlightDirective.prototype, \"tuiHighlightColor\", void 0);\n\n  TuiHighlightDirective = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Inject(ElementRef)), __param(2, Inject(Renderer2)), __param(3, Inject(TuiResizeService))], TuiHighlightDirective);\n  return TuiHighlightDirective;\n})();\nlet TuiHighlightModule = /*#__PURE__*/(() => {\n  let TuiHighlightModule = class TuiHighlightModule {};\n\n  TuiHighlightModule.ɵfac = function TuiHighlightModule_Factory(t) {\n    return new (t || TuiHighlightModule)();\n  };\n\n  TuiHighlightModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiHighlightModule\n  });\n  TuiHighlightModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiHighlightModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiHighlightModule, {\n    declarations: [TuiHighlightDirective],\n    exports: [TuiHighlightDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiHighlightDirective, TuiHighlightModule }; //# sourceMappingURL=taiga-ui-kit-directives-highlight.js.map","map":null,"metadata":{},"sourceType":"module"}