{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiNullableControl, TUI_DEFAULT_IDENTITY_MATCHER, isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule } from '@taiga-ui/cdk';\nimport { TUI_ANIMATION_OPTIONS, tuiScaleIn, TuiWrapperModule } from '@taiga-ui/core';\nimport { TuiRadioGroupComponent } from '@taiga-ui/kit/components/radio-group';\nimport { CommonModule } from '@angular/common';\n/** Default values for the checkbox options. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@taiga-ui/cdk';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@taiga-ui/kit/components/radio-group';\nconst _c0 = [\"focusableElement\"];\n\nfunction TuiRadioComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@tuiScaleIn\", ctx_r0.animation);\n  }\n}\n\nconst TUI_RADIO_DEFAULT_OPTIONS = {\n  size: 'm',\n  appearances: {\n    unchecked: \"outline\"\n    /* Outline */\n    ,\n    checked: \"primary\"\n    /* Primary */\n\n  }\n};\nconst TUI_RADIO_OPTIONS = new InjectionToken('Default parameters for radio component', {\n  factory: () => TUI_RADIO_DEFAULT_OPTIONS\n});\n\nconst tuiRadioOptionsProvider = options => ({\n  provide: TUI_RADIO_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_RADIO_DEFAULT_OPTIONS), options)\n});\n\nvar TuiRadioComponent_1; // @dynamic\n\nlet TuiRadioComponent = TuiRadioComponent_1 = class TuiRadioComponent extends AbstractTuiNullableControl {\n  constructor(control, changeDetectorRef, animationOptions, options, radioGroup) {\n    super(control, changeDetectorRef);\n    this.animationOptions = animationOptions;\n    this.options = options;\n    this.radioGroup = radioGroup;\n    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;\n    this.name = null;\n    this.size = this.options.size;\n    this.pseudoDisabled = false;\n    this.animation = Object.assign({\n      value: ''\n    }, this.animationOptions);\n  }\n\n  get appearance() {\n    return this.checked ? this.options.appearances.checked : this.options.appearances.unchecked;\n  }\n\n  get computedDisabled() {\n    return this.disabled || this.pseudoDisabled;\n  }\n\n  get nativeFocusableElement() {\n    return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get checked() {\n    return this.value === null ? this.item === null : this.item !== undefined && this.identityMatcher(this.value, this.item);\n  }\n\n  get computedName() {\n    return this.name || this.radioGroupName || this.controlName || null;\n  }\n\n  get isFocusable() {\n    return !this.readOnly && this.computedFocusable;\n  }\n\n  onChecked(checked) {\n    if (checked) {\n      this.updateValue(this.item !== undefined ? this.item : this.fallbackValue);\n    }\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onFocusVisible(focusVisible) {\n    this.updateFocusVisible(focusVisible);\n  }\n\n  get radioGroupName() {\n    return this.radioGroup === null ? null : this.radioGroup.name;\n  }\n\n};\n\nTuiRadioComponent.ɵfac = function TuiRadioComponent_Factory(t) {\n  return new (t || TuiRadioComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_ANIMATION_OPTIONS), ɵngcc0.ɵɵdirectiveInject(TUI_RADIO_OPTIONS), ɵngcc0.ɵɵdirectiveInject(TuiRadioGroupComponent, 8));\n};\n\nTuiRadioComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiRadioComponent,\n  selectors: [[\"tui-radio\"]],\n  viewQuery: function TuiRadioComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.focusableElement = _t.first);\n    }\n  },\n  hostVars: 3,\n  hostBindings: function TuiRadioComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-size\", ctx.size);\n      ɵngcc0.ɵɵclassProp(\"_disabled\", ctx.computedDisabled);\n    }\n  },\n  inputs: {\n    identityMatcher: \"identityMatcher\",\n    name: \"name\",\n    size: \"size\",\n    pseudoDisabled: \"pseudoDisabled\",\n    item: \"item\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiRadioComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 12,\n  consts: [[3, \"appearance\", \"disabled\", \"focused\", \"hovered\", \"pressed\", \"invalid\"], [\"class\", \"mark\", 4, \"ngIf\"], [\"type\", \"radio\", 1, \"native\", 3, \"id\", \"disabled\", \"tuiChecked\", \"tuiFocusable\", \"tuiFocusedChange\", \"tuiHoveredChange\", \"tuiPressedChange\", \"tuiCheckedChange\", \"tuiFocusVisibleChange\"], [\"focusableElement\", \"\"], [1, \"mark\"]],\n  template: function TuiRadioComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"tui-wrapper\", 0);\n      ɵngcc0.ɵɵtemplate(1, TuiRadioComponent_div_1_Template, 1, 1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"tuiFocusedChange\", function TuiRadioComponent_Template_input_tuiFocusedChange_2_listener($event) {\n        return ctx.onFocused($event);\n      })(\"tuiHoveredChange\", function TuiRadioComponent_Template_input_tuiHoveredChange_2_listener($event) {\n        return ctx.onHovered($event);\n      })(\"tuiPressedChange\", function TuiRadioComponent_Template_input_tuiPressedChange_2_listener($event) {\n        return ctx.onPressed($event);\n      })(\"tuiCheckedChange\", function TuiRadioComponent_Template_input_tuiCheckedChange_2_listener($event) {\n        return ctx.onChecked($event);\n      })(\"tuiFocusVisibleChange\", function TuiRadioComponent_Template_input_tuiFocusVisibleChange_2_listener($event) {\n        return ctx.onFocusVisible($event);\n      });\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"appearance\", ctx.appearance)(\"disabled\", ctx.computedDisabled)(\"focused\", ctx.computedFocusVisible)(\"hovered\", ctx.computedHovered)(\"pressed\", ctx.computedPressed)(\"invalid\", ctx.computedInvalid);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.checked);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"disabled\", ctx.computedDisabled)(\"tuiChecked\", ctx.checked)(\"tuiFocusable\", ctx.isFocusable);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.computedName);\n    }\n  },\n  directives: [ɵngcc1.TuiWrapperDirective, ɵngcc2.NgIf, ɵngcc3.TuiCheckedDirective, ɵngcc3.TuiFocusableDirective, ɵngcc3.TuiFocusedDirective, ɵngcc3.TuiHoveredDirective, ɵngcc3.TuiPressedDirective, ɵngcc3.TuiFocusVisibleDirective],\n  styles: [\"[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0;border-radius:100%}[data-size='m'][_nghost-%COMP%]{width:1rem;height:1rem}[data-size='l'][_nghost-%COMP%]{width:1.5rem;height:1.5rem}._readonly[_nghost-%COMP%]{pointer-events:none}.mark[_ngcontent-%COMP%]{position:absolute;background-color:currentColor;border-radius:100%}[data-size='m'][_nghost-%COMP%]   .mark[_ngcontent-%COMP%]{margin:.25rem;width:.5rem;height:.5rem}[data-size='l'][_nghost-%COMP%]   .mark[_ngcontent-%COMP%]{margin:.4375rem;width:.625rem;height:.625rem}.native[_ngcontent-%COMP%]{padding:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.native[_ngcontent-%COMP%]:-webkit-autofill, .native[_ngcontent-%COMP%]:-webkit-autofill:focus, .native[_ngcontent-%COMP%]:-webkit-autofill:hover{border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 1000px var(--tui-autofill) inset!important}._disabled[_nghost-%COMP%]   .native[_ngcontent-%COMP%]{cursor:default}\"],\n  data: {\n    animation: [tuiScaleIn]\n  },\n  changeDetection: 0\n});\n\nTuiRadioComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_ANIMATION_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_RADIO_OPTIONS]\n  }]\n}, {\n  type: TuiRadioGroupComponent,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TuiRadioGroupComponent]\n  }]\n}];\n\n__decorate([ViewChild('focusableElement')], TuiRadioComponent.prototype, \"focusableElement\", void 0);\n\n__decorate([Input()], TuiRadioComponent.prototype, \"item\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiRadioComponent.prototype, \"identityMatcher\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiRadioComponent.prototype, \"name\", void 0);\n\n__decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiRadioComponent.prototype, \"size\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiRadioComponent.prototype, \"pseudoDisabled\", void 0);\n\n__decorate([HostBinding('class._disabled')], TuiRadioComponent.prototype, \"computedDisabled\", null);\n\nTuiRadioComponent = TuiRadioComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_ANIMATION_OPTIONS)), __param(3, Inject(TUI_RADIO_OPTIONS)), __param(4, Optional()), __param(4, Inject(TuiRadioGroupComponent))], TuiRadioComponent);\nlet TuiRadioModule = /*#__PURE__*/(() => {\n  let TuiRadioModule = class TuiRadioModule {};\n\n  TuiRadioModule.ɵfac = function TuiRadioModule_Factory(t) {\n    return new (t || TuiRadioModule)();\n  };\n\n  TuiRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiRadioModule\n  });\n  TuiRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule, TuiWrapperModule]]\n  });\n  return TuiRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiRadioModule, {\n    declarations: function () {\n      return [TuiRadioComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule, TuiWrapperModule];\n    },\n    exports: function () {\n      return [TuiRadioComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TUI_RADIO_DEFAULT_OPTIONS, TUI_RADIO_OPTIONS, TuiRadioComponent, TuiRadioModule, tuiRadioOptionsProvider }; //# sourceMappingURL=taiga-ui-kit-components-radio.js.map","map":null,"metadata":{},"sourceType":"module"}