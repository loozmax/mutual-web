{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { EventEmitter, ElementRef, Inject, Input, HostBinding, Output, HostListener, Directive, NgModule } from '@angular/core';\nimport { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';\nimport * as ɵngcc0 from '@angular/core';\n\nfunction nonNegativeFiniteAssertion(value) {\n  return isFinite(value) && value >= 0;\n}\n\nfunction volumeAssertion(volume) {\n  return isFinite(volume) && volume >= 0 && volume <= 1;\n}\n\nlet TuiMediaDirective = /*#__PURE__*/(() => {\n  let TuiMediaDirective = class TuiMediaDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.playbackRate = 1;\n      this.volume = 1;\n      this.currentTimeChange = new EventEmitter();\n      this.pausedChange = new EventEmitter();\n      this.volumeChange = new EventEmitter();\n    }\n\n    set playbackRateSetter(playbackRate) {\n      this.updatePlaybackRate(playbackRate);\n    }\n\n    set currentTime(currentTime) {\n      if (Math.abs(currentTime - this.currentTime) > 0.05) {\n        this.elementRef.nativeElement.currentTime = currentTime;\n      }\n    }\n\n    set paused(paused) {\n      if (paused) {\n        this.elementRef.nativeElement.pause();\n      } else {\n        this.elementRef.nativeElement.play();\n        this.updatePlaybackRate(this.playbackRate);\n      }\n    }\n\n    get paused() {\n      return this.elementRef.nativeElement.paused;\n    }\n\n    get currentTime() {\n      return this.elementRef.nativeElement.currentTime;\n    } // @bad TODO: Make sure no other events can affect this like network issues etc.\n\n\n    onPausedChange(paused) {\n      this.pausedChange.emit(paused);\n      this.updatePlaybackRate(this.playbackRate);\n    }\n\n    onVolumeChange() {\n      this.volume = this.elementRef.nativeElement.volume;\n      this.volumeChange.emit(this.volume);\n    }\n\n    onCurrentTimeChange() {\n      this.currentTimeChange.emit(this.currentTime);\n    }\n\n    changeDetectionTrigger() {// @bad TODO: consider if other events need to trigger CD\n    }\n\n    updatePlaybackRate(playbackRate) {\n      this.playbackRate = playbackRate;\n      this.elementRef.nativeElement.playbackRate = this.playbackRate;\n    }\n\n  };\n\n  TuiMediaDirective.ɵfac = function TuiMediaDirective_Factory(t) {\n    return new (t || TuiMediaDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef));\n  };\n\n  TuiMediaDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiMediaDirective,\n    selectors: [[\"video\", \"tuiMedia\", \"\"], [\"audio\", \"tuiMedia\", \"\"]],\n    hostVars: 1,\n    hostBindings: function TuiMediaDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ended\", function TuiMediaDirective_ended_HostBindingHandler() {\n          return ctx.onPausedChange(true);\n        })(\"pause\", function TuiMediaDirective_pause_HostBindingHandler() {\n          return ctx.onPausedChange(true);\n        })(\"play\", function TuiMediaDirective_play_HostBindingHandler() {\n          return ctx.onPausedChange(false);\n        })(\"volumechange\", function TuiMediaDirective_volumechange_HostBindingHandler() {\n          return ctx.onVolumeChange();\n        })(\"timeupdate\", function TuiMediaDirective_timeupdate_HostBindingHandler() {\n          return ctx.onCurrentTimeChange();\n        })(\"seeking\", function TuiMediaDirective_seeking_HostBindingHandler() {\n          return ctx.onCurrentTimeChange();\n        })(\"seeked\", function TuiMediaDirective_seeked_HostBindingHandler() {\n          return ctx.onCurrentTimeChange();\n        })(\"durationchange\", function TuiMediaDirective_durationchange_HostBindingHandler() {\n          return ctx.changeDetectionTrigger();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"volume\", ctx.volume);\n      }\n    },\n    inputs: {\n      volume: \"volume\",\n      playbackRateSetter: [\"playbackRate\", \"playbackRateSetter\"],\n      currentTime: \"currentTime\",\n      paused: \"paused\"\n    },\n    outputs: {\n      currentTimeChange: \"currentTimeChange\",\n      pausedChange: \"pausedChange\",\n      volumeChange: \"volumeChange\"\n    },\n    exportAs: [\"tuiMedia\"]\n  });\n\n  __decorate([Input(), HostBinding('volume'), tuiDefaultProp(volumeAssertion)], TuiMediaDirective.prototype, \"volume\", void 0);\n\n  __decorate([Input('playbackRate'), tuiRequiredSetter(nonNegativeFiniteAssertion)], TuiMediaDirective.prototype, \"playbackRateSetter\", null);\n\n  __decorate([Input(), tuiRequiredSetter(nonNegativeFiniteAssertion)], TuiMediaDirective.prototype, \"currentTime\", null);\n\n  __decorate([Input()], TuiMediaDirective.prototype, \"paused\", null);\n\n  __decorate([Output()], TuiMediaDirective.prototype, \"currentTimeChange\", void 0);\n\n  __decorate([Output()], TuiMediaDirective.prototype, \"pausedChange\", void 0);\n\n  __decorate([Output()], TuiMediaDirective.prototype, \"volumeChange\", void 0);\n\n  __decorate([HostListener('ended', ['true']), HostListener('pause', ['true']), HostListener('play', ['false'])], TuiMediaDirective.prototype, \"onPausedChange\", null);\n\n  __decorate([HostListener('volumechange')], TuiMediaDirective.prototype, \"onVolumeChange\", null);\n\n  __decorate([HostListener('timeupdate'), HostListener('seeking'), HostListener('seeked')], TuiMediaDirective.prototype, \"onCurrentTimeChange\", null);\n\n  __decorate([HostListener('durationchange')], TuiMediaDirective.prototype, \"changeDetectionTrigger\", null);\n\n  TuiMediaDirective = __decorate([__param(0, Inject(ElementRef))], TuiMediaDirective);\n  return TuiMediaDirective;\n})();\nlet TuiMediaModule = /*#__PURE__*/(() => {\n  let TuiMediaModule = class TuiMediaModule {};\n\n  TuiMediaModule.ɵfac = function TuiMediaModule_Factory(t) {\n    return new (t || TuiMediaModule)();\n  };\n\n  TuiMediaModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiMediaModule\n  });\n  TuiMediaModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiMediaModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiMediaModule, {\n    declarations: [TuiMediaDirective],\n    exports: [TuiMediaDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiMediaDirective, TuiMediaModule, nonNegativeFiniteAssertion, volumeAssertion }; //# sourceMappingURL=taiga-ui-cdk-directives-media.js.map","map":null,"metadata":{},"sourceType":"module"}