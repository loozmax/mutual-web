{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { InjectionToken, inject, InjectFlags, RendererFactory2 } from '@angular/core';\nimport { WINDOW, USER_AGENT, NAVIGATOR } from '@ng-web-apis/common';\nimport { typedFromEvent } from '@taiga-ui/cdk/observables';\nimport { getActualTarget, getDocumentOrShadowRoot } from '@taiga-ui/cdk/utils';\nimport { BehaviorSubject, timer, merge, of } from 'rxjs';\nimport { switchMap, mapTo, startWith, share, takeUntil, repeatWhen, withLatestFrom, filter, map, take, distinctUntilChanged, shareReplay } from 'rxjs/operators';\nimport { ɵAnimationEngine } from '@angular/animations/browser';\nconst TUI_REMOVED_ELEMENT = new InjectionToken('Element currently being removed by AnimationEngine', {\n  factory: () => {\n    var _a;\n\n    const stub = {\n      onRemovalComplete: () => {}\n    };\n    const element$ = new BehaviorSubject(null);\n    const engine = (_a = inject(ɵAnimationEngine, InjectFlags.Optional)) !== null && _a !== void 0 ? _a : stub;\n    const {\n      onRemovalComplete = stub.onRemovalComplete\n    } = engine;\n\n    engine.onRemovalComplete = (element, context) => {\n      element$.next(element);\n      onRemovalComplete(element, context);\n    };\n\n    return element$.pipe(switchMap(element => timer(0).pipe(mapTo(null), startWith(element))), share());\n  }\n});\nconst TUI_ACTIVE_ELEMENT = new InjectionToken('Active element on the document for ActiveZone', {\n  factory: () => {\n    const removedElement$ = inject(TUI_REMOVED_ELEMENT);\n    const windowRef = inject(WINDOW);\n    const documentRef = inject(DOCUMENT);\n    const focusout$ = typedFromEvent(windowRef, 'focusout');\n    const focusin$ = typedFromEvent(windowRef, 'focusin');\n    const blur$ = typedFromEvent(windowRef, 'blur');\n    const mousedown$ = typedFromEvent(windowRef, 'mousedown');\n    const mouseup$ = typedFromEvent(windowRef, 'mouseup');\n    return merge(focusout$.pipe(takeUntil(mousedown$), repeatWhen(() => mouseup$), withLatestFrom(removedElement$), filter(([event, removedElement]) => isValidFocusout(getActualTarget(event), removedElement)), map(([{\n      relatedTarget\n    }]) => relatedTarget)), blur$.pipe(map(() => documentRef.activeElement), filter(element => !!element && element.matches('iframe'))), focusin$.pipe(switchMap(event => {\n      const target = getActualTarget(event);\n      const root = getDocumentOrShadowRoot(target);\n      return root === documentRef ? of(target) : shadowRootActiveElement(root).pipe(startWith(target));\n    })), mousedown$.pipe(switchMap(event => !documentRef.activeElement || documentRef.activeElement === documentRef.body ? of(getActualTarget(event)) : focusout$.pipe(take(1), takeUntil(timer(0)), mapTo(getActualTarget(event)))))).pipe(distinctUntilChanged(), share());\n  }\n}); // Checks if focusout event should be considered leaving active zone\n\nfunction isValidFocusout(target, removedElement = null) {\n  return (// Not due to switching tabs/going to DevTools\n    getDocumentOrShadowRoot(target).activeElement !== target && // Not due to button/input becoming disabled\n    !target.disabled && ( // Not due to element being removed from DOM\n    !removedElement || !removedElement.contains(target))\n  );\n}\n\nfunction shadowRootActiveElement(root) {\n  return merge(typedFromEvent(root, 'focusin').pipe(map(({\n    target\n  }) => target)), typedFromEvent(root, 'focusout').pipe(filter(({\n    target,\n    relatedTarget\n  }) => !!relatedTarget && isValidFocusout(target)), map(({\n    relatedTarget\n  }) => relatedTarget)));\n} // https://github.com/angular/angular/issues/17824#issuecomment-353239017\n\n\nconst TUI_DEFAULT_RENDERER = new InjectionToken('A Renderer2 for global services', {\n  // @ts-ignore\n  factory: () => inject(RendererFactory2).createRenderer(null, null)\n});\nconst TUI_DIALOGS = new InjectionToken('A stream of dialogs');\nconst TUI_FOCUSABLE_ITEM_ACCESSOR = new InjectionToken('A component that can be focused');\nconst IOS_REG_EXP = /ipad|iphone|ipod/;\nconst TUI_IS_IOS = new InjectionToken('iOS browser detection', {\n  factory: () => IOS_REG_EXP.test(inject(USER_AGENT).toLowerCase()) || inject(USER_AGENT).toLowerCase().includes('apple') && inject(NAVIGATOR).maxTouchPoints > 1\n}); // https://stackoverflow.com/a/11381730/2706426 http://detectmobilebrowsers.com/\n\nconst firstRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/;\nconst secondRegex = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/;\nconst TUI_IS_MOBILE = new InjectionToken('Mobile browser detection', {\n  factory: () => firstRegex.test(inject(USER_AGENT).toLowerCase()) || secondRegex.test(inject(USER_AGENT).substr(0, 4).toLowerCase())\n});\nconst TUI_IS_ANDROID = new InjectionToken('Mobile browser that is not iOS (technically includes Windows Phone, Blackberry etc.)', {\n  factory: () => inject(TUI_IS_MOBILE) && !inject(TUI_IS_IOS)\n});\n/**\n * {@link https://docs.cypress.io/faq/questions/using-cypress-faq#Is-there-any-way-to-detect-if-my-app-is-running-under-Cypress Cypress docs}\n */\n\nconst TUI_IS_CYPRESS = new InjectionToken('Detect if app is running under Cypress', {\n  factory: () => !!inject(WINDOW).Cypress\n});\n/* @deprecated export token from @taiga-ui/core package **/\n\nconst TUI_SANITIZER = new InjectionToken('A custom Sanitizer to sanitize source before inlining');\nconst TUI_SWIPE_OPTIONS = new InjectionToken('Swipe options', {\n  factory: () => ({\n    timeout: 500,\n    threshold: 30\n  })\n});\n/**\n * @description:\n * The isTrusted read-only property of the Event interface is a boolean value that is true\n * when the event was generated by a user action, and false when the event was created or\n * modified by a script or dispatched via EventTarget.dispatchEvent().\n */\n\nconst TUI_TAKE_ONLY_TRUSTED_EVENTS = new InjectionToken('This token need for override behavior the `pressedObservable` function', {\n  factory: () => true\n});\nconst TUI_TOUCH_SUPPORTED = new InjectionToken('Touch support detection', {\n  factory: () => inject(WINDOW).matchMedia('(any-pointer: coarse)').matches\n});\nconst TUI_WINDOW_HEIGHT = new InjectionToken('Window height accounting for disappearing address bar', {\n  factory: () => {\n    const windowRef = inject(WINDOW);\n    return typedFromEvent(windowRef, 'resize').pipe(startWith(null), map(() => windowRef.innerHeight), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n});\nconst TUI_ZOOM_OPTIONS = new InjectionToken('Zoom options', {\n  factory: () => ({\n    wheelSensitivity: 0.01\n  })\n});\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_ACTIVE_ELEMENT, TUI_DEFAULT_RENDERER, TUI_DIALOGS, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_ANDROID, TUI_IS_CYPRESS, TUI_IS_IOS, TUI_IS_MOBILE, TUI_REMOVED_ELEMENT, TUI_SANITIZER, TUI_SWIPE_OPTIONS, TUI_TAKE_ONLY_TRUSTED_EVENTS, TUI_TOUCH_SUPPORTED, TUI_WINDOW_HEIGHT, TUI_ZOOM_OPTIONS }; //# sourceMappingURL=taiga-ui-cdk-tokens.js.map","map":null,"metadata":{},"sourceType":"module"}