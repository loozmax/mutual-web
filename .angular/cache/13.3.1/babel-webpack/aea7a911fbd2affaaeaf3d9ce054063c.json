{"ast":null,"code":"import { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';\nimport { Injectable, NgZone, NgModule, Inject } from '@angular/core';\nimport { EMPTY, concat, defer } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: utils/dasharize.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @param {?} camel\r\n * @return {?}\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction dasharize(camel) {\n  return camel.replace(/[a-z][A-Z]/g,\n  /**\r\n  * @param {?} letterLetter\r\n  * @return {?}\r\n  */\n  letterLetter => {\n    return `${letterLetter[0]}-${letterLetter[1].toLowerCase()}`;\n  });\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/abstract.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @abstract\r\n */\n\n\nclass AbstractEventPlugin {\n  /**\r\n   * @param {?} event\r\n   * @return {?}\r\n   */\n  supports(event) {\n    return event.includes(this.modifier);\n  }\n  /**\r\n   * @param {?} _element\r\n   * @param {?} _event\r\n   * @param {?} _handler\r\n   * @return {?}\r\n   */\n\n\n  addGlobalEventListener(_element, _event, _handler) {\n    throw new Error(`Global event targets are not supported by ${this.modifier} plugin`);\n  }\n  /**\r\n   * @protected\r\n   * @param {?} event\r\n   * @return {?}\r\n   */\n\n\n  unwrap(event) {\n    return event.split('.').filter(\n    /**\r\n    * @param {?} v\r\n    * @return {?}\r\n    */\n    v => !this.modifier.includes(v)).join('.');\n  }\n\n}\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  AbstractEventPlugin.prototype.modifier;\n  /** @type {?} */\n\n  AbstractEventPlugin.prototype.manager;\n  /**\r\n   * @abstract\r\n   * @param {?} element\r\n   * @param {?} event\r\n   * @param {?} handler\r\n   * @return {?}\r\n   */\n\n  AbstractEventPlugin.prototype.addEventListener = function (element, event, handler) {};\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/bind.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet BindEventPlugin = /*#__PURE__*/(() => {\n  class BindEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '$';\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(element, event) {\n      element[event] = element[event] || EMPTY;\n      /** @type {?} */\n\n      const method = this.getMethod(element, event);\n      /** @type {?} */\n\n      const zone$ = this.manager.getZone().onStable;\n      /** @type {?} */\n\n      const sub = concat(zone$.pipe(takeWhile(\n      /**\r\n      * @return {?}\r\n      */\n      () => element[event] === EMPTY)), defer(\n      /**\r\n      * @return {?}\r\n      */\n      () => element[event])).subscribe(method);\n      return (\n        /**\r\n        * @return {?}\r\n        */\n        () => sub.unsubscribe()\n      );\n    }\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    getMethod(element, event) {\n      const [, key, value, unit = ''] = event.split('.');\n\n      if (event.endsWith('.attr')) {\n        return (\n          /**\r\n          * @param {?} v\r\n          * @return {?}\r\n          */\n          v => v === null ? element.removeAttribute(key) : element.setAttribute(key, String(v))\n        );\n      }\n\n      if (key === 'class') {\n        return (\n          /**\r\n          * @param {?} v\r\n          * @return {?}\r\n          */\n          v => element.classList.toggle(value, !!v)\n        );\n      }\n\n      if (key === 'style') {\n        return (\n          /**\r\n          * @param {?} v\r\n          * @return {?}\r\n          */\n          v => element.style.setProperty(dasharize(value), `${v}${unit}`)\n        );\n      }\n\n      return (\n        /**\r\n        * @param {?} v\r\n        * @return {?}\r\n        */\n        v => element[key] = v\n      );\n    }\n\n  }\n\n  BindEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵBindEventPlugin_BaseFactory;\n    return function BindEventPlugin_Factory(t) {\n      return (ɵBindEventPlugin_BaseFactory || (ɵBindEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BindEventPlugin)))(t || BindEventPlugin);\n    };\n  }();\n\n  BindEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BindEventPlugin,\n    factory: BindEventPlugin.ɵfac\n  });\n  return BindEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BindEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/options.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet OptionsEventPlugin = /*#__PURE__*/(() => {\n  class OptionsEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = 'capture.once.passive';\n    }\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    supports(event) {\n      return event.includes('.') && !this.unwrap(event).includes('.');\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(element, event, handler) {\n      element.addEventListener(this.unwrap(event), handler, {\n        once: event.includes('.once'),\n        passive: event.includes('.passive'),\n        capture: event.includes('.capture')\n      });\n      return (\n        /**\r\n        * @return {?}\r\n        */\n        () => element.removeEventListener(this.unwrap(event), handler)\n      );\n    }\n\n  }\n\n  OptionsEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵOptionsEventPlugin_BaseFactory;\n    return function OptionsEventPlugin_Factory(t) {\n      return (ɵOptionsEventPlugin_BaseFactory || (ɵOptionsEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(OptionsEventPlugin)))(t || OptionsEventPlugin);\n    };\n  }();\n\n  OptionsEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OptionsEventPlugin,\n    factory: OptionsEventPlugin.ɵfac\n  });\n  return OptionsEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  OptionsEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/prevent.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet PreventEventPlugin = /*#__PURE__*/(() => {\n  class PreventEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.prevent';\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(element, event, handler) {\n      /** @type {?} */\n      const wrapped =\n      /**\r\n      * @param {?} event\r\n      * @return {?}\r\n      */\n      event => {\n        event.preventDefault();\n        handler(event);\n      };\n\n      return this.manager.addEventListener(element, this.unwrap(event), wrapped);\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addGlobalEventListener(element, event, handler) {\n      /** @type {?} */\n      const wrapped =\n      /**\r\n      * @param {?} event\r\n      * @return {?}\r\n      */\n      event => {\n        event.preventDefault();\n        handler(event);\n      };\n\n      return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);\n    }\n\n  }\n\n  PreventEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵPreventEventPlugin_BaseFactory;\n    return function PreventEventPlugin_Factory(t) {\n      return (ɵPreventEventPlugin_BaseFactory || (ɵPreventEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PreventEventPlugin)))(t || PreventEventPlugin);\n    };\n  }();\n\n  PreventEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PreventEventPlugin,\n    factory: PreventEventPlugin.ɵfac\n  });\n  return PreventEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  PreventEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/self.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet SelfEventPlugin = /*#__PURE__*/(() => {\n  class SelfEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.self';\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(element, event, handler) {\n      /** @type {?} */\n      const wrapped =\n      /**\r\n      * @param {?} event\r\n      * @return {?}\r\n      */\n      event => {\n        if (event.target === event.currentTarget) {\n          handler(event);\n        }\n      };\n\n      return this.manager.addEventListener(element, this.unwrap(event), wrapped);\n    }\n\n  }\n\n  SelfEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵSelfEventPlugin_BaseFactory;\n    return function SelfEventPlugin_Factory(t) {\n      return (ɵSelfEventPlugin_BaseFactory || (ɵSelfEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SelfEventPlugin)))(t || SelfEventPlugin);\n    };\n  }();\n\n  SelfEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: SelfEventPlugin,\n    factory: SelfEventPlugin.ɵfac\n  });\n  return SelfEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  SelfEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/silent.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet SilentEventPlugin = /*#__PURE__*/(() => {\n  class SilentEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.silent';\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(element, event, handler) {\n      return this.manager.getZone().runOutsideAngular(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.manager.addEventListener(element, this.unwrap(event), handler));\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addGlobalEventListener(element, event, handler) {\n      return this.manager.getZone().runOutsideAngular(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.manager.addGlobalEventListener(element, this.unwrap(event), handler));\n    }\n\n  }\n\n  SilentEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵSilentEventPlugin_BaseFactory;\n    return function SilentEventPlugin_Factory(t) {\n      return (ɵSilentEventPlugin_BaseFactory || (ɵSilentEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SilentEventPlugin)))(t || SilentEventPlugin);\n    };\n  }();\n\n  SilentEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: SilentEventPlugin,\n    factory: SilentEventPlugin.ɵfac\n  });\n  return SilentEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  SilentEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/stop.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet StopEventPlugin = /*#__PURE__*/(() => {\n  class StopEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.stop';\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(element, event, handler) {\n      /** @type {?} */\n      const wrapped =\n      /**\r\n      * @param {?} event\r\n      * @return {?}\r\n      */\n      event => {\n        event.stopPropagation();\n        handler(event);\n      };\n\n      return this.manager.addEventListener(element, this.unwrap(event), wrapped);\n    }\n    /**\r\n     * @param {?} element\r\n     * @param {?} event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addGlobalEventListener(element, event, handler) {\n      /** @type {?} */\n      const wrapped =\n      /**\r\n      * @param {?} event\r\n      * @return {?}\r\n      */\n      event => {\n        event.stopPropagation();\n        handler(event);\n      };\n\n      return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);\n    }\n\n  }\n\n  StopEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵStopEventPlugin_BaseFactory;\n    return function StopEventPlugin_Factory(t) {\n      return (ɵStopEventPlugin_BaseFactory || (ɵStopEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(StopEventPlugin)))(t || StopEventPlugin);\n    };\n  }();\n\n  StopEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StopEventPlugin,\n    factory: StopEventPlugin.ɵfac\n  });\n  return StopEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  StopEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: plugins/zone.plugin.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * TODO: This will not be needed in Angular 10\r\n * when libraries are allowed to use Ivy renderer and markDirty becomes stable API\r\n */\n\n\nlet ZoneEventPlugin = /*#__PURE__*/(() => {\n  class ZoneEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.init';\n    }\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addEventListener(_element, _event, handler) {\n      return this.handle(handler);\n    }\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _event\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    addGlobalEventListener(_element, _event, handler) {\n      return this.handle(handler);\n    }\n    /**\r\n     * @private\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\n\n\n    handle(handler) {\n      /** @type {?} */\n      const zone = this.manager.getZone();\n      /** @type {?} */\n\n      const subscription = zone.onStable.subscribe(\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        subscription.unsubscribe();\n        handler(zone);\n      });\n      return (\n        /**\r\n        * @return {?}\r\n        */\n        () => {}\n      );\n    }\n\n  }\n\n  ZoneEventPlugin.ɵfac = /*@__PURE__*/function () {\n    let ɵZoneEventPlugin_BaseFactory;\n    return function ZoneEventPlugin_Factory(t) {\n      return (ɵZoneEventPlugin_BaseFactory || (ɵZoneEventPlugin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ZoneEventPlugin)))(t || ZoneEventPlugin);\n    };\n  }();\n\n  ZoneEventPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ZoneEventPlugin,\n    factory: ZoneEventPlugin.ɵfac\n  });\n  return ZoneEventPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ZoneEventPlugin.prototype.modifier;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: constants/plugins.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\n\nconst NG_EVENT_PLUGINS = [{\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: SilentEventPlugin,\n  multi: true\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: PreventEventPlugin,\n  multi: true\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: SelfEventPlugin,\n  multi: true\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: StopEventPlugin,\n  multi: true\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: ZoneEventPlugin,\n  multi: true\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: OptionsEventPlugin,\n  multi: true\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: BindEventPlugin,\n  multi: true\n}];\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: decorators/should-call.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * TODO: This will not be needed when markDirty becomes stable API\r\n * @template T\r\n * @param {?} predicate\r\n * @return {?}\r\n */\n\nfunction shouldCall(predicate) {\n  return (\n    /**\r\n    * @param {?} _\r\n    * @param {?} key\r\n    * @param {?} desc\r\n    * @return {?}\r\n    */\n    (_, key, desc) => {\n      const {\n        value\n      } = desc;\n\n      desc.value =\n      /**\r\n      * @this {?}\r\n      * @param {...?} args\r\n      * @return {?}\r\n      */\n      function (...args) {\n        /** @type {?} */\n        const zone = arguments[0];\n\n        if (zone instanceof NgZone) {\n          Object.defineProperty(this, key, {\n            /**\r\n             * @this {?}\r\n             * @param {...?} args\r\n             * @return {?}\r\n             */\n            value(...args) {\n              if (predicate.apply(this, args)) {\n                zone.run(\n                /**\r\n                * @return {?}\r\n                */\n                () => {\n                  value.apply(this, args);\n                });\n              }\n            }\n\n          });\n        } else if (predicate.apply(this, args)) {\n          value.apply(this, args);\n        }\n      };\n    }\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: types/predicate.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: utils/as-callable.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @template T\r\n * @param {?} a\r\n * @return {?}\r\n */\n\n\nfunction asCallable(a) {\n  return (\n    /** @type {?} */\n    a\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n// @dynamic\n\n\nlet EventPluginsModule = /*#__PURE__*/(() => {\n  class EventPluginsModule {\n    /**\r\n     * @param {?} plugins\r\n     */\n    constructor(plugins) {\n      console.assert(!(plugins[0] instanceof SilentEventPlugin) || EventPluginsModule.initialized, 'EventPluginsModule must come after BrowserModule in imports');\n      EventPluginsModule.initialized = true;\n    }\n\n  }\n\n  EventPluginsModule.ɵfac = function EventPluginsModule_Factory(t) {\n    return new (t || EventPluginsModule)(ɵngcc0.ɵɵinject(EVENT_MANAGER_PLUGINS));\n  };\n\n  EventPluginsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: EventPluginsModule\n  });\n  EventPluginsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: NG_EVENT_PLUGINS\n  });\n  EventPluginsModule.initialized = false;\n  /** @nocollapse */\n\n  return EventPluginsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  EventPluginsModule.initialized;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: tinkoff-ng-event-plugins.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { BindEventPlugin, EventPluginsModule, NG_EVENT_PLUGINS, OptionsEventPlugin, PreventEventPlugin, SilentEventPlugin, StopEventPlugin, ZoneEventPlugin, asCallable, shouldCall, AbstractEventPlugin as ɵa, SelfEventPlugin as ɵb }; //# sourceMappingURL=tinkoff-ng-event-plugins.js.map","map":null,"metadata":{},"sourceType":"module"}