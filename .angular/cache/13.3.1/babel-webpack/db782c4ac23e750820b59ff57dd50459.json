{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, ElementRef, Renderer2, HostListener, Directive, NgModule } from '@angular/core';\nimport { containsOrAfter } from '@taiga-ui/cdk/utils/dom';\nimport { getNativeFocused, setNativeFocused, getClosestFocusable, blurNativeFocused } from '@taiga-ui/cdk/utils/focus'; // @dynamic\n\nimport * as ɵngcc0 from '@angular/core';\nlet TuiFocusTrapDirective = /*#__PURE__*/(() => {\n  let TuiFocusTrapDirective = class TuiFocusTrapDirective {\n    constructor(documentRef, elementRef, renderer) {\n      this.documentRef = documentRef;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.activeElement = getNativeFocused(this.documentRef);\n      /**\n       * This would cause currently focused element to lose focus\n       * but it might cause ExpressionChanged error due to potential HostBinding.\n       * Microtask keeps it in the same frame but allows change detection to run\n       */\n\n      Promise.resolve().then(() => {\n        setNativeFocused(this.elementRef.nativeElement);\n      });\n    }\n\n    onBlur() {\n      this.renderer.removeAttribute(this.elementRef.nativeElement, 'tabIndex');\n    }\n\n    onFocusIn(node) {\n      if (containsOrAfter(this.elementRef.nativeElement, node)) {\n        return;\n      }\n\n      const focusable = getClosestFocusable(this.elementRef.nativeElement, false, this.elementRef.nativeElement);\n\n      if (focusable) {\n        setNativeFocused(focusable);\n      }\n    }\n\n    ngOnDestroy() {\n      blurNativeFocused(this.documentRef);\n      /**\n       * HostListeners are triggered even after ngOnDestroy\n       * {@link https://github.com/angular/angular/issues/38100}\n       * so we need to delay it but stay in the same sync cycle,\n       * therefore using Promise instead of setTimeout\n       */\n\n      Promise.resolve().then(() => {\n        // TODO: iframe warning\n        if (this.activeElement instanceof HTMLElement) {\n          setNativeFocused(this.activeElement);\n        }\n      });\n    }\n\n  };\n\n  TuiFocusTrapDirective.ɵfac = function TuiFocusTrapDirective_Factory(t) {\n    return new (t || TuiFocusTrapDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer2));\n  };\n\n  TuiFocusTrapDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiFocusTrapDirective,\n    selectors: [[\"\", \"tuiFocusTrap\", \"\"]],\n    hostAttrs: [\"tabIndex\", \"0\"],\n    hostBindings: function TuiFocusTrapDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function TuiFocusTrapDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        })(\"focusin.silent\", function TuiFocusTrapDirective_focusin_silent_HostBindingHandler($event) {\n          return ctx.onFocusIn($event.target);\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n    }\n  });\n\n  __decorate([HostListener('blur')], TuiFocusTrapDirective.prototype, \"onBlur\", null);\n\n  __decorate([HostListener('window:focusin.silent', ['$event.target'])], TuiFocusTrapDirective.prototype, \"onFocusIn\", null);\n\n  TuiFocusTrapDirective = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Inject(ElementRef)), __param(2, Inject(Renderer2))], TuiFocusTrapDirective);\n  return TuiFocusTrapDirective;\n})();\nlet TuiFocusTrapModule = /*#__PURE__*/(() => {\n  let TuiFocusTrapModule = class TuiFocusTrapModule {};\n\n  TuiFocusTrapModule.ɵfac = function TuiFocusTrapModule_Factory(t) {\n    return new (t || TuiFocusTrapModule)();\n  };\n\n  TuiFocusTrapModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiFocusTrapModule\n  });\n  TuiFocusTrapModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiFocusTrapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiFocusTrapModule, {\n    declarations: [TuiFocusTrapDirective],\n    exports: [TuiFocusTrapDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiFocusTrapDirective, TuiFocusTrapModule }; //# sourceMappingURL=taiga-ui-cdk-directives-focus-trap.js.map","map":null,"metadata":{},"sourceType":"module"}