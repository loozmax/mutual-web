{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiControl, isNativeFocused, isPresent, setNativeFocused, clamp, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';\nimport { tuiCreateNumberMask, formatNumber, TUI_TEXTFIELD_APPEARANCE, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { TUI_PLUS_MINUS_TEXTS } from '@taiga-ui/kit/tokens';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport { TextMaskModule } from 'angular2-text-mask'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/kit/directives';\nimport * as ɵngcc3 from 'angular2-text-mask';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@angular/forms';\nimport * as ɵngcc6 from 'rxjs';\n\nfunction TuiInputCountComponent_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"section\", 2)(2, \"button\", 3);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_mousedown_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r3.onButtonMouseDown($event, ctx_r3.plusButtonDisabled);\n    })(\"click\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r5.increaseValue();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_mousedown_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.onButtonMouseDown($event, ctx_r6.minusButtonDisabled);\n    })(\"click\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r7.decreaseValue();\n    });\n    ɵngcc0.ɵɵelementEnd()();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const texts_r2 = ctx.ngIf;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"icon\", ctx_r1.iconUp)(\"appearance\", ctx_r1.options.appearance)(\"title\", texts_r2[0])(\"disabled\", ctx_r1.plusButtonDisabled)(\"focusable\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"icon\", ctx_r1.iconDown)(\"appearance\", ctx_r1.options.appearance)(\"disabled\", ctx_r1.minusButtonDisabled)(\"focusable\", false)(\"title\", texts_r2[1]);\n  }\n}\n\nfunction TuiInputCountComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TuiInputCountComponent_ng_container_3_ng_container_1_Template, 4, 10, \"ng-container\", 1);\n    ɵngcc0.ɵɵpipe(2, \"async\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.minusTexts$));\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst PASSWORD_ICON_UP = 'tuiIconPlus';\nconst PASSWORD_ICON_DOWN = 'tuiIconMinus';\n/** Default values for the input count options. */\n\nconst TUI_INPUT_COUNT_DEFAULT_OPTIONS = {\n  icons: {\n    up: PASSWORD_ICON_UP,\n    down: PASSWORD_ICON_DOWN\n  },\n  appearance: 'textfield',\n  hideButtons: false,\n  min: 0,\n  max: Infinity,\n  step: 1,\n  postfix: ''\n};\nconst TUI_INPUT_COUNT_OPTIONS = new InjectionToken('Default parameters for input count component', {\n  factory: () => TUI_INPUT_COUNT_DEFAULT_OPTIONS\n});\n\nconst tuiInputCountOptionsProvider = options => ({\n  provide: TUI_INPUT_COUNT_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_INPUT_COUNT_DEFAULT_OPTIONS), options)\n});\n\nvar TuiInputCountComponent_1; // @dynamic\n\nlet TuiInputCountComponent = TuiInputCountComponent_1 = class TuiInputCountComponent extends AbstractTuiControl {\n  constructor(control, changeDetectorRef, appearance, textfieldSize, minusTexts$, isMobile, options, numberFormat) {\n    super(control, changeDetectorRef);\n    this.appearance = appearance;\n    this.textfieldSize = textfieldSize;\n    this.minusTexts$ = minusTexts$;\n    this.isMobile = isMobile;\n    this.options = options;\n    this.numberFormat = numberFormat;\n    this.step = this.options.step;\n    this.min = this.options.min;\n    this.max = this.options.max;\n    this.hideButtons = this.options.hideButtons;\n    this.prefix = '';\n    this.postfix = this.options.postfix;\n  }\n\n  getMask(allowNegative) {\n    return {\n      mask: tuiCreateNumberMask({\n        allowNegative,\n        decimalSymbol: this.numberFormat.decimalSeparator,\n        thousandSymbol: this.numberFormat.thousandSeparator\n      }),\n      guide: false\n    };\n  } // TODO: Remove in v.3\n\n\n  get buttonsHidden() {\n    return this.hideButtons || this.appearance === 'table';\n  }\n\n  get iconUp() {\n    return this.options.icons.up;\n  }\n\n  get iconDown() {\n    return this.options.icons.down;\n  }\n\n  get nativeFocusableElement() {\n    return !this.primitiveTextfield || this.computedDisabled ? null : this.primitiveTextfield.nativeFocusableElement;\n  }\n\n  get size() {\n    return this.textfieldSize.size;\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get exampleText() {\n    return String(this.min);\n  }\n\n  get computedValue() {\n    return this.focused ? this.nativeValue : this.formatNumber(this.value);\n  }\n\n  get minusButtonDisabled() {\n    return !this.interactive || isPresent(this.value) && this.value <= this.min;\n  }\n\n  get plusButtonDisabled() {\n    return !this.interactive || isPresent(this.value) && this.value >= this.max;\n  }\n\n  onButtonMouseDown(event, disabled = false) {\n    if (disabled || !this.nativeFocusableElement || this.isMobile) {\n      return;\n    }\n\n    event.preventDefault();\n    setNativeFocused(this.nativeFocusableElement);\n  }\n\n  onFocused(focused) {\n    if (!focused) {\n      this.onBlur();\n    }\n\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onValueChange() {\n    const capped = this.capValue(this.nativeNumberValue);\n\n    if (capped === null || isNaN(capped)) {\n      return;\n    }\n\n    const newValue = this.formatNumber(capped);\n\n    if (this.nativeValue !== newValue) {\n      this.nativeValue = newValue;\n    }\n\n    this.updateValue(capped);\n  }\n\n  decreaseValue() {\n    if (this.readOnly) {\n      return;\n    }\n\n    const newValue = (this.value || 0) - this.step;\n    this.safeUpdateValue(newValue);\n  }\n\n  increaseValue() {\n    if (this.readOnly) {\n      return;\n    }\n\n    const newValue = (this.value || 0) + this.step;\n    this.safeUpdateValue(newValue);\n  }\n\n  onKeydown(event) {\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'Up':\n        this.increaseValue();\n        event.preventDefault();\n        break;\n\n      case 'ArrowDown':\n      case 'Down':\n        this.decreaseValue();\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  getFallbackValue() {\n    return 0;\n  }\n\n  get nativeNumberValue() {\n    return parseInt(this.nativeValue.split(this.numberFormat.thousandSeparator).join(''), 10);\n  }\n\n  get nativeValue() {\n    return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n  }\n\n  set nativeValue(value) {\n    if (!this.nativeFocusableElement) {\n      return;\n    }\n\n    this.nativeFocusableElement.value = value;\n  }\n\n  safeUpdateValue(newValue) {\n    const value = clamp(newValue, this.min, this.max);\n    this.updateValue(value);\n    this.nativeValue = this.formatNumber(value);\n  }\n\n  capValue(value) {\n    const capped = Math.min(value, this.max);\n    return isNaN(capped) || capped < this.min ? null : capped;\n  }\n\n  onBlur() {\n    const value = Math.max(this.nativeNumberValue || 0, this.min);\n    const formattedValue = this.formatNumber(value);\n    this.nativeValue = formattedValue;\n    this.updateValue(value);\n\n    if (this.primitiveTextfield) {\n      this.primitiveTextfield.value = formattedValue;\n    }\n  }\n\n  formatNumber(value) {\n    return formatNumber(value, null, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n  }\n\n};\n\nTuiInputCountComponent.ɵfac = function TuiInputCountComponent_Factory(t) {\n  return new (t || TuiInputCountComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_APPEARANCE), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵngcc0.ɵɵdirectiveInject(TUI_PLUS_MINUS_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_IS_MOBILE), ɵngcc0.ɵɵdirectiveInject(TUI_INPUT_COUNT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(TUI_NUMBER_FORMAT));\n};\n\nTuiInputCountComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiInputCountComponent,\n  selectors: [[\"tui-input-count\"]],\n  viewQuery: function TuiInputCountComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.primitiveTextfield = _t.first);\n    }\n  },\n  hostVars: 3,\n  hostBindings: function TuiInputCountComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-size\", ctx.size);\n      ɵngcc0.ɵɵclassProp(\"_hide-buttons\", ctx.buttonsHidden);\n    }\n  },\n  inputs: {\n    step: \"step\",\n    min: \"min\",\n    max: \"max\",\n    hideButtons: \"hideButtons\",\n    prefix: \"prefix\",\n    postfix: \"postfix\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiInputCountComponent_1)\n  }, {\n    provide: AbstractTuiControl,\n    useExisting: forwardRef(() => TuiInputCountComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 14,\n  consts: [[\"tuiValueAccessor\", \"\", \"tuiTextfieldAutocomplete\", \"off\", \"tuiTextfieldInputMode\", \"numeric\", 1, \"textfield\", 3, \"tuiTextfieldMaxLength\", \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"focusable\", \"nativeId\", \"prefix\", \"postfix\", \"disabled\", \"readOnly\", \"textMask\", \"invalid\", \"value\", \"valueChange\", \"keydown\", \"focusedChange\", \"hoveredChange\", \"pressedChange\"], [4, \"ngIf\"], [1, \"buttons\"], [\"tuiIconButton\", \"\", \"type\", \"button\", \"automation-id\", \"tui-input-count__plus-button\", \"size\", \"s\", 1, \"button\", \"button_plus\", 3, \"icon\", \"appearance\", \"title\", \"disabled\", \"focusable\", \"mousedown\", \"click\"], [\"tuiIconButton\", \"\", \"type\", \"button\", \"automation-id\", \"tui-input-count__minus-button\", \"size\", \"s\", 1, \"button\", \"button_minus\", 3, \"icon\", \"appearance\", \"disabled\", \"focusable\", \"title\", \"mousedown\", \"click\"]],\n  template: function TuiInputCountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵelementStart(0, \"tui-primitive-textfield\", 0);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputCountComponent_Template_tui_primitive_textfield_valueChange_0_listener() {\n        return ctx.onValueChange();\n      })(\"keydown\", function TuiInputCountComponent_Template_tui_primitive_textfield_keydown_0_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"focusedChange\", function TuiInputCountComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n        return ctx.onFocused($event);\n      })(\"hoveredChange\", function TuiInputCountComponent_Template_tui_primitive_textfield_hoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"pressedChange\", function TuiInputCountComponent_Template_tui_primitive_textfield_pressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      });\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, TuiInputCountComponent_ng_container_3_Template, 3, 3, \"ng-container\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"tuiTextfieldMaxLength\", 18)(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.pseudoHovered)(\"pseudoPressed\", ctx.pseudoPressed)(\"focusable\", ctx.focusable)(\"nativeId\", ctx.nativeId)(\"prefix\", ctx.prefix)(\"postfix\", ctx.postfix)(\"disabled\", ctx.computedDisabled)(\"readOnly\", ctx.readOnly)(\"textMask\", ctx.getMask(ctx.min < 0))(\"invalid\", ctx.computedInvalid)(\"value\", ctx.computedValue);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.buttonsHidden);\n    }\n  },\n  directives: [ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc2.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldAutocompleteDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc1.TuiTextfieldMaxLengthDirective, ɵngcc3.MaskedInputDirective, ɵngcc4.NgIf, ɵngcc1.TuiButtonComponent],\n  pipes: [ɵngcc4.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}[data-size='l'][_nghost-%COMP%]{font:var(--tui-font-text-m);height:var(--tui-height-l)}.textfield[_ngcontent-%COMP%]{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}[_nghost-%COMP%]:not(._hide-buttons)   .textfield[_ngcontent-%COMP%]{border-top-right-radius:0;border-bottom-right-radius:0}.buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-left:.125rem;height:100%}.buttons[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem)}.buttons[_ngcontent-%COMP%]   .button_plus[_ngcontent-%COMP%]{margin-bottom:.125rem;border-radius:0 var(--tui-radius-m) 0 0}.buttons[_ngcontent-%COMP%]   .button_minus[_ngcontent-%COMP%]{border-radius:0 0 var(--tui-radius-m)}[data-size='l'][_nghost-%COMP%]   .buttons[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]{width:calc(var(--tui-height-l) * .75)}\"],\n  changeDetection: 0\n});\n\nTuiInputCountComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [TUI_TEXTFIELD_APPEARANCE]\n  }]\n}, {\n  type: TuiTextfieldSizeDirective,\n  decorators: [{\n    type: Inject,\n    args: [TUI_TEXTFIELD_SIZE]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TUI_PLUS_MINUS_TEXTS]\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Inject,\n    args: [TUI_IS_MOBILE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_INPUT_COUNT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_NUMBER_FORMAT]\n  }]\n}];\n\n__decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputCountComponent.prototype, \"primitiveTextfield\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputCountComponent.prototype, \"step\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputCountComponent.prototype, \"min\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputCountComponent.prototype, \"max\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputCountComponent.prototype, \"hideButtons\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputCountComponent.prototype, \"prefix\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputCountComponent.prototype, \"postfix\", void 0);\n\n__decorate([tuiPure], TuiInputCountComponent.prototype, \"getMask\", null);\n\n__decorate([HostBinding('class._hide-buttons')], TuiInputCountComponent.prototype, \"buttonsHidden\", null);\n\n__decorate([HostBinding('attr.data-size')], TuiInputCountComponent.prototype, \"size\", null);\n\nTuiInputCountComponent = TuiInputCountComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_TEXTFIELD_APPEARANCE)), __param(3, Inject(TUI_TEXTFIELD_SIZE)), __param(4, Inject(TUI_PLUS_MINUS_TEXTS)), __param(5, Inject(TUI_IS_MOBILE)), __param(6, Inject(TUI_INPUT_COUNT_OPTIONS)), __param(7, Inject(TUI_NUMBER_FORMAT))], TuiInputCountComponent);\nvar TuiInputCountDirective_1;\nlet TuiInputCountDirective = TuiInputCountDirective_1 = class TuiInputCountDirective extends TuiAbstractTextfieldHost {\n  onValueChange() {\n    this.host.onValueChange();\n  }\n\n  process(input) {\n    input.autocomplete = 'off';\n    input.inputMode = 'numeric';\n  }\n\n};\n\nTuiInputCountDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputCountDirective_BaseFactory;\n  return function TuiInputCountDirective_Factory(t) {\n    return (ɵTuiInputCountDirective_BaseFactory || (ɵTuiInputCountDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputCountDirective)))(t || TuiInputCountDirective);\n  };\n}();\n\nTuiInputCountDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputCountDirective,\n  selectors: [[\"tui-input-count\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputCountDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputCountModule = /*#__PURE__*/(() => {\n  let TuiInputCountModule = class TuiInputCountModule {};\n\n  TuiInputCountModule.ɵfac = function TuiInputCountModule_Factory(t) {\n    return new (t || TuiInputCountModule)();\n  };\n\n  TuiInputCountModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputCountModule\n  });\n  TuiInputCountModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TextMaskModule, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule]]\n  });\n  return TuiInputCountModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputCountModule, {\n    declarations: function () {\n      return [TuiInputCountComponent, TuiInputCountDirective];\n    },\n    imports: function () {\n      return [CommonModule, TextMaskModule, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule];\n    },\n    exports: function () {\n      return [TuiInputCountComponent, TuiInputCountDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PASSWORD_ICON_DOWN, PASSWORD_ICON_UP, TUI_INPUT_COUNT_DEFAULT_OPTIONS, TUI_INPUT_COUNT_OPTIONS, TuiInputCountComponent, TuiInputCountDirective, TuiInputCountModule, tuiInputCountOptionsProvider }; //# sourceMappingURL=taiga-ui-kit-components-input-count.js.map","map":null,"metadata":{},"sourceType":"module"}