{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';\nimport { TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiNotificationsModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { TUI_COPY_TEXTS } from '@taiga-ui/kit/tokens';\nimport { Subject, merge, of, timer, Observable } from 'rxjs';\nimport { switchMap, mapTo, startWith } from 'rxjs/operators';\nimport { TUI_VALUE_ACCESSOR_PROVIDER } from '@taiga-ui/kit/providers';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from 'rxjs';\n\nfunction TuiInputCopyComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-svg\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiInputCopyComponent_ng_template_3_Template_tui_svg_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.copy();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n\n    const _r2 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"tuiHint\", _r2)(\"tuiHintDirection\", ctx_r1.messageDirection)(\"tuiHintMode\", ctx_r1.messageMode)(\"src\", ctx_r1.icon);\n  }\n}\n\nfunction TuiInputCopyComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n    ɵngcc0.ɵɵpipe(1, \"async\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"content\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r3.hintText$));\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst TUI_INPUT_COPY_PROVIDERS = [TUI_VALUE_ACCESSOR_PROVIDER, {\n  provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n  useExisting: forwardRef(() => TuiInputCopyComponent)\n}, {\n  provide: AbstractTuiControl,\n  useExisting: forwardRef(() => TuiInputCopyComponent)\n}]; // @dynamic\n\nlet TuiInputCopyComponent = /*#__PURE__*/(() => {\n  let TuiInputCopyComponent = class TuiInputCopyComponent extends AbstractTuiControl {\n    constructor(control, changeDetectorRef, documentRef, textfieldSize, copyTexts$) {\n      super(control, changeDetectorRef);\n      this.documentRef = documentRef;\n      this.textfieldSize = textfieldSize;\n      this.copyTexts$ = copyTexts$;\n      this.copy$ = new Subject();\n      this.successMessage = '';\n      this.messageDirection = 'bottom-left';\n      this.messageMode = null;\n    }\n\n    get hasValue() {\n      return !!this.value;\n    }\n\n    get hintText$() {\n      return this.copyTexts$.pipe(switchMap(texts => this.copy$.pipe(switchMap(() => merge(of(this.successMessage || texts[1]), timer(3000).pipe(mapTo(texts[0])))), startWith(texts[0]))));\n    }\n\n    get nativeFocusableElement() {\n      return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;\n    }\n\n    get focused() {\n      return !!this.textfield && this.textfield.focused;\n    }\n\n    get icon() {\n      return this.textfieldSize.size === 's' ? 'tuiIconCopy' : 'tuiIconCopyLarge';\n    }\n\n    onValueChange(value) {\n      this.updateValue(value);\n    }\n\n    onFocused(focused) {\n      this.updateFocused(focused);\n    }\n\n    onHovered(hovered) {\n      this.updateHovered(hovered);\n    }\n\n    onPressed(pressed) {\n      this.updatePressed(pressed);\n    }\n\n    copy() {\n      if (!this.textfield || !this.textfield.nativeFocusableElement) {\n        return;\n      }\n\n      this.textfield.nativeFocusableElement.select();\n      this.documentRef.execCommand('copy');\n      this.copy$.next();\n    }\n\n    getFallbackValue() {\n      return '';\n    }\n\n  };\n\n  TuiInputCopyComponent.ɵfac = function TuiInputCopyComponent_Factory(t) {\n    return new (t || TuiInputCopyComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵngcc0.ɵɵdirectiveInject(TUI_COPY_TEXTS));\n  };\n\n  TuiInputCopyComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiInputCopyComponent,\n    selectors: [[\"tui-input-copy\"]],\n    viewQuery: function TuiInputCopyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function TuiInputCopyComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_has-value\", ctx.hasValue);\n      }\n    },\n    inputs: {\n      successMessage: \"successMessage\",\n      messageDirection: \"messageDirection\",\n      messageMode: \"messageMode\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature(TUI_INPUT_COPY_PROVIDERS), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 7,\n    vars: 10,\n    consts: [[1, \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"invalid\", \"focusable\", \"nativeId\", \"disabled\", \"readOnly\", \"iconContent\", \"value\", \"valueChange\", \"focusedChange\", \"hoveredChange\", \"pressedChange\"], [\"iconContent\", \"\"], [\"hint\", \"\"], [\"automation-id\", \"tui-copy__icon\", \"tuiHintId\", \"not_required\", 1, \"icon\", 3, \"tuiHint\", \"tuiHintDirection\", \"tuiHintMode\", \"src\", \"click\"], [\"polymorpheus-outlet\", \"\", 3, \"content\"]],\n    template: function TuiInputCopyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"tui-primitive-textfield\", 0);\n        ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputCopyComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n          return ctx.onValueChange($event);\n        })(\"focusedChange\", function TuiInputCopyComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n          return ctx.onFocused($event);\n        })(\"hoveredChange\", function TuiInputCopyComponent_Template_tui_primitive_textfield_hoveredChange_0_listener($event) {\n          return ctx.onHovered($event);\n        })(\"pressedChange\", function TuiInputCopyComponent_Template_tui_primitive_textfield_pressedChange_0_listener($event) {\n          return ctx.onPressed($event);\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, TuiInputCopyComponent_ng_template_3_Template, 1, 4, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(5, TuiInputCopyComponent_ng_template_5_Template, 2, 3, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(4);\n\n        ɵngcc0.ɵɵproperty(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.pseudoHovered)(\"pseudoPressed\", ctx.pseudoPressed)(\"invalid\", ctx.computedInvalid)(\"focusable\", ctx.focusable)(\"nativeId\", ctx.nativeId)(\"disabled\", ctx.computedDisabled)(\"readOnly\", ctx.readOnly)(\"iconContent\", !ctx.disabled ? _r0 : null)(\"value\", ctx.value);\n      }\n    },\n    directives: [ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc1.TuiSvgComponent, ɵngcc1.TuiHintDirective, ɵngcc2.PolymorpheusOutletComponent],\n    pipes: [ɵngcc3.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.icon[_ngcontent-%COMP%]{position:relative;cursor:pointer;pointer-events:auto;color:var(--tui-base-06)}[_nghost-%COMP%]:not(._has-value)   .icon[_ngcontent-%COMP%]{pointer-events:none;opacity:var(--tui-disabled-opacity)}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n    changeDetection: 0\n  });\n\n  __decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputCopyComponent.prototype, \"textfield\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputCopyComponent.prototype, \"successMessage\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputCopyComponent.prototype, \"messageDirection\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputCopyComponent.prototype, \"messageMode\", void 0);\n\n  __decorate([HostBinding('class._has-value')], TuiInputCopyComponent.prototype, \"hasValue\", null);\n\n  __decorate([tuiPure], TuiInputCopyComponent.prototype, \"hintText$\", null);\n\n  TuiInputCopyComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(DOCUMENT)), __param(3, Inject(TUI_TEXTFIELD_SIZE)), __param(4, Inject(TUI_COPY_TEXTS))], TuiInputCopyComponent);\n  return TuiInputCopyComponent;\n})();\nvar TuiInputCopyDirective_1;\nlet TuiInputCopyDirective = TuiInputCopyDirective_1 = class TuiInputCopyDirective extends TuiAbstractTextfieldHost {\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n};\n\nTuiInputCopyDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputCopyDirective_BaseFactory;\n  return function TuiInputCopyDirective_Factory(t) {\n    return (ɵTuiInputCopyDirective_BaseFactory || (ɵTuiInputCopyDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputCopyDirective)))(t || TuiInputCopyDirective);\n  };\n}();\n\nTuiInputCopyDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputCopyDirective,\n  selectors: [[\"tui-input-copy\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputCopyDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputCopyModule = /*#__PURE__*/(() => {\n  let TuiInputCopyModule = class TuiInputCopyModule {};\n\n  TuiInputCopyModule.ɵfac = function TuiInputCopyModule_Factory(t) {\n    return new (t || TuiInputCopyModule)();\n  };\n\n  TuiInputCopyModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputCopyModule\n  });\n  TuiInputCopyModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, PolymorpheusModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiNotificationsModule]]\n  });\n  return TuiInputCopyModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputCopyModule, {\n    declarations: function () {\n      return [TuiInputCopyComponent, TuiInputCopyDirective];\n    },\n    imports: function () {\n      return [CommonModule, PolymorpheusModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiNotificationsModule];\n    },\n    exports: function () {\n      return [TuiInputCopyComponent, TuiInputCopyDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TUI_INPUT_COPY_PROVIDERS, TuiInputCopyComponent, TuiInputCopyDirective, TuiInputCopyModule }; //# sourceMappingURL=taiga-ui-kit-components-input-copy.js.map","map":null,"metadata":{},"sourceType":"module"}