{"ast":null,"code":"import { isEdgeOlderThan } from '@taiga-ui/cdk';\n/**\n * TODO: remove \"any\" in new TS version; https://github.com/ng-web-apis/common/pull/6\n */\n\nfunction areCssVarsSupported(cssRef, userAgent) {\n  return cssRef.supports('(--a: 0)') && !isEdgeOlderThan(17, userAgent);\n}\n\nfunction checkFixedPosition(element) {\n  if (!element || typeof getComputedStyle === 'undefined') {\n    return false;\n  }\n\n  const style = getComputedStyle(element);\n  return style.getPropertyValue('position') === 'fixed' || checkFixedPosition(element.parentElement);\n}\n/**\n * Calculates size of safe area on mobile devices (status bars)\n *\n * ATTENTION: Only use in browser environment\n */\n\n\nfunction getSafeAreaSize() {\n  if (!CSS.supports('padding-top: env(safe-area-inset-top)')) {\n    return 0;\n  }\n\n  const div = document.createElement('div');\n  div.style.paddingTop = 'env(safe-area-inset-top)';\n  document.body.appendChild(div);\n  const safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop, 10) || 0;\n  document.body.removeChild(div);\n  return safeAreaSize;\n}\n\nfunction getScreenWidth(documentRef) {\n  return Math.max(documentRef.documentElement.clientWidth, documentRef.defaultView ? documentRef.defaultView.innerWidth : 0);\n}\n\nconst WIDTH_SEARCH = 'width=\"';\nconst HEIGHT_SEARCH = 'height=\"';\nconst START = '<svg';\n\nfunction processIcon(source, name) {\n  if (source.includes(`id=\"${name}\"`)) {\n    return source;\n  }\n\n  const src = source.substring(source.indexOf(START));\n  const attributes = src.substring(0, src.indexOf('>'));\n\n  if (!attributes || !attributes.includes(WIDTH_SEARCH) || !attributes.includes(HEIGHT_SEARCH)) {\n    return `${src.replace(START, `<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"${name}\" xmlns=\"http://www.w3.org/2000/svg\"><svg`)}</g></svg>`;\n  }\n\n  const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);\n  const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);\n  const widthOffset = indexOfWidth + WIDTH_SEARCH.length;\n  const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;\n  const widthString = attributes.substring(widthOffset, attributes.indexOf('\"', widthOffset));\n  const heightString = attributes.substring(heightOffset, attributes.indexOf('\"', heightOffset));\n\n  if (!heightString || !widthString || widthString.includes('%') || heightString.includes('%') || widthString.includes('em') || heightString.includes('em')) {\n    return src.replace(START, `<svg id=\"${name}\"`);\n  }\n\n  const width = parseInt(widthString, 10);\n  const height = parseInt(heightString, 10);\n  return `<g id=\"${name}\" xmlns=\"http://www.w3.org/2000/svg\"><svg  x=\"50%\" y=\"50%\" width=\"${width / 16}em\" height=\"${height / 16}em\" overflow=\"visible\" viewBox=\"0 0 ${width} ${height}\"><svg x=\"${-width / 2}\" y=\"${-height / 2}\">${src}</svg></svg></g>`;\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { areCssVarsSupported, checkFixedPosition, getSafeAreaSize, getScreenWidth, processIcon }; //# sourceMappingURL=taiga-ui-core-utils-dom.js.map","map":null,"metadata":{},"sourceType":"module"}