{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { AbstractTuiNullableControl, isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiHoveredModule, TuiPressedModule } from '@taiga-ui/cdk';\nimport { TuiModeDirective } from '@taiga-ui/core';\nimport { TuiCheckboxComponent, TuiCheckboxModule } from '@taiga-ui/kit/components/checkbox';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from '@taiga-ui/kit/components/checkbox';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@taiga-ui/core';\nconst _c0 = [\"*\"];\nvar TuiCheckboxLabeledComponent_1;\nlet TuiCheckboxLabeledComponent = TuiCheckboxLabeledComponent_1 = class TuiCheckboxLabeledComponent extends AbstractTuiNullableControl {\n  constructor(control, changeDetectorRef, modeDirective) {\n    super(control, changeDetectorRef);\n    this.modeDirective = modeDirective;\n    this.size = 'm';\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get nativeFocusableElement() {\n    return this.checkbox ? this.checkbox.nativeFocusableElement : null;\n  }\n\n  get hostMode() {\n    return this.modeDirective ? this.modeDirective.mode : null;\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onModelChange(value) {\n    this.updateValue(value);\n  }\n\n};\n\nTuiCheckboxLabeledComponent.ɵfac = function TuiCheckboxLabeledComponent_Factory(t) {\n  return new (t || TuiCheckboxLabeledComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TuiModeDirective, 8));\n};\n\nTuiCheckboxLabeledComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiCheckboxLabeledComponent,\n  selectors: [[\"tui-checkbox-labeled\"]],\n  viewQuery: function TuiCheckboxLabeledComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiCheckboxComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TuiCheckboxLabeledComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-size\", ctx.size)(\"data-mode\", ctx.hostMode);\n    }\n  },\n  inputs: {\n    size: \"size\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiCheckboxLabeledComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 12,\n  consts: [[1, \"wrapper\", 3, \"tuiHoveredChange\", \"tuiPressedChange\"], [3, \"disabled\", \"readOnly\", \"focusable\", \"nativeId\", \"pseudoInvalid\", \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"size\", \"ngModel\", \"ngModelChange\", \"focusedChange\"], [1, \"content\"]],\n  template: function TuiCheckboxLabeledComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n      ɵngcc0.ɵɵlistener(\"tuiHoveredChange\", function TuiCheckboxLabeledComponent_Template_label_tuiHoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"tuiPressedChange\", function TuiCheckboxLabeledComponent_Template_label_tuiPressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"tui-checkbox\", 1);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function TuiCheckboxLabeledComponent_Template_tui_checkbox_ngModelChange_1_listener($event) {\n        return ctx.onModelChange($event);\n      })(\"focusedChange\", function TuiCheckboxLabeledComponent_Template_tui_checkbox_focusedChange_1_listener($event) {\n        return ctx.onFocused($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.computedDisabled)(\"readOnly\", ctx.readOnly)(\"focusable\", ctx.focusable)(\"nativeId\", ctx.nativeId)(\"pseudoInvalid\", ctx.computedInvalid)(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.computedHovered)(\"pseudoPressed\", ctx.computedPressed)(\"size\", ctx.size)(\"ngModel\", ctx.value);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"content_disabled\", ctx.computedDisabled);\n    }\n  },\n  directives: [ɵngcc1.TuiHoveredDirective, ɵngcc1.TuiPressedDirective, ɵngcc2.TuiCheckboxComponent, ɵngcc3.NgControlStatus, ɵngcc3.NgModel],\n  styles: [\"[_nghost-%COMP%]{position:relative;display:block;line-height:0}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.wrapper[_ngcontent-%COMP%]{display:inline-flex;max-width:100%;cursor:pointer}._disabled[_nghost-%COMP%]   .wrapper[_ngcontent-%COMP%]{cursor:default}[data-mode=onDark][_nghost-%COMP%]   .wrapper[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}.content[_ngcontent-%COMP%]{font:var(--tui-font-text-s);line-height:1rem;word-wrap:break-word;min-width:0}.content_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}[data-size='m'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{margin-left:.5rem}[data-size='l'][_nghost-%COMP%]   .content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);margin-left:.75rem}\"],\n  changeDetection: 0\n});\n\nTuiCheckboxLabeledComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: TuiModeDirective,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TuiModeDirective]\n  }]\n}];\n\n__decorate([ViewChild(TuiCheckboxComponent)], TuiCheckboxLabeledComponent.prototype, \"checkbox\", void 0);\n\n__decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiCheckboxLabeledComponent.prototype, \"size\", void 0);\n\n__decorate([HostBinding('attr.data-mode')], TuiCheckboxLabeledComponent.prototype, \"hostMode\", null);\n\nTuiCheckboxLabeledComponent = TuiCheckboxLabeledComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Optional()), __param(2, Inject(TuiModeDirective))], TuiCheckboxLabeledComponent);\nlet TuiCheckboxLabeledModule = /*#__PURE__*/(() => {\n  let TuiCheckboxLabeledModule = class TuiCheckboxLabeledModule {};\n\n  TuiCheckboxLabeledModule.ɵfac = function TuiCheckboxLabeledModule_Factory(t) {\n    return new (t || TuiCheckboxLabeledModule)();\n  };\n\n  TuiCheckboxLabeledModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiCheckboxLabeledModule\n  });\n  TuiCheckboxLabeledModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule]]\n  });\n  return TuiCheckboxLabeledModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiCheckboxLabeledModule, {\n    declarations: function () {\n      return [TuiCheckboxLabeledComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule];\n    },\n    exports: function () {\n      return [TuiCheckboxLabeledComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiCheckboxLabeledComponent, TuiCheckboxLabeledModule }; //# sourceMappingURL=taiga-ui-kit-components-checkbox-labeled.js.map","map":null,"metadata":{},"sourceType":"module"}