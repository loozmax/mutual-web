{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, ViewportScroller, CommonModule } from '@angular/common';\nimport { Inject, NgZone, ElementRef, Optional, Component, ChangeDetectionStrategy, Renderer2, Input, Directive, NgModule } from '@angular/core';\nimport { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';\nimport { tuiZoneOptimized, typedFromEvent, preventDefault, stopPropagation, tuiZonefree, POLLING_TIME, TuiDestroyService, TuiLetModule } from '@taiga-ui/cdk';\nimport { tuiFadeIn } from '@taiga-ui/core/animations';\nimport { MODE_PROVIDER } from '@taiga-ui/core/providers';\nimport { TUI_ANIMATION_OPTIONS, TUI_SCROLL_REF, TUI_MODE, TUI_ELEMENT_REF } from '@taiga-ui/core/tokens';\nimport { Observable, merge, fromEvent } from 'rxjs';\nimport { throttleTime, map, startWith, distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators'; // @dynamic\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'rxjs';\n\nfunction TuiScrollControlsComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bars_r1 = ɵngcc0.ɵɵnextContext().tuiLet;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"bar_has-horizontal\", bars_r1[1]);\n    ɵngcc0.ɵɵproperty(\"@tuiFadeIn\", ctx_r2.animation);\n  }\n}\n\nfunction TuiScrollControlsComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵelement(1, \"div\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bars_r1 = ɵngcc0.ɵɵnextContext().tuiLet;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"bar_has-vertical\", bars_r1[0]);\n    ɵngcc0.ɵɵproperty(\"@tuiFadeIn\", ctx_r3.animation);\n  }\n}\n\nfunction TuiScrollControlsComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TuiScrollControlsComponent_ng_container_0_div_1_Template, 2, 3, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, TuiScrollControlsComponent_ng_container_0_div_2_Template, 2, 3, \"div\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const bars_r1 = ctx.tuiLet;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", bars_r1[0]);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", bars_r1[1]);\n  }\n}\n\nlet TuiScrollControlsComponent = /*#__PURE__*/(() => {\n  let TuiScrollControlsComponent = class TuiScrollControlsComponent {\n    constructor(options, ngZone, documentRef, scrollRef, animationFrame$, mode$) {\n      this.options = options;\n      this.ngZone = ngZone;\n      this.documentRef = documentRef;\n      this.scrollRef = scrollRef;\n      this.animationFrame$ = animationFrame$;\n      this.mode$ = mode$;\n      this.refresh$ = this.animationFrame$.pipe(throttleTime(300), map(() => this.scrollbars), startWith([false, false]), distinctUntilChanged((a, b) => a[0] === b[0] && a[1] === b[1]), tuiZoneOptimized(this.ngZone));\n      this.animation = Object.assign({\n        value: ''\n      }, this.options);\n    }\n\n    get scrollbars() {\n      const {\n        clientHeight,\n        scrollHeight,\n        clientWidth,\n        scrollWidth\n      } = this.scrollRef ? this.scrollRef.nativeElement : this.documentRef.documentElement;\n      return [Math.ceil(clientHeight / scrollHeight * 100) < 100, Math.ceil(clientWidth / scrollWidth * 100) < 100];\n    }\n\n  };\n\n  TuiScrollControlsComponent.ɵfac = function TuiScrollControlsComponent_Factory(t) {\n    return new (t || TuiScrollControlsComponent)(ɵngcc0.ɵɵdirectiveInject(TUI_ANIMATION_OPTIONS), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(TUI_SCROLL_REF, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_FRAME), ɵngcc0.ɵɵdirectiveInject(TUI_MODE));\n  };\n\n  TuiScrollControlsComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiScrollControlsComponent,\n    selectors: [[\"tui-scroll-controls\"]],\n    hostBindings: function TuiScrollControlsComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"$.data-mode.attr\", function TuiScrollControlsComponent___data_mode_attr_HostBindingHandler() {\n          return ctx.mode$;\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MODE_PROVIDER])],\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"tuiLet\"], [\"tuiScrollbarWrapper\", \"\", \"class\", \"bar bar_vertical\", 3, \"bar_has-horizontal\", 4, \"ngIf\"], [\"tuiScrollbarWrapper\", \"\", \"class\", \"bar bar_horizontal\", 3, \"bar_has-vertical\", 4, \"ngIf\"], [\"tuiScrollbarWrapper\", \"\", 1, \"bar\", \"bar_vertical\"], [\"tuiScrollbar\", \"vertical\", 1, \"thumb\"], [\"tuiScrollbarWrapper\", \"\", 1, \"bar\", \"bar_horizontal\"], [\"tuiScrollbar\", \"horizontal\", 1, \"thumb\"]],\n    template: function TuiScrollControlsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TuiScrollControlsComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"tuiLet\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.refresh$));\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.TuiLetDirective, ɵngcc2.NgIf, TuiScrollbarWrapperDirective, TuiScrollbarDirective];\n    },\n    pipes: function () {\n      return [ɵngcc2.AsyncPipe];\n    },\n    styles: [\"[_nghost-%COMP%]{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:1;min-width:calc(100% - 1px);min-height:calc(100% - 1px);float:left;margin-right:calc(-100% + 1px);-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:calc(-100% + 1px);margin-inline-end:calc(-100% + 1px);pointer-events:none}.bar[_ngcontent-%COMP%]{position:absolute;right:0;bottom:0;pointer-events:auto}.bar_vertical[_ngcontent-%COMP%]{top:0;width:.875rem}.bar_horizontal[_ngcontent-%COMP%]{left:0;height:.875rem}.bar_has-horizontal[_ngcontent-%COMP%]{bottom:.5rem}.bar_has-vertical[_ngcontent-%COMP%]{right:.5rem}.thumb[_ngcontent-%COMP%]{transition-duration:.15s;transition-timing-function:ease-in-out;position:absolute;border-radius:6.25rem;border:.25rem solid transparent;cursor:pointer;pointer-events:auto;background:var(--tui-text-01);background-clip:content-box;box-sizing:border-box;transition-property:width,height;opacity:.2}.thumb[_ngcontent-%COMP%]:hover{opacity:.24}.thumb[_ngcontent-%COMP%]:active{opacity:.48}[data-mode=onDark][_nghost-%COMP%]   .thumb[_ngcontent-%COMP%]{background-color:var(--tui-text-01-night)}.bar_vertical[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]{right:0;width:.75rem;min-height:1.25rem}.bar_vertical[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]:active, .bar_vertical[_ngcontent-%COMP%]:hover   .thumb[_ngcontent-%COMP%]{width:.875rem}.bar_horizontal[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]{bottom:0;height:.75rem;min-width:1.25rem}.bar_horizontal[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]:active, .bar_horizontal[_ngcontent-%COMP%]:hover   .thumb[_ngcontent-%COMP%]{height:.875rem}\"],\n    data: {\n      animation: [tuiFadeIn]\n    },\n    changeDetection: 0\n  });\n  TuiScrollControlsComponent = __decorate([__param(0, Inject(TUI_ANIMATION_OPTIONS)), __param(1, Inject(NgZone)), __param(2, Inject(DOCUMENT)), __param(3, Optional()), __param(3, Inject(TUI_SCROLL_REF)), __param(4, Inject(ANIMATION_FRAME)), __param(5, Inject(TUI_MODE))], TuiScrollControlsComponent);\n  return TuiScrollControlsComponent;\n})();\nconst MIN_WIDTH = 24; // @dynamic\n\nlet TuiScrollbarDirective = /*#__PURE__*/(() => {\n  let TuiScrollbarDirective = class TuiScrollbarDirective {\n    constructor(ngZone, renderer, destroy$, animationFrame$, wrapper, container, documentRef, windowRef, elementRef, viewportScroller) {\n      this.wrapper = wrapper;\n      this.container = container;\n      this.documentRef = documentRef;\n      this.windowRef = windowRef;\n      this.elementRef = elementRef;\n      this.viewportScroller = viewportScroller;\n      this.tuiScrollbar = 'vertical';\n      const {\n        nativeElement\n      } = this.elementRef;\n      const mousedown$ = typedFromEvent(nativeElement, 'mousedown');\n      const mousemove$ = typedFromEvent(this.documentRef, 'mousemove');\n      const mouseup$ = typedFromEvent(this.documentRef, 'mouseup');\n      const mousedownWrapper$ = typedFromEvent(wrapper.nativeElement, 'mousedown');\n      merge(mousedownWrapper$.pipe(preventDefault(), map(event => this.getScrolled(event, 0.5, 0.5))), mousedown$.pipe(preventDefault(), stopPropagation(), switchMap(event => {\n        const rect = nativeElement.getBoundingClientRect();\n        const vertical = getOffsetVertical(event, rect);\n        const horizontal = getOffsetHorizontal(event, rect);\n        return mousemove$.pipe(map(event => this.getScrolled(event, vertical, horizontal)), takeUntil(mouseup$));\n      }))).pipe(takeUntil(destroy$), tuiZonefree(ngZone)).subscribe(([scrollTop, scrollLeft]) => {\n        const [x, y] = this.viewportScroller.getScrollPosition();\n\n        if (!this.container) {\n          this.viewportScroller.scrollToPosition([this.tuiScrollbar === 'vertical' ? x : scrollLeft, this.tuiScrollbar === 'vertical' ? scrollTop : y]);\n          return;\n        }\n\n        if (this.tuiScrollbar === 'vertical') {\n          renderer.setProperty(this.container.nativeElement, 'scrollTop', scrollTop);\n        } else {\n          renderer.setProperty(this.container.nativeElement, 'scrollLeft', scrollLeft);\n        }\n      });\n      merge(fromEvent(this.container ? this.container.nativeElement : this.windowRef, 'scroll'), animationFrame$.pipe(throttleTime(POLLING_TIME))).pipe(takeUntil(destroy$), tuiZonefree(ngZone)).subscribe(() => {\n        if (this.tuiScrollbar === 'vertical') {\n          renderer.setStyle(nativeElement, 'top', `${this.thumb * 100}%`);\n          renderer.setStyle(nativeElement, 'height', `${this.view * 100}%`);\n        } else {\n          renderer.setStyle(nativeElement, 'left', `${this.thumb * 100}%`);\n          renderer.setStyle(nativeElement, 'width', `${this.view * 100}%`);\n        }\n      });\n    }\n\n    get scrolled() {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight,\n        scrollLeft,\n        scrollWidth,\n        clientWidth\n      } = this.computedContainer;\n      return this.tuiScrollbar === 'vertical' ? scrollTop / (scrollHeight - clientHeight) : scrollLeft / (scrollWidth - clientWidth);\n    }\n\n    get compensation() {\n      const {\n        clientHeight,\n        scrollHeight,\n        clientWidth,\n        scrollWidth\n      } = this.computedContainer;\n\n      if (clientHeight * clientHeight / scrollHeight > MIN_WIDTH && this.tuiScrollbar === 'vertical' || clientWidth * clientWidth / scrollWidth > MIN_WIDTH && this.tuiScrollbar === 'horizontal') {\n        return 0;\n      }\n\n      return this.tuiScrollbar === 'vertical' ? MIN_WIDTH / clientHeight : MIN_WIDTH / clientWidth;\n    }\n\n    get thumb() {\n      const compensation = this.compensation || this.view;\n      return this.scrolled * (1 - compensation);\n    }\n\n    get view() {\n      const {\n        clientHeight,\n        scrollHeight,\n        clientWidth,\n        scrollWidth\n      } = this.computedContainer;\n      return this.tuiScrollbar === 'vertical' ? Math.ceil(clientHeight / scrollHeight * 100) / 100 : Math.ceil(clientWidth / scrollWidth * 100) / 100;\n    }\n\n    get computedContainer() {\n      return this.container ? this.container.nativeElement : this.documentRef.scrollingElement;\n    }\n\n    getScrolled({\n      clientY,\n      clientX\n    }, offsetVertical, offsetHorizontal) {\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.elementRef.nativeElement;\n      const {\n        top,\n        left,\n        width,\n        height\n      } = this.wrapper.nativeElement.getBoundingClientRect();\n      const maxTop = this.computedContainer.scrollHeight - height;\n      const maxLeft = this.computedContainer.scrollWidth - width;\n      const scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);\n      const scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);\n      return [maxTop * scrolledTop, maxLeft * scrolledLeft];\n    }\n\n  };\n\n  TuiScrollbarDirective.ɵfac = function TuiScrollbarDirective_Factory(t) {\n    return new (t || TuiScrollbarDirective)(ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService), ɵngcc0.ɵɵdirectiveInject(ANIMATION_FRAME), ɵngcc0.ɵɵdirectiveInject(TUI_ELEMENT_REF), ɵngcc0.ɵɵdirectiveInject(TUI_SCROLL_REF, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(WINDOW), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(ViewportScroller));\n  };\n\n  TuiScrollbarDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiScrollbarDirective,\n    selectors: [[\"\", \"tuiScrollbar\", \"\"]],\n    inputs: {\n      tuiScrollbar: \"tuiScrollbar\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService])]\n  });\n\n  __decorate([Input()], TuiScrollbarDirective.prototype, \"tuiScrollbar\", void 0);\n\n  TuiScrollbarDirective = __decorate([__param(0, Inject(NgZone)), __param(1, Inject(Renderer2)), __param(2, Inject(TuiDestroyService)), __param(3, Inject(ANIMATION_FRAME)), __param(4, Inject(TUI_ELEMENT_REF)), __param(5, Optional()), __param(5, Inject(TUI_SCROLL_REF)), __param(6, Inject(DOCUMENT)), __param(7, Inject(WINDOW)), __param(8, Inject(ElementRef)), __param(9, Inject(ViewportScroller))], TuiScrollbarDirective);\n  return TuiScrollbarDirective;\n})();\n\nfunction getOffsetVertical({\n  clientY\n}, {\n  top,\n  height\n}) {\n  return (clientY - top) / height;\n}\n\nfunction getOffsetHorizontal({\n  clientX\n}, {\n  left,\n  width\n}) {\n  return (clientX - left) / width;\n}\n\nlet TuiScrollbarWrapperDirective = /*#__PURE__*/(() => {\n  let TuiScrollbarWrapperDirective = class TuiScrollbarWrapperDirective {};\n\n  TuiScrollbarWrapperDirective.ɵfac = function TuiScrollbarWrapperDirective_Factory(t) {\n    return new (t || TuiScrollbarWrapperDirective)();\n  };\n\n  TuiScrollbarWrapperDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiScrollbarWrapperDirective,\n    selectors: [[\"\", \"tuiScrollbarWrapper\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: TUI_ELEMENT_REF,\n      useExisting: ElementRef\n    }])]\n  });\n  return TuiScrollbarWrapperDirective;\n})();\nlet TuiScrollControlsModule = /*#__PURE__*/(() => {\n  let TuiScrollControlsModule = class TuiScrollControlsModule {};\n\n  TuiScrollControlsModule.ɵfac = function TuiScrollControlsModule_Factory(t) {\n    return new (t || TuiScrollControlsModule)();\n  };\n\n  TuiScrollControlsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiScrollControlsModule\n  });\n  TuiScrollControlsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiLetModule]]\n  });\n  return TuiScrollControlsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiScrollControlsModule, {\n    declarations: function () {\n      return [TuiScrollbarDirective, TuiScrollbarWrapperDirective, TuiScrollControlsComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiLetModule];\n    },\n    exports: function () {\n      return [TuiScrollControlsComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiScrollControlsComponent, TuiScrollControlsModule, TuiScrollbarDirective, TuiScrollbarWrapperDirective as ɵa }; //# sourceMappingURL=taiga-ui-core-components-scroll-controls.js.map","map":null,"metadata":{},"sourceType":"module"}