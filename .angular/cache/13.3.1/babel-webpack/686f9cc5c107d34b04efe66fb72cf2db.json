{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Component, ChangeDetectionStrategy, forwardRef, Directive, NgModule } from '@angular/core';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { AbstractTuiControl, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiLetModule } from '@taiga-ui/cdk';\nimport { TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiHintControllerDirective, TUI_HINT_WATCHED_CONTROLLER, TUI_MODE, TuiPrimitiveTextfieldComponent, HINT_CONTROLLER_PROVIDER, MODE_PROVIDER, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { TUI_PASSWORD_TEXTS } from '@taiga-ui/kit/tokens';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc3 from '@taiga-ui/cdk';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@angular/forms';\nimport * as ɵngcc6 from 'rxjs';\n\nfunction TuiInputPasswordComponent_ng_template_3_span_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-svg\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiInputPasswordComponent_ng_template_3_span_0_ng_template_1_Template_tui_svg_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r8.togglePasswordVisibility();\n    });\n    ɵngcc0.ɵɵpipe(1, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const icon_r7 = ctx.$implicit;\n    const texts_r3 = ɵngcc0.ɵɵnextContext().tuiLet;\n\n    const _r5 = ɵngcc0.ɵɵreference(3);\n\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"tuiHint\", texts_r3[0] && texts_r3[1] && _r5)(\"tuiHintDirection\", ctx_r4.hintController.direction)(\"tuiHintMode\", ɵngcc0.ɵɵpipeBind1(1, 4, ctx_r4.computedMode$))(\"src\", icon_r7);\n  }\n}\n\nfunction TuiInputPasswordComponent_ng_template_3_span_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const texts_r3 = ɵngcc0.ɵɵnextContext().tuiLet;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r6.isPasswordHidden ? texts_r3[0] : texts_r3[1], \" \");\n  }\n}\n\nfunction TuiInputPasswordComponent_ng_template_3_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 4);\n    ɵngcc0.ɵɵtemplate(1, TuiInputPasswordComponent_ng_template_3_span_0_ng_template_1_Template, 2, 6, \"ng-template\");\n    ɵngcc0.ɵɵtemplate(2, TuiInputPasswordComponent_ng_template_3_span_0_ng_template_2_Template, 1, 1, \"ng-template\", 5, 6, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"content\", ctx_r2.icon)(\"context\", ctx_r2.context);\n  }\n}\n\nfunction TuiInputPasswordComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TuiInputPasswordComponent_ng_template_3_span_0_Template, 4, 2, \"span\", 3);\n    ɵngcc0.ɵɵpipe(1, \"async\");\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"tuiLet\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r1.passwordTexts$));\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\n\nconst PASSWORD_ICON_HIDE = ({\n  $implicit\n}) => $implicit === 's' ? 'tuiIconEyeClosed' : 'tuiIconHideLarge';\n\nconst PASSWORD_ICON_SHOW = ({\n  $implicit\n}) => $implicit === 's' ? 'tuiIconEyeOpen' : 'tuiIconShowLarge';\n/** Default values for the input password options. */\n\n\nconst TUI_INPUT_PASSWORD_DEFAULT_OPTIONS = {\n  icons: {\n    hide: PASSWORD_ICON_HIDE,\n    show: PASSWORD_ICON_SHOW\n  }\n};\nconst TUI_INPUT_PASSWORD_OPTIONS = new InjectionToken('Default parameters for input password component', {\n  factory: () => TUI_INPUT_PASSWORD_DEFAULT_OPTIONS\n});\n\nconst tuiInputPasswordOptionsProvider = options => ({\n  provide: TUI_INPUT_PASSWORD_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS), options)\n});\n\nvar TuiInputPasswordComponent_1; // @dynamic\n\nlet TuiInputPasswordComponent = TuiInputPasswordComponent_1 = class TuiInputPasswordComponent extends AbstractTuiControl {\n  constructor(control, changeDetectorRef, textfieldSize, passwordTexts$, options, hintController, mode$) {\n    super(control, changeDetectorRef);\n    this.textfieldSize = textfieldSize;\n    this.passwordTexts$ = passwordTexts$;\n    this.options = options;\n    this.hintController = hintController;\n    this.mode$ = mode$;\n    this.isPasswordHidden = true;\n    this.computedMode$ = combineLatest([this.mode$.pipe(map(val => val === 'onDark' ? 'onDark' : null)), this.hintController.change$.pipe(startWith(null), map(() => this.hintController.mode))]).pipe(map(([mode, controller]) => controller || mode), startWith(null));\n  }\n\n  get nativeFocusableElement() {\n    return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;\n  }\n\n  get focused() {\n    return !!this.textfield && this.textfield.focused;\n  }\n\n  get icon() {\n    return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;\n  }\n\n  get context() {\n    return this.getContext(this.textfieldSize.size);\n  }\n\n  get inputType() {\n    return this.isPasswordHidden || !this.interactive ? 'password' : 'text';\n  }\n\n  onValueChange(textValue) {\n    this.updateValue(textValue);\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  togglePasswordVisibility() {\n    this.isPasswordHidden = !this.isPasswordHidden;\n  }\n\n  getFallbackValue() {\n    return '';\n  }\n\n  getContext($implicit) {\n    return {\n      $implicit\n    };\n  }\n\n};\n\nTuiInputPasswordComponent.ɵfac = function TuiInputPasswordComponent_Factory(t) {\n  return new (t || TuiInputPasswordComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵngcc0.ɵɵdirectiveInject(TUI_PASSWORD_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_INPUT_PASSWORD_OPTIONS), ɵngcc0.ɵɵdirectiveInject(TUI_HINT_WATCHED_CONTROLLER), ɵngcc0.ɵɵdirectiveInject(TUI_MODE));\n};\n\nTuiInputPasswordComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiInputPasswordComponent,\n  selectors: [[\"tui-input-password\"]],\n  viewQuery: function TuiInputPasswordComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiInputPasswordComponent_1)\n  }, {\n    provide: AbstractTuiControl,\n    useExisting: forwardRef(() => TuiInputPasswordComponent_1)\n  }, HINT_CONTROLLER_PROVIDER, MODE_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 5,\n  vars: 12,\n  consts: [[1, \"textfield\", 3, \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"invalid\", \"focusable\", \"nativeId\", \"tuiTextfieldType\", \"disabled\", \"readOnly\", \"iconContent\", \"value\", \"valueChange\", \"focusedChange\", \"hoveredChange\", \"pressedChange\"], [3, \"polymorpheus\"], [\"iconContent\", \"polymorpheus\"], [\"polymorpheus-outlet\", \"\", 3, \"content\", \"context\", 4, \"tuiLet\"], [\"polymorpheus-outlet\", \"\", 3, \"content\", \"context\"], [\"polymorpheus\", \"\"], [\"hintContent\", \"polymorpheus\"], [\"automation-id\", \"tui-password__icon\", \"tuiHintId\", \"not_required\", 1, \"icon\", 3, \"tuiHint\", \"tuiHintDirection\", \"tuiHintMode\", \"src\", \"click\"]],\n  template: function TuiInputPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵelementStart(0, \"tui-primitive-textfield\", 0);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputPasswordComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"focusedChange\", function TuiInputPasswordComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n        return ctx.onFocused($event);\n      })(\"hoveredChange\", function TuiInputPasswordComponent_Template_tui_primitive_textfield_hoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"pressedChange\", function TuiInputPasswordComponent_Template_tui_primitive_textfield_pressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      });\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, TuiInputPasswordComponent_ng_template_3_Template, 2, 3, \"ng-template\", 1, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(4);\n\n      ɵngcc0.ɵɵproperty(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.pseudoHovered)(\"pseudoPressed\", ctx.pseudoPressed)(\"invalid\", ctx.computedInvalid)(\"focusable\", ctx.focusable)(\"nativeId\", ctx.nativeId)(\"tuiTextfieldType\", ctx.inputType)(\"disabled\", ctx.computedDisabled)(\"readOnly\", ctx.readOnly)(\"iconContent\", ctx.interactive ? _r0 : null)(\"value\", ctx.value);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"polymorpheus\", ctx.type);\n    }\n  },\n  directives: [ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc1.TuiTextfieldTypeDirective, ɵngcc2.PolymorpheusTemplate, ɵngcc3.TuiLetDirective, ɵngcc2.PolymorpheusOutletComponent, ɵngcc1.TuiSvgComponent, ɵngcc1.TuiHintDirective],\n  pipes: [ɵngcc4.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.icon[_ngcontent-%COMP%]{cursor:pointer;pointer-events:auto}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n  changeDetection: 0\n});\n\nTuiInputPasswordComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: TuiTextfieldSizeDirective,\n  decorators: [{\n    type: Inject,\n    args: [TUI_TEXTFIELD_SIZE]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TUI_PASSWORD_TEXTS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_INPUT_PASSWORD_OPTIONS]\n  }]\n}, {\n  type: TuiHintControllerDirective,\n  decorators: [{\n    type: Inject,\n    args: [TUI_HINT_WATCHED_CONTROLLER]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TUI_MODE]\n  }]\n}];\n\n__decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputPasswordComponent.prototype, \"textfield\", void 0);\n\n__decorate([tuiPure], TuiInputPasswordComponent.prototype, \"getContext\", null);\n\nTuiInputPasswordComponent = TuiInputPasswordComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_TEXTFIELD_SIZE)), __param(3, Inject(TUI_PASSWORD_TEXTS)), __param(4, Inject(TUI_INPUT_PASSWORD_OPTIONS)), __param(5, Inject(TUI_HINT_WATCHED_CONTROLLER)), __param(6, Inject(TUI_MODE))], TuiInputPasswordComponent);\nvar TuiInputPasswordDirective_1;\nlet TuiInputPasswordDirective = TuiInputPasswordDirective_1 = class TuiInputPasswordDirective extends TuiAbstractTextfieldHost {\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n  process(input) {\n    this.input = input;\n  }\n\n  ngDoCheck() {\n    if (this.input) {\n      this.input.type = this.host.isPasswordHidden ? 'password' : 'text';\n    }\n  }\n\n};\n\nTuiInputPasswordDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵTuiInputPasswordDirective_BaseFactory;\n  return function TuiInputPasswordDirective_Factory(t) {\n    return (ɵTuiInputPasswordDirective_BaseFactory || (ɵTuiInputPasswordDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TuiInputPasswordDirective)))(t || TuiInputPasswordDirective);\n  };\n}();\n\nTuiInputPasswordDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputPasswordDirective,\n  selectors: [[\"tui-input-password\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputPasswordDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nlet TuiInputPasswordModule = /*#__PURE__*/(() => {\n  let TuiInputPasswordModule = class TuiInputPasswordModule {};\n\n  TuiInputPasswordModule.ɵfac = function TuiInputPasswordModule_Factory(t) {\n    return new (t || TuiInputPasswordModule)();\n  };\n\n  TuiInputPasswordModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputPasswordModule\n  });\n  TuiInputPasswordModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiLetModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputPasswordModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputPasswordModule, {\n    declarations: function () {\n      return [TuiInputPasswordComponent, TuiInputPasswordDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, PolymorpheusModule, TuiLetModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule];\n    },\n    exports: function () {\n      return [TuiInputPasswordComponent, TuiInputPasswordDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PASSWORD_ICON_HIDE, PASSWORD_ICON_SHOW, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS, TUI_INPUT_PASSWORD_OPTIONS, TuiInputPasswordComponent, TuiInputPasswordDirective, TuiInputPasswordModule, tuiInputPasswordOptionsProvider }; //# sourceMappingURL=taiga-ui-kit-components-input-password.js.map","map":null,"metadata":{},"sourceType":"module"}