{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostListener, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, isNativeFocused, TuiTime, TUI_STRICT_MATCHER, setNativeFocused, tuiDefaultProp, tuiPure, TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';\nimport { TuiPrimitiveTextfieldComponent, TuiDataListModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule } from '@taiga-ui/core';\nimport { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { TUI_TIME_TEXTS } from '@taiga-ui/kit/tokens';\nimport { tuiCreateTimeMask, tuiCreateAutoCorrectedTimePipe } from '@taiga-ui/kit/utils/mask';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';\nimport { CommonModule } from '@angular/common';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport { TextMaskModule } from 'angular2-text-mask'; // TODO: remove in ivy compilation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/kit/directives';\nimport * as ɵngcc3 from 'angular2-text-mask';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@angular/forms';\nimport * as ɵngcc6 from 'rxjs';\n\nfunction TuiInputTimeComponent_ng_template_4_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function TuiInputTimeComponent_ng_template_4_button_1_Template_button_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const item_r3 = restoredCtx.$implicit;\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r4.onMenuClick(item_r3);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"size\", ctx_r2.itemSize)(\"disabled\", ctx_r2.disabledItemHandler(item_r3));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r3, \" \");\n  }\n}\n\nfunction TuiInputTimeComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tui-data-list\", 3);\n    ɵngcc0.ɵɵtemplate(1, TuiInputTimeComponent_ng_template_4_button_1_Template, 2, 3, \"button\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.filtered);\n  }\n}\n\nconst _c0 = [\"*\"];\n\nconst INPUT_TIME_ICON = ({\n  $implicit\n}) => $implicit === 's' ? 'tuiIconTime' : 'tuiIconTimeLarge';\n\nconst TUI_INPUT_TIME_DEFAULT_OPTIONS = {\n  icon: INPUT_TIME_ICON,\n  mode: 'HH:MM',\n  postfix: '',\n  maxValues: MAX_TIME_VALUES,\n  itemSize: 'm'\n};\nconst TUI_INPUT_TIME_OPTIONS = new InjectionToken('Default parameters for input time component', {\n  factory: () => TUI_INPUT_TIME_DEFAULT_OPTIONS\n});\n\nconst tuiInputTimeOptionsProvider = options => ({\n  provide: TUI_INPUT_TIME_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_INPUT_TIME_DEFAULT_OPTIONS), options)\n});\n\nvar TuiInputTimeComponent_1; // @dynamic\n\nlet TuiInputTimeComponent = TuiInputTimeComponent_1 = class TuiInputTimeComponent extends AbstractTuiNullableControl {\n  constructor(control, changeDetectorRef, timeTexts$, options) {\n    super(control, changeDetectorRef);\n    this.timeTexts$ = timeTexts$;\n    this.options = options;\n    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n    this.items = [];\n    this.itemSize = this.options.itemSize;\n    this.strict = false;\n    this.mode = this.options.mode;\n    this.postfix = this.options.postfix;\n    this.open = false;\n  }\n\n  get nativeFocusableElement() {\n    return this.textfield ? this.textfield.nativeFocusableElement : null;\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get filtered() {\n    return this.filter(this.items, this.mode, this.computedSearch);\n  }\n\n  get textMaskOptions() {\n    return this.calculateMask(this.mode);\n  }\n\n  get computedValue() {\n    return this.value ? this.value.toString(this.mode) : this.nativeValue;\n  }\n\n  get computedSearch() {\n    return this.computedValue.length !== this.mode.length ? this.computedValue : '';\n  }\n\n  get innerPseudoFocused() {\n    if (this.pseudoFocused === false) {\n      return false;\n    }\n\n    if (this.open || this.computedFocused) {\n      return true;\n    }\n\n    return null;\n  }\n\n  get icon() {\n    return this.options.icon;\n  }\n\n  get nativeValue() {\n    return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n  }\n\n  set nativeValue(value) {\n    if (!this.nativeFocusableElement) {\n      return;\n    }\n\n    this.nativeFocusableElement.value = value;\n  }\n\n  getFiller$(mode) {\n    return this.timeTexts$.pipe(map(texts => texts[mode]));\n  }\n\n  onClick() {\n    this.open = !this.open;\n  }\n\n  onValueChange(value) {\n    this.open = !!this.items.length;\n\n    if (this.control) {\n      this.control.updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n\n    const match = this.getMatch(value);\n\n    if (match !== undefined) {\n      this.updateValue(match);\n      return;\n    }\n\n    if (value.length !== this.mode.length) {\n      this.updateValue(null);\n      return;\n    }\n\n    const time = TuiTime.fromString(value);\n    this.updateValue(this.strict ? this.findNearestTimeFromItems(time) : time);\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n\n    if (focused || this.value !== null || this.nativeValue === '' || this.mode === 'HH:MM') {\n      return;\n    }\n\n    const parsedTime = TuiTime.fromString(this.nativeValue);\n    this.updateValue(parsedTime);\n    setTimeout(() => {\n      if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {\n        this.nativeValue = this.nativeValue.slice(0, -1);\n      }\n    });\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onArrowUp(event) {\n    if (this.items.length) {\n      return;\n    }\n\n    this.processArrow(event, 1);\n  }\n\n  onArrowDown(event) {\n    if (this.items.length) {\n      return;\n    }\n\n    this.processArrow(event, -1);\n  }\n\n  onMenuClick(item) {\n    this.focusInput();\n    this.updateValue(item);\n  }\n\n  onOpen(open) {\n    this.open = open;\n  }\n\n  writeValue(value) {\n    super.writeValue(value);\n    this.nativeValue = value ? this.computedValue : '';\n  }\n\n  calculateMask(mode) {\n    return {\n      mask: tuiCreateTimeMask(mode, this.options.maxValues),\n      pipe: tuiCreateAutoCorrectedTimePipe(mode, this.options.maxValues),\n      guide: false\n    };\n  }\n\n  filter(items, mode, search) {\n    return items.filter(item => item.toString(mode).includes(search));\n  }\n\n  findNearestTimeFromItems(value) {\n    return this.items.reduce((previous, current) => Math.abs(current.toAbsoluteMilliseconds() - value.toAbsoluteMilliseconds()) < Math.abs(previous.toAbsoluteMilliseconds() - value.toAbsoluteMilliseconds()) ? current : previous);\n  }\n\n  getMatch(value) {\n    return this.items.find(item => TUI_STRICT_MATCHER(item, value));\n  }\n\n  close() {\n    this.open = false;\n  }\n\n  processArrow(event, shift) {\n    const {\n      target\n    } = event; // TODO: iframe warning\n\n    if (this.readOnly || !(target instanceof HTMLInputElement)) {\n      return;\n    }\n\n    const selectionStart = target.selectionStart || 0;\n    this.shiftTime(this.calculateShift(selectionStart, shift));\n    target.setSelectionRange(selectionStart, selectionStart);\n    event.preventDefault();\n  }\n\n  calculateShift(selectionStart, shift) {\n    if (selectionStart <= 2) {\n      return {\n        hours: shift\n      };\n    }\n\n    if (selectionStart <= 5) {\n      return {\n        minutes: shift\n      };\n    }\n\n    if (selectionStart <= 8) {\n      return {\n        seconds: shift\n      };\n    }\n\n    return {\n      ms: shift\n    };\n  }\n\n  shiftTime(shift) {\n    if (this.value === null) {\n      return;\n    }\n\n    const increasedTime = this.value.shift(shift); // Manual update so we can set caret position properly\n\n    this.nativeValue = increasedTime.toString(this.mode);\n    this.updateValue(increasedTime);\n  }\n\n  focusInput(preventScroll = false) {\n    if (this.nativeFocusableElement) {\n      setNativeFocused(this.nativeFocusableElement, true, preventScroll);\n      this.close();\n    }\n  }\n\n};\n\nTuiInputTimeComponent.ɵfac = function TuiInputTimeComponent_Factory(t) {\n  return new (t || TuiInputTimeComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_TIME_TEXTS), ɵngcc0.ɵɵdirectiveInject(TUI_INPUT_TIME_OPTIONS));\n};\n\nTuiInputTimeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiInputTimeComponent,\n  selectors: [[\"tui-input-time\"]],\n  viewQuery: function TuiInputTimeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n    }\n  },\n  hostBindings: function TuiInputTimeComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TuiInputTimeComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  inputs: {\n    disabledItemHandler: \"disabledItemHandler\",\n    items: \"items\",\n    itemSize: \"itemSize\",\n    strict: \"strict\",\n    mode: \"mode\",\n    postfix: \"postfix\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiInputTimeComponent_1)\n  }, FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 6,\n  vars: 18,\n  consts: [[1, \"wrapper\", 3, \"canOpen\", \"content\", \"open\", \"openChange\", \"focusedChange\"], [\"tuiValueAccessor\", \"\", \"tuiTextfieldInputMode\", \"numeric\", 1, \"textfield\", 3, \"filler\", \"nativeId\", \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"invalid\", \"focusable\", \"disabled\", \"readOnly\", \"textMask\", \"iconContent\", \"value\", \"postfix\", \"valueChange\", \"hoveredChange\", \"keydown.arrowUp\", \"keydown.arrowDown\"], [\"dropdownContent\", \"\"], [\"automation-id\", \"tui-input-time__dropdown\"], [\"tuiOption\", \"\", \"automation-id\", \"tui-input-time__item\", 3, \"size\", \"disabled\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"tuiOption\", \"\", \"automation-id\", \"tui-input-time__item\", 3, \"size\", \"disabled\", \"click\"]],\n  template: function TuiInputTimeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n      ɵngcc0.ɵɵlistener(\"openChange\", function TuiInputTimeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n        return ctx.onOpen($event);\n      })(\"focusedChange\", function TuiInputTimeComponent_Template_tui_hosted_dropdown_focusedChange_0_listener($event) {\n        return ctx.onFocused($event);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"tui-primitive-textfield\", 1);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputTimeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"hoveredChange\", function TuiInputTimeComponent_Template_tui_primitive_textfield_hoveredChange_1_listener($event) {\n        return ctx.onHovered($event);\n      })(\"keydown.arrowUp\", function TuiInputTimeComponent_Template_tui_primitive_textfield_keydown_arrowUp_1_listener($event) {\n        return ctx.onArrowUp($event);\n      })(\"keydown.arrowDown\", function TuiInputTimeComponent_Template_tui_primitive_textfield_keydown_arrowDown_1_listener($event) {\n        return ctx.onArrowDown($event);\n      });\n      ɵngcc0.ɵɵpipe(2, \"async\");\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵtemplate(4, TuiInputTimeComponent_ng_template_4_Template, 2, 1, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(5);\n\n      ɵngcc0.ɵɵproperty(\"canOpen\", ctx.interactive && !!ctx.filtered.length)(\"content\", _r0)(\"open\", ctx.interactive && ctx.open && !!ctx.filtered.length);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"filler\", ɵngcc0.ɵɵpipeBind1(2, 16, ctx.getFiller$(ctx.mode)))(\"nativeId\", ctx.nativeId)(\"pseudoFocused\", ctx.innerPseudoFocused)(\"pseudoHovered\", ctx.pseudoHovered)(\"pseudoPressed\", ctx.pseudoPressed)(\"invalid\", ctx.computedInvalid)(\"focusable\", ctx.focusable)(\"disabled\", ctx.disabled)(\"readOnly\", ctx.readOnly)(\"textMask\", ctx.textMaskOptions)(\"iconContent\", ctx.icon)(\"value\", ctx.computedValue)(\"postfix\", ctx.postfix);\n    }\n  },\n  directives: [ɵngcc1.TuiHostedDropdownComponent, ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc2.TuiValueAccessorDirective, ɵngcc1.TuiTextfieldInputModeDirective, ɵngcc3.MaskedInputDirective, ɵngcc1.TuiDataListComponent, ɵngcc4.NgForOf, ɵngcc1.TuiOptionComponent],\n  pipes: [ɵngcc4.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.wrapper[_ngcontent-%COMP%]{display:block;border-radius:inherit}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n  changeDetection: 0\n});\n\nTuiInputTimeComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TUI_TIME_TEXTS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_INPUT_TIME_OPTIONS]\n  }]\n}];\n\n__decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputTimeComponent.prototype, \"textfield\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputTimeComponent.prototype, \"disabledItemHandler\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputTimeComponent.prototype, \"items\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputTimeComponent.prototype, \"itemSize\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputTimeComponent.prototype, \"strict\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputTimeComponent.prototype, \"mode\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputTimeComponent.prototype, \"postfix\", void 0);\n\n__decorate([tuiPure], TuiInputTimeComponent.prototype, \"getFiller$\", null);\n\n__decorate([HostListener('click')], TuiInputTimeComponent.prototype, \"onClick\", null);\n\n__decorate([tuiPure], TuiInputTimeComponent.prototype, \"calculateMask\", null);\n\n__decorate([tuiPure], TuiInputTimeComponent.prototype, \"filter\", null);\n\nTuiInputTimeComponent = TuiInputTimeComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_TIME_TEXTS)), __param(3, Inject(TUI_INPUT_TIME_OPTIONS))], TuiInputTimeComponent);\nlet TuiInputTimeModule = /*#__PURE__*/(() => {\n  let TuiInputTimeModule = class TuiInputTimeModule {};\n\n  TuiInputTimeModule.ɵfac = function TuiInputTimeModule_Factory(t) {\n    return new (t || TuiInputTimeModule)();\n  };\n\n  TuiInputTimeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputTimeModule\n  });\n  TuiInputTimeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TextMaskModule, TuiDataListModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputTimeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputTimeModule, {\n    declarations: function () {\n      return [TuiInputTimeComponent];\n    },\n    imports: function () {\n      return [CommonModule, TextMaskModule, TuiDataListModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule];\n    },\n    exports: function () {\n      return [TuiInputTimeComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INPUT_TIME_ICON, TUI_INPUT_TIME_DEFAULT_OPTIONS, TUI_INPUT_TIME_OPTIONS, TuiInputTimeComponent, TuiInputTimeModule, tuiInputTimeOptionsProvider }; //# sourceMappingURL=taiga-ui-kit-components-input-time.js.map","map":null,"metadata":{},"sourceType":"module"}