{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, Pipe, Injector, NgModule } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\nimport { NgControl, FormArrayName, FormGroupName, FormGroupDirective } from '@angular/forms';\nimport { TuiValidationError, tuiPure } from '@taiga-ui/cdk';\nimport { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';\nimport { merge, EMPTY, of, isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nconst EMPTY_RECORD = {}; // @dynamic\n\nlet TuiFieldErrorPipe = /*#__PURE__*/(() => {\n  let TuiFieldErrorPipe = class TuiFieldErrorPipe {\n    constructor(ngControl, formArrayName, formGroupName, formGroup, validationErrors) {\n      this.ngControl = ngControl;\n      this.formArrayName = formArrayName;\n      this.formGroupName = formGroupName;\n      this.formGroup = formGroup;\n      this.validationErrors = validationErrors;\n      this.order = [];\n\n      if (this.ngControl && !this.ngControl.valueAccessor) {\n        this.ngControl.valueAccessor = this;\n      }\n    }\n\n    transform(order) {\n      this.order = order;\n      return this.computedError;\n    }\n\n    get change$() {\n      var _a, _b;\n\n      return merge(((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges) || EMPTY, ((_b = this.control) === null || _b === void 0 ? void 0 : _b.statusChanges) || EMPTY);\n    }\n\n    get computedError() {\n      return this.invalid && this.touched && this.error || of(null);\n    }\n\n    registerOnChange() {}\n\n    registerOnTouched() {}\n\n    setDisabledState() {}\n\n    writeValue() {}\n\n    get error() {\n      const {\n        errorId\n      } = this;\n\n      if (!errorId) {\n        return null;\n      }\n\n      const firstError = this.controlErrors[errorId];\n      const errorContent = this.validationErrors[errorId];\n      return this.getError(firstError, errorContent);\n    }\n\n    get invalid() {\n      var _a;\n\n      return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid);\n    }\n\n    get touched() {\n      var _a;\n\n      return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.touched);\n    }\n\n    get control() {\n      var _a, _b, _c, _d;\n\n      return ((_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.control) || ((_b = this.formArrayName) === null || _b === void 0 ? void 0 : _b.control) || ((_c = this.formGroupName) === null || _c === void 0 ? void 0 : _c.control) || ((_d = this.formGroup) === null || _d === void 0 ? void 0 : _d.control) || null;\n    }\n\n    get errorId() {\n      return this.getErrorId(this.order, this.controlErrors);\n    }\n\n    get controlErrors() {\n      var _a;\n\n      return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) || EMPTY_RECORD;\n    }\n\n    getErrorId(order, controlErrors) {\n      const id = order === null || order === void 0 ? void 0 : order.find(errorId => controlErrors[errorId]);\n      const fallback = Object.keys(controlErrors)[0];\n      return id || fallback || '';\n    }\n\n    getError(firstError, errorContent) {\n      if (firstError instanceof TuiValidationError) {\n        return of(firstError);\n      }\n\n      if (errorContent === undefined && typeof firstError === 'string') {\n        return of(new TuiValidationError(firstError));\n      }\n\n      if (isObservable(errorContent)) {\n        return errorContent.pipe(map(error => new TuiValidationError(error || '', firstError)));\n      }\n\n      return of(new TuiValidationError(errorContent || '', firstError));\n    }\n\n  };\n\n  TuiFieldErrorPipe.ɵfac = function TuiFieldErrorPipe_Factory(t) {\n    return new (t || TuiFieldErrorPipe)(ɵngcc0.ɵɵdirectiveInject(NgControl, 26), ɵngcc0.ɵɵdirectiveInject(FormArrayName, 26), ɵngcc0.ɵɵdirectiveInject(FormGroupName, 26), ɵngcc0.ɵɵdirectiveInject(FormGroupDirective, 26), ɵngcc0.ɵɵdirectiveInject(TUI_VALIDATION_ERRORS, 16));\n  };\n\n  TuiFieldErrorPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"tuiFieldError\",\n    type: TuiFieldErrorPipe,\n    pure: false\n  });\n\n  __decorate([tuiPure], TuiFieldErrorPipe.prototype, \"change$\", null);\n\n  __decorate([tuiPure], TuiFieldErrorPipe.prototype, \"getErrorId\", null);\n\n  __decorate([tuiPure], TuiFieldErrorPipe.prototype, \"getError\", null);\n\n  TuiFieldErrorPipe = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Optional()), __param(1, Self()), __param(1, Inject(FormArrayName)), __param(2, Optional()), __param(2, Self()), __param(2, Inject(FormGroupName)), __param(3, Optional()), __param(3, Self()), __param(3, Inject(FormGroupDirective)), __param(4, Inject(TUI_VALIDATION_ERRORS))], TuiFieldErrorPipe); // @dynamic\n\n  return TuiFieldErrorPipe;\n})();\nlet TuiFieldErrorContentPipe = /*#__PURE__*/(() => {\n  let TuiFieldErrorContentPipe = class TuiFieldErrorContentPipe {\n    constructor(injector) {\n      this.injector = injector;\n      this.localInjector = Injector.create({\n        providers: [{\n          provide: AsyncPipe\n        }, {\n          provide: TuiFieldErrorPipe\n        }],\n        parent: this.injector\n      });\n      this.asyncPipe = this.localInjector.get(AsyncPipe);\n      this.fieldErrorPipe = this.localInjector.get(TuiFieldErrorPipe);\n    }\n\n    transform(order) {\n      return this.getErrorContent(order);\n    }\n\n    ngOnDestroy() {\n      this.asyncPipe.ngOnDestroy();\n    }\n\n    getErrorContent(order) {\n      const error = this.asyncPipe.transform(this.fieldErrorPipe.transform(order));\n\n      if (!error) {\n        return '';\n      }\n\n      return typeof error.message === 'function' ? error.message(error.context) : error.message;\n    }\n\n  };\n\n  TuiFieldErrorContentPipe.ɵfac = function TuiFieldErrorContentPipe_Factory(t) {\n    return new (t || TuiFieldErrorContentPipe)(ɵngcc0.ɵɵdirectiveInject(Injector, 16));\n  };\n\n  TuiFieldErrorContentPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"tuiFieldErrorContent\",\n    type: TuiFieldErrorContentPipe,\n    pure: false\n  });\n  TuiFieldErrorContentPipe = __decorate([__param(0, Inject(Injector))], TuiFieldErrorContentPipe);\n  return TuiFieldErrorContentPipe;\n})();\nlet TuiFieldErrorPipeModule = /*#__PURE__*/(() => {\n  let TuiFieldErrorPipeModule = class TuiFieldErrorPipeModule {};\n\n  TuiFieldErrorPipeModule.ɵfac = function TuiFieldErrorPipeModule_Factory(t) {\n    return new (t || TuiFieldErrorPipeModule)();\n  };\n\n  TuiFieldErrorPipeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiFieldErrorPipeModule\n  });\n  TuiFieldErrorPipeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiFieldErrorPipeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiFieldErrorPipeModule, {\n    declarations: [TuiFieldErrorPipe, TuiFieldErrorContentPipe],\n    exports: [TuiFieldErrorPipe, TuiFieldErrorContentPipe]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiFieldErrorContentPipe, TuiFieldErrorPipe, TuiFieldErrorPipeModule }; //# sourceMappingURL=taiga-ui-kit-pipes-field-error.js.map","map":null,"metadata":{},"sourceType":"module"}