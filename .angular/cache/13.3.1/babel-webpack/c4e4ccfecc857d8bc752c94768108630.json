{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { ElementRef, Inject, Output, Directive, NgModule } from '@angular/core';\nimport { typedFromEvent, preventDefault } from '@taiga-ui/cdk/observables';\nimport { TuiDestroyService } from '@taiga-ui/cdk/services';\nimport { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { merge, Observable } from 'rxjs';\nimport { map, filter, switchMap, mapTo, startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators'; // @dynamic\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'rxjs';\nlet TuiDroppableDirective = /*#__PURE__*/(() => {\n  let TuiDroppableDirective = class TuiDroppableDirective {\n    constructor({\n      nativeElement\n    }, destroy$) {\n      this.tuiDroppableDropped = typedFromEvent(nativeElement, 'drop').pipe(preventDefault(), map(event => event.dataTransfer), filter(isPresent));\n      this.tuiDroppableDragOverChange = typedFromEvent(nativeElement, 'dragenter').pipe(switchMap(({\n        target,\n        dataTransfer\n      }) => merge(typedFromEvent(nativeElement, 'dragleave').pipe(filter(event => event.target === target)), typedFromEvent(nativeElement, 'drop')).pipe(mapTo(null), startWith(dataTransfer))), distinctUntilChanged((a, b) => !!a && !!b || !a && !b)); // Required by Drag and Drop API to stop redirecting\n\n      typedFromEvent(nativeElement, 'dragover').pipe(preventDefault(), takeUntil(destroy$)).subscribe();\n    }\n\n  };\n\n  TuiDroppableDirective.ɵfac = function TuiDroppableDirective_Factory(t) {\n    return new (t || TuiDroppableDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService));\n  };\n\n  TuiDroppableDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiDroppableDirective,\n    selectors: [[\"\", \"tuiDroppableDropped\", \"\"], [\"\", \"tuiDroppableDragOverChange\", \"\"]],\n    outputs: {\n      tuiDroppableDropped: \"tuiDroppableDropped\",\n      tuiDroppableDragOverChange: \"tuiDroppableDragOverChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService])]\n  });\n\n  __decorate([Output()], TuiDroppableDirective.prototype, \"tuiDroppableDropped\", void 0);\n\n  __decorate([Output()], TuiDroppableDirective.prototype, \"tuiDroppableDragOverChange\", void 0);\n\n  TuiDroppableDirective = __decorate([__param(0, Inject(ElementRef)), __param(1, Inject(TuiDestroyService))], TuiDroppableDirective);\n  return TuiDroppableDirective;\n})();\nlet TuiDroppableModule = /*#__PURE__*/(() => {\n  let TuiDroppableModule = class TuiDroppableModule {};\n\n  TuiDroppableModule.ɵfac = function TuiDroppableModule_Factory(t) {\n    return new (t || TuiDroppableModule)();\n  };\n\n  TuiDroppableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiDroppableModule\n  });\n  TuiDroppableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TuiDroppableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiDroppableModule, {\n    declarations: [TuiDroppableDirective],\n    exports: [TuiDroppableDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiDroppableDirective, TuiDroppableModule }; //# sourceMappingURL=taiga-ui-cdk-directives-droppable.js.map","map":null,"metadata":{},"sourceType":"module"}