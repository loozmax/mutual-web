{"ast":null,"code":"import { InjectionToken, Injector, Directive, TemplateRef, Inject, Self, ChangeDetectorRef, Component, ChangeDetectionStrategy, ContentChild, ViewChild, Input, Pipe, NgModule } from '@angular/core';\nimport { NgComponentOutlet, CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {\\@link PolymorpheusOutletComponent}\r\n * @type {?}\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"polymorpheus-outlet\", \"\"];\n\nfunction PolymorpheusOutletComponent_ng_container_0_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 5);\n    ɵngcc0.ɵɵpipe(1, \"injector\");\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"ngComponentOutlet\", ctx_r4.content.component)(\"ngComponentOutletInjector\", ɵngcc0.ɵɵpipeBind2(1, 2, ctx_r4.content, ctx_r4.proxy));\n  }\n}\n\nfunction PolymorpheusOutletComponent_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, PolymorpheusOutletComponent_ng_container_0_ng_template_1_ng_container_0_Template, 2, 5, \"ng-container\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.guard(ctx_r3.content));\n  }\n}\n\nfunction PolymorpheusOutletComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0, 2);\n    ɵngcc0.ɵɵtemplate(1, PolymorpheusOutletComponent_ng_container_0_ng_template_1_Template, 1, 1, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r2 = ɵngcc0.ɵɵreference(2);\n\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.getTemplate(ctx_r0.content, _r2))(\"ngTemplateOutletContext\", ctx_r0.context);\n  }\n}\n\nfunction PolymorpheusOutletComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.primitive);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction PolymorpheusOutletComponent_ng_container_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r7.primitive));\n  }\n}\n\nfunction PolymorpheusOutletComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, PolymorpheusOutletComponent_ng_container_1_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    ɵngcc0.ɵɵtemplate(2, PolymorpheusOutletComponent_ng_container_1_ng_template_2_Template, 1, 4, \"ng-template\", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r6 = ɵngcc0.ɵɵreference(3);\n\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.template)(\"ngIfElse\", _r6);\n  }\n}\n\nconst POLYMORPHEUS_CONTEXT = new InjectionToken('Context from polymorpheus-outlet');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Wrapper class for a component that will be used as content for {\\@link PolymorpheusOutletComponent}\r\n *\r\n * @param component — an Angular component to be dynamically created\r\n * @param injector — optional {\\@link Injector} for lazy loaded module case\r\n * @template T, C\r\n */\n\nclass PolymorpheusComponent {\n  /**\r\n   * @param {?} component\r\n   * @param {?=} injector\r\n   */\n  constructor(component, injector = null) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /**\r\n   * @param {?} injector\r\n   * @param {?} context\r\n   * @return {?}\r\n   */\n\n\n  createInjector(injector, context) {\n    return Injector.create({\n      parent: this.injector || injector,\n      providers: [{\n        provide: POLYMORPHEUS_CONTEXT,\n        useValue: context\n      }]\n    });\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  PolymorpheusComponent.prototype.component;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  PolymorpheusComponent.prototype.injector;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * ng-template wrapper directive also stores {\\@link ChangeDetectorRef} to properly handle change detection.\r\n * @template C\r\n */\n\n\nlet PolymorpheusTemplate = /*#__PURE__*/(() => {\n  class PolymorpheusTemplate {\n    /**\r\n     * @param {?} template\r\n     * @param {?} changeDetectorRef\r\n     */\n    constructor(template, changeDetectorRef) {\n      this.template = template;\n      this.changeDetectorRef = changeDetectorRef;\n      this.polymorpheus = '';\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    check() {\n      this.changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * @template T\r\n     * @param {?} _dir\r\n     * @param {?} _ctx\r\n     * @return {?}\r\n     */\n\n\n    static ngTemplateContextGuard(_dir, _ctx) {\n      return true;\n    }\n\n  }\n\n  PolymorpheusTemplate.ɵfac = function PolymorpheusTemplate_Factory(t) {\n    return new (t || PolymorpheusTemplate)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef));\n  };\n\n  PolymorpheusTemplate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: PolymorpheusTemplate,\n    selectors: [[\"ng-template\", \"polymorpheus\", \"\"]],\n    inputs: {\n      polymorpheus: \"polymorpheus\"\n    },\n    exportAs: [\"polymorpheus\"]\n  });\n  /** @nocollapse */\n\n  return PolymorpheusTemplate;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  PolymorpheusTemplate.prototype.polymorpheus;\n  /** @type {?} */\n\n  PolymorpheusTemplate.prototype.template;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  PolymorpheusTemplate.prototype.changeDetectorRef;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Outlet instantiating {\\@link PolymorpheusContent} with given context\r\n * @template C\r\n */\n\n\nlet PolymorpheusOutletComponent = /*#__PURE__*/(() => {\n  class PolymorpheusOutletComponent {\n    constructor() {\n      this.template = null;\n      this.content = null;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    get primitive() {\n      if (!this.content || this.isAdvanced(this.content)) {\n        return '';\n      }\n\n      return typeof this.content === 'function' ? this.content(this.context) : this.content;\n    }\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\n\n\n    isAdvanced(content) {\n      return isTemplate(content) || isComponent(content);\n    }\n    /**\r\n     * @param {?} content\r\n     * @param {?} componentTmp\r\n     * @return {?}\r\n     */\n\n\n    getTemplate(content, componentTmp) {\n      if (isComponent(content)) {\n        return componentTmp;\n      }\n\n      return isDirective(content) ? content.template : content;\n    }\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\n\n\n    guard(content) {\n      return isComponent(content);\n    }\n    /**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\n\n\n    ngOnChanges({\n      content,\n      context\n    }) {\n      if (context && this.proxy === undefined) {\n        this.proxy = typeof this.context === 'object' && !Array.isArray(this.context) ? new Proxy(this.context, {\n          get: (_, key) => this.context[\n          /** @type {?} */\n          key]\n        }) : this.context;\n      } // TODO: Keep an eye on private field, name can change\n\n      /** @type {?} */\n\n\n      const componentRef =\n      /** @type {?} */\n      !content && context && this.outlet && this.outlet['_componentRef'];\n\n      if (componentRef) {\n        componentRef.injector.get(ChangeDetectorRef).markForCheck();\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    ngDoCheck() {\n      if (isDirective(this.content)) {\n        this.content.check();\n      }\n    }\n\n  }\n\n  PolymorpheusOutletComponent.ɵfac = function PolymorpheusOutletComponent_Factory(t) {\n    return new (t || PolymorpheusOutletComponent)();\n  };\n\n  PolymorpheusOutletComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PolymorpheusOutletComponent,\n    selectors: [[\"\", \"polymorpheus-outlet\", \"\"]],\n    contentQueries: function PolymorpheusOutletComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      }\n    },\n    viewQuery: function PolymorpheusOutletComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NgComponentOutlet, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.outlet = _t.first);\n      }\n    },\n    inputs: {\n      content: \"content\",\n      context: \"context\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"component\", \"\"], [3, \"ngComponentOutlet\", \"ngComponentOutletInjector\", 4, \"ngIf\"], [3, \"ngComponentOutlet\", \"ngComponentOutletInjector\"], [4, \"ngIf\", \"ngIfElse\"], [\"child\", \"\"]],\n    template: function PolymorpheusOutletComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, PolymorpheusOutletComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, PolymorpheusOutletComponent_ng_container_1_Template, 4, 2, \"ng-container\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isAdvanced(ctx.content));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.primitive);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgComponentOutlet];\n    },\n    pipes: function () {\n      return [InjectorPipe];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PolymorpheusOutletComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  PolymorpheusOutletComponent.prototype.template;\n  /** @type {?} */\n\n  PolymorpheusOutletComponent.prototype.outlet;\n  /** @type {?} */\n\n  PolymorpheusOutletComponent.prototype.proxy;\n  /** @type {?} */\n\n  PolymorpheusOutletComponent.prototype.content;\n  /** @type {?} */\n\n  PolymorpheusOutletComponent.prototype.context;\n}\n/**\r\n * @template C\r\n * @param {?} content\r\n * @return {?}\r\n */\n\n\nfunction isDirective(content) {\n  return content instanceof PolymorpheusTemplate;\n}\n/**\r\n * @template C\r\n * @param {?} content\r\n * @return {?}\r\n */\n\n\nfunction isComponent(content) {\n  return content instanceof PolymorpheusComponent;\n}\n/**\r\n * @template C\r\n * @param {?} content\r\n * @return {?}\r\n */\n\n\nfunction isTemplate(content) {\n  return isDirective(content) || content instanceof TemplateRef;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Internal use {\\@link Pipe} to create {\\@link Injector}\r\n * only when either content or context change\r\n * @template C\r\n */\n\n\nlet InjectorPipe = /*#__PURE__*/(() => {\n  class InjectorPipe {\n    /**\r\n     * @param {?} injector\r\n     */\n    constructor(injector) {\n      this.injector = injector;\n    }\n    /**\r\n     * @param {?} content\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\n\n\n    transform(content, context) {\n      return content.createInjector(this.injector, context);\n    }\n\n  }\n\n  InjectorPipe.ɵfac = function InjectorPipe_Factory(t) {\n    return new (t || InjectorPipe)(ɵngcc0.ɵɵdirectiveInject(Injector, 16));\n  };\n\n  InjectorPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"injector\",\n    type: InjectorPipe,\n    pure: true\n  });\n  /** @nocollapse */\n\n  return InjectorPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  InjectorPipe.prototype.injector;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet PolymorpheusModule = /*#__PURE__*/(() => {\n  class PolymorpheusModule {}\n\n  PolymorpheusModule.ɵfac = function PolymorpheusModule_Factory(t) {\n    return new (t || PolymorpheusModule)();\n  };\n\n  PolymorpheusModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PolymorpheusModule\n  });\n  PolymorpheusModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return PolymorpheusModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PolymorpheusModule, {\n    declarations: function () {\n      return [PolymorpheusOutletComponent, PolymorpheusTemplate, InjectorPipe];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [PolymorpheusOutletComponent, PolymorpheusTemplate];\n    }\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule, PolymorpheusOutletComponent, PolymorpheusTemplate, InjectorPipe as ɵa }; //# sourceMappingURL=tinkoff-ng-polymorpheus.js.map","map":null,"metadata":{},"sourceType":"module"}