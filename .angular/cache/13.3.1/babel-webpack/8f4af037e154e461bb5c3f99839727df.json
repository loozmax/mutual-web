{"ast":null,"code":"import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';\n/**\n * Capitalizes a given string, replacing it with a lowercase string and making\n * the first letter of each word uppercase.\n *\n * @param value the input string\n * @return the capitalized string\n */\n\nfunction capitalize(value) {\n  return value.toLowerCase().replace(/(?:^|\\s)\\S/g, char => char.toUpperCase());\n}\n\nfunction capitalizeFirstLetter(value) {\n  return `${value.charAt(0).toUpperCase()}${value.slice(1)}`;\n}\n/**\n * Convert number to string with replacing exponent part on decimals\n *\n * @param value the number\n * @return string representation of a number\n */\n\n\nfunction numberToStringWithoutExp(value) {\n  const valueAsString = String(value);\n  const [numberPart, expPart] = valueAsString.split('e-');\n  let valueWithoutExp = valueAsString;\n\n  if (expPart) {\n    const [, fractionalPart] = numberPart.split('.');\n    const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);\n    valueWithoutExp = value.toFixed(decimalDigits);\n  }\n\n  return valueWithoutExp;\n}\n/**\n * Return fractional part of number\n *\n * @param value the number\n * @param precision number of digits of decimal part, null to keep untouched\n * @return the fractional part of number\n */\n\n\nfunction getFractionPartPadded(value, precision) {\n  const [, fractionPartPadded = ''] = numberToStringWithoutExp(value).split('.');\n  return typeof precision === 'number' ? fractionPartPadded.substr(0, precision) : fractionPartPadded;\n}\n/**\n * Formats number adding a thousand separators and correct decimal separator\n * padding decimal part with zeroes to given length\n *\n * @param value the input number\n * @param decimalLimit number of digits of decimal part, null to keep untouched\n * @param decimalSeparator separator between the integer and the decimal part\n * @param thousandSeparator separator between thousands\n * @param zeroPadding enable zeros at the end of decimal part\n * @return the formatted string\n */\n\n\nfunction formatNumber(value, decimalLimit = null, decimalSeparator = ',', thousandSeparator = CHAR_NO_BREAK_SPACE, zeroPadding = true) {\n  const integerPartString = String(Math.floor(Math.abs(value)));\n  let fractionPartPadded = getFractionPartPadded(value, decimalLimit);\n\n  if (decimalLimit !== null) {\n    if (zeroPadding) {\n      const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);\n      const zeroPartString = '0'.repeat(zeroPaddingSize);\n      fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;\n    } else {\n      fractionPartPadded = fractionPartPadded.replace(/0*$/, '');\n    }\n  }\n\n  const remainder = integerPartString.length % 3;\n  const sign = value < 0 ? '-' : '';\n  let result = sign + integerPartString.charAt(0);\n\n  for (let i = 1; i < integerPartString.length; i++) {\n    if (i % 3 === remainder && integerPartString.length > 3) {\n      result += thousandSeparator;\n    }\n\n    result += integerPartString.charAt(i);\n  }\n\n  return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;\n}\n/**\n * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,\n * adding parentheses and hyphens.\n *\n * @param value the input string\n * @param countryCode a country code\n * @param phoneMask a phone number mask\n * @return the formatted phone string of the form +7 XXX XXX-XX-XX\n */\n\n\nfunction formatPhone(value, countryCode, phoneMask) {\n  if (!value) {\n    return '';\n  }\n\n  let result = countryCode;\n  countryCode = countryCode.replace(/[()]/g, '');\n\n  if (!value.startsWith(countryCode)) {\n    value = countryCode + value.replace('+', '');\n  }\n\n  const splitPhoneMask = phoneMask.split('');\n  const splitValue = value.slice(countryCode.length).split('');\n  result += ' ';\n\n  if (splitValue.length === 0) {\n    return result;\n  }\n\n  for (let i = 0; i < splitPhoneMask.length; i++) {\n    if (splitValue.length === 0) {\n      break;\n    }\n\n    if (splitPhoneMask[i] === '#') {\n      result += splitValue[0] || '';\n      splitValue.splice(0, 1);\n    } else {\n      result += splitPhoneMask[i];\n    }\n  }\n\n  return result;\n}\n\nfunction otherDecimalSymbol(symbol) {\n  return symbol === '.' ? ',' : '.';\n}\n/**\n * Selects the correct plural form to display.\n *\n * @param value the input number\n * @param args an array of three plural forms, e.g. ['год', 'года', 'лет']\n * @deprecated This implementation targets Russian.\n * Use https://angular.io/api/common/NgPlural for your implementations.\n */\n\n\nfunction pluralize(value, [one, few, many]) {\n  const ten = value % 10;\n  const hundred = value % 100; // 1, 21, 101, 121, но не 11, 111, 211...\n\n  if (ten === 1 && hundred !== 11) {\n    return one;\n  } // 2, 3, 4, 22, 33, 44, 152, 163, 174, но не 12, 13, 14, 112, 213, 314...\n\n\n  if (ten >= 2 && ten <= 4 && (hundred < 10 || hundred >= 20)) {\n    return few;\n  }\n\n  return many;\n} // TODO: remove in 3.0\n\n/**\n * Temporary util for mapping TuiPluralize array to ICU format\n */\n\n\nfunction tuiPluralizeToICU(pluralize) {\n  return {\n    one: pluralize[0],\n    few: pluralize[1],\n    many: pluralize[2],\n    other: pluralize[2]\n  };\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { capitalize, capitalizeFirstLetter, formatNumber, formatPhone, getFractionPartPadded, numberToStringWithoutExp, otherDecimalSymbol, pluralize, tuiPluralizeToICU }; //# sourceMappingURL=taiga-ui-core-utils-format.js.map","map":null,"metadata":{},"sourceType":"module"}