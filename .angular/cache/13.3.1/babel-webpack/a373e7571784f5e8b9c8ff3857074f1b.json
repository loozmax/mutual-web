{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject, ComponentFactoryResolver, Injector, Input, HostListener, Directive, forwardRef, NgModule } from '@angular/core';\nimport { getNativeFocused, getClosestFocusable, setNativeFocused, TuiDestroyService, TuiPortalService, TuiActiveZoneDirective, tuiDefaultProp } from '@taiga-ui/cdk';\nimport { AbstractTuiDropdown, TUI_DROPDOWN_DIRECTIVE, TuiDropdownBoxModule } from '@taiga-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/cdk';\nimport * as ɵngcc2 from 'rxjs';\nvar TuiDropdownContextDirective_1; // @dynamic\n\nlet TuiDropdownContextDirective = TuiDropdownContextDirective_1 = class TuiDropdownContextDirective extends AbstractTuiDropdown {\n  constructor(elementRef, documentRef, destroy$, componentFactoryResolver, injector, portalService, activeZone) {\n    super(componentFactoryResolver, injector, portalService, elementRef, activeZone);\n    this.elementRef = elementRef;\n    this.documentRef = documentRef;\n    this.activeZone = activeZone;\n    this.lastClickedClientRect = this.getClientRectFromDot(0, 0);\n    this.content = '';\n    this.refresh$ = EMPTY;\n    this.context = {\n      close: () => this.closeDropdownBox()\n    };\n    activeZone.tuiActiveZoneChange.pipe(filter(isActive => !isActive), takeUntil(destroy$)).subscribe(() => this.closeDropdownBox());\n  }\n\n  get clientRect() {\n    return this.lastClickedClientRect;\n  }\n\n  get fixed() {\n    return true;\n  }\n\n  get dropdownContent() {\n    var _a, _b;\n\n    return ((_b = (_a = this.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.instance.contentElementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) || null;\n  }\n\n  onHostClick() {\n    this.closeDropdownBox();\n  }\n\n  onContextMenu(x, y) {\n    this.closeDropdownBox();\n    this.openDropdown(x, y);\n  }\n\n  onAnotherContextOpen(target) {\n    const isAnotherContextOpened = !this.elementRef.nativeElement.contains(target);\n\n    if (isAnotherContextOpened) {\n      this.closeDropdownBox();\n    }\n  }\n\n  onArrow(event, down) {\n    const activeElement = getNativeFocused(this.documentRef);\n    const focusInside = activeElement && this.activeZone.contains(activeElement);\n\n    if (!this.dropdownContent || focusInside) {\n      return;\n    }\n\n    event.preventDefault();\n    const nextEl = this.dropdownContent.nextElementSibling;\n    const initial = down || !this.checkIsFocusableElement(nextEl) ? this.dropdownContent : nextEl;\n    const focusable = getClosestFocusable(initial, !down, this.dropdownContent);\n\n    if (focusable === null) {\n      return;\n    }\n\n    setNativeFocused(focusable);\n  }\n\n  onKeyDownEsc(event) {\n    if (!this.dropdownContent) {\n      return;\n    }\n\n    event.stopPropagation();\n    this.closeDropdownBox();\n  }\n\n  openDropdown(x, y) {\n    this.lastClickedClientRect = this.getClientRectFromDot(x, y);\n    this.openDropdownBox();\n  }\n\n  getClientRectFromDot(x, y) {\n    return {\n      top: y,\n      bottom: y,\n      left: x,\n      right: x,\n      height: 0,\n      width: 0\n    };\n  }\n\n  checkIsFocusableElement(element) {\n    return !!element && 'focus' in element && 'blur' in element;\n  }\n\n};\n\nTuiDropdownContextDirective.ɵfac = function TuiDropdownContextDirective_Factory(t) {\n  return new (t || TuiDropdownContextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService), ɵngcc0.ɵɵdirectiveInject(ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(TuiPortalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TuiActiveZoneDirective));\n};\n\nTuiDropdownContextDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiDropdownContextDirective,\n  selectors: [[\"\", \"tuiDropdownContext\", \"\"]],\n  hostBindings: function TuiDropdownContextDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TuiDropdownContextDirective_click_HostBindingHandler() {\n        return ctx.onHostClick();\n      })(\"contextmenu.prevent\", function TuiDropdownContextDirective_contextmenu_prevent_HostBindingHandler($event) {\n        return ctx.onContextMenu($event.clientX, $event.clientY);\n      })(\"contextmenu\", function TuiDropdownContextDirective_contextmenu_HostBindingHandler($event) {\n        return ctx.onAnotherContextOpen($event.target);\n      }, false, ɵngcc0.ɵɵresolveDocument)(\"keydown.arrowDown\", function TuiDropdownContextDirective_keydown_arrowDown_HostBindingHandler($event) {\n        return ctx.onArrow($event, true);\n      }, false, ɵngcc0.ɵɵresolveDocument)(\"keydown.arrowUp\", function TuiDropdownContextDirective_keydown_arrowUp_HostBindingHandler($event) {\n        return ctx.onArrow($event, false);\n      }, false, ɵngcc0.ɵɵresolveDocument)(\"keydown.esc\", function TuiDropdownContextDirective_keydown_esc_HostBindingHandler($event) {\n        return ctx.onKeyDownEsc($event);\n      }, false, ɵngcc0.ɵɵresolveDocument);\n    }\n  },\n  inputs: {\n    content: [\"tuiDropdownContext\", \"content\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TuiDestroyService, TuiActiveZoneDirective, {\n    provide: TUI_DROPDOWN_DIRECTIVE,\n    useExisting: forwardRef(() => TuiDropdownContextDirective_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nTuiDropdownContextDirective.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Document,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TuiDestroyService]\n  }]\n}, {\n  type: ComponentFactoryResolver,\n  decorators: [{\n    type: Inject,\n    args: [ComponentFactoryResolver]\n  }]\n}, {\n  type: Injector,\n  decorators: [{\n    type: Inject,\n    args: [Injector]\n  }]\n}, {\n  type: TuiPortalService,\n  decorators: [{\n    type: Inject,\n    args: [TuiPortalService]\n  }]\n}, {\n  type: TuiActiveZoneDirective\n}];\n\n__decorate([Input('tuiDropdownContext'), tuiDefaultProp()], TuiDropdownContextDirective.prototype, \"content\", void 0);\n\n__decorate([HostListener('click')], TuiDropdownContextDirective.prototype, \"onHostClick\", null);\n\n__decorate([HostListener('contextmenu.prevent', ['$event.clientX', '$event.clientY'])], TuiDropdownContextDirective.prototype, \"onContextMenu\", null);\n\n__decorate([HostListener('document:contextmenu', ['$event.target'])], TuiDropdownContextDirective.prototype, \"onAnotherContextOpen\", null);\n\n__decorate([HostListener('document:keydown.arrowDown', ['$event', 'true']), HostListener('document:keydown.arrowUp', ['$event', 'false'])], TuiDropdownContextDirective.prototype, \"onArrow\", null);\n\n__decorate([HostListener('document:keydown.esc', ['$event'])], TuiDropdownContextDirective.prototype, \"onKeyDownEsc\", null);\n\nTuiDropdownContextDirective = TuiDropdownContextDirective_1 = __decorate([__param(1, Inject(DOCUMENT)), __param(2, Inject(TuiDestroyService)), __param(3, Inject(ComponentFactoryResolver)), __param(4, Inject(Injector)), __param(5, Inject(TuiPortalService))], TuiDropdownContextDirective);\nlet TuiDropdownContextModule = /*#__PURE__*/(() => {\n  let TuiDropdownContextModule = class TuiDropdownContextModule {};\n\n  TuiDropdownContextModule.ɵfac = function TuiDropdownContextModule_Factory(t) {\n    return new (t || TuiDropdownContextModule)();\n  };\n\n  TuiDropdownContextModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiDropdownContextModule\n  });\n  TuiDropdownContextModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[TuiDropdownBoxModule]]\n  });\n  return TuiDropdownContextModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiDropdownContextModule, {\n    declarations: function () {\n      return [TuiDropdownContextDirective];\n    },\n    imports: function () {\n      return [TuiDropdownBoxModule];\n    },\n    exports: function () {\n      return [TuiDropdownContextDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiDropdownContextDirective, TuiDropdownContextModule }; //# sourceMappingURL=taiga-ui-kit-directives-dropdown-context.js.map","map":null,"metadata":{},"sourceType":"module"}