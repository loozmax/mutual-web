{"ast":null,"code":"import { svgNodeFilter } from '@taiga-ui/cdk/constants';\n/**\n * Returns current active element, including shadow dom\n *\n * @return element or null\n */\n\nfunction getNativeFocused(documentRef) {\n  if (!documentRef.activeElement || !documentRef.activeElement.shadowRoot) {\n    return documentRef.activeElement;\n  }\n\n  let element = documentRef.activeElement.shadowRoot.activeElement;\n\n  while (element && element.shadowRoot) {\n    element = element.shadowRoot.activeElement;\n  }\n\n  return element;\n}\n/**\n * Focuses or blurs and element\n *\n * @param element native element\n * @param focused boolean focused state\n * @param preventScroll optional flag to prevent native scroll to the element\n */\n\n\nfunction setNativeFocused(element, focused = true, preventScroll = false) {\n  if (focused) {\n    element.focus({\n      preventScroll\n    });\n  } else {\n    element.blur();\n  }\n}\n/**\n * Finds and blurs current active element, including shadow DOM\n */\n\n\nfunction blurNativeFocused(documentRef) {\n  const activeElement = getNativeFocused(documentRef); // TODO: iframe warning\n\n  if (activeElement instanceof HTMLElement) {\n    setNativeFocused(activeElement, false);\n  }\n}\n/**\n * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to\n * only target natural focus order. Not checking the possibility of an element to\n * be focused, for example element can have display: none applied to it or any other\n * circumstances could prevent actual focus.\n */\n\n\nfunction isNativeKeyboardFocusable(element) {\n  if (element.hasAttribute('disabled') || element.getAttribute('tabIndex') === '-1') {\n    return false;\n  } // TODO: iframe warning\n\n\n  if (element instanceof HTMLElement && element.isContentEditable || element.getAttribute('tabIndex') === '0') {\n    return true;\n  }\n\n  switch (element.tagName) {\n    case 'BUTTON':\n    case 'SELECT':\n    case 'TEXTAREA':\n      return true;\n\n    case 'VIDEO':\n    case 'AUDIO':\n      return element.hasAttribute('controls');\n\n    case 'INPUT':\n      return element.getAttribute('type') !== 'hidden';\n\n    case 'A':\n    case 'LINK':\n      return element.hasAttribute('href');\n\n    default:\n      return false;\n  }\n}\n\nfunction isNativeMouseFocusable(element) {\n  return !element.hasAttribute('disabled') && (element.getAttribute('tabIndex') === '-1' || isNativeKeyboardFocusable(element));\n}\n/**\n * Finds the closest element that can be focused with a keyboard or mouse in theory\n *\n * @param initial current HTML element\n * @param prev should it look backwards instead (find item that will be focused with Shift + Tab)\n * @param root top Node limiting the search area\n * @param keyboard determine if only keyboard focus is of interest\n *\n */\n\n\nfunction getClosestFocusable(initial, prev = false, root, keyboard = true) {\n  if (!root.ownerDocument) {\n    return null;\n  }\n\n  const check = keyboard ? isNativeKeyboardFocusable : isNativeMouseFocusable; // Deprecated but ony this overload works in IE\n  // Filter must be a function in IE, other modern browsers are compliant to this format\n\n  const treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, svgNodeFilter, false);\n  treeWalker.currentNode = initial;\n\n  while (prev ? treeWalker.previousNode() : treeWalker.nextNode()) {\n    // TODO: iframe warning\n    if (treeWalker.currentNode instanceof HTMLElement) {\n      initial = treeWalker.currentNode;\n    }\n\n    if (check(initial)) {\n      return initial;\n    }\n  }\n\n  return null;\n}\n/** @deprecated use getClosestFocusable */\n\n\nconst getClosestKeyboardFocusable = getClosestFocusable;\n/**\n * Checks if element is focused.\n *\n * Could return true even after blur since element remains focused if you switch away from a browser tab.\n *\n * @param node or null (as a common return value of DOM nodes walking)\n * @return true if focused\n */\n\nfunction isNativeFocused(node) {\n  return !!node && !!node.ownerDocument && getNativeFocused(node.ownerDocument) === node;\n}\n/**\n * Checks if focused element is within given element.\n *\n * @param node\n * @return true if focused node is contained within element\n */\n\n\nfunction isNativeFocusedIn(node) {\n  // !node.contains - check for IE11\n  if (!node.ownerDocument || !node.contains) {\n    return false;\n  }\n\n  const nativeFocused = getNativeFocused(node.ownerDocument);\n  return nativeFocused !== null && node.contains(nativeFocused);\n}\n/**\n * Utility method for moving focus in a list of elements\n *\n * @param currentIndex currently focused index\n * @param elements array of focusable elements\n * @param step a step to move focus by, typically -1 or 1\n */\n\n\nfunction moveFocus(currentIndex, elements, step) {\n  currentIndex += step;\n\n  while (currentIndex >= 0 && currentIndex < elements.length) {\n    setNativeFocused(elements[currentIndex]);\n\n    if (isNativeFocused(elements[currentIndex])) {\n      return;\n    }\n\n    currentIndex += step;\n  }\n}\n/**\n * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})\n *\n * @param element\n * @param focused desired focused state\n * @param preventScroll optionally prevent native browser scroll after focus\n */\n\n\nfunction setNativeMouseFocused(element, focused = true, preventScroll = false) {\n  if (!element.ownerDocument) {\n    return;\n  }\n\n  if (typeof Event === 'function') {\n    element.dispatchEvent(new Event('mousedown', {\n      bubbles: true,\n      cancelable: true\n    }));\n  } else {\n    const event = element.ownerDocument.createEvent('Event');\n    event.initEvent('mousedown', true, true);\n    element.dispatchEvent(event);\n  }\n\n  setNativeFocused(element, focused, preventScroll);\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { blurNativeFocused, getClosestFocusable, getClosestKeyboardFocusable, getNativeFocused, isNativeFocused, isNativeFocusedIn, isNativeKeyboardFocusable, isNativeMouseFocusable, moveFocus, setNativeFocused, setNativeMouseFocused }; //# sourceMappingURL=taiga-ui-cdk-utils-focus.js.map","map":null,"metadata":{},"sourceType":"module"}