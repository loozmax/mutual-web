{"ast":null,"code":"import { tuiAssert } from '@taiga-ui/cdk/classes';\nimport { FormArray, FormGroup } from '@angular/forms';\n\nfunction distanceBetweenTouches({\n  touches\n}) {\n  return Math.hypot(touches[0].clientX - touches[1].clientX, touches[0].clientY - touches[1].clientY);\n}\n\nfunction easeInOutQuad(t) {\n  tuiAssert.assert(0 <= t && t <= 1, 'Input must be between 0 and 1 inclusive but received ', t);\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\n\nfunction isPresent(value) {\n  return value !== null && value !== undefined;\n}\n/**\n * If the value is null or undefined, returns default value\n * @param value\n * @param fallback alternative fallback\n * @deprecated use nullish coalescing operator\n */\n\n\nfunction fallbackValue(value, fallback) {\n  return isPresent(value) ? value : fallback;\n}\n/**\n * Flattens two dimensional array and calculates resulting length\n *\n * @param array twi dimensional array\n */\n\n\nfunction flatLength(array) {\n  return array.reduce((count, section) => count + section.length, 0);\n}\n/**\n * Extracts original array from {@link QueryList} rather than\n * creating a copy like {@link QueryList.toArray} does.\n * @param queryList\n * @returns original array from {@link QueryList}.\n */\n\n\nfunction getOriginalArrayFromQueryList(queryList) {\n  let array = [];\n  queryList.find((_item, _index, originalArray) => {\n    array = originalArray;\n    return true;\n  });\n  return array;\n}\n\nfunction getSwipeDirection(deltaX, deltaY) {\n  if (Math.abs(deltaY) > Math.abs(deltaX)) {\n    return deltaY > 0 ? 'top' : 'bottom';\n  } else {\n    return deltaX > 0 ? 'left' : 'right';\n  }\n}\n/**\n * @deprecated: use identity from rxjs\n */\n\n\nfunction identity(item) {\n  return item;\n}\n\nfunction isElementEditable(element) {\n  // TODO: iframe warning\n  return element instanceof HTMLInputElement && !element.readOnly || element instanceof HTMLTextAreaElement && !element.readOnly || element.isContentEditable;\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction markControlAsTouchedAndValidate(control) {\n  if (control instanceof FormArray) {\n    control.controls.forEach(nestedControl => {\n      markControlAsTouchedAndValidate(nestedControl);\n    });\n  }\n\n  if (control instanceof FormGroup) {\n    Object.values(control.controls).forEach(nestedControl => {\n      markControlAsTouchedAndValidate(nestedControl);\n    });\n  }\n\n  control.markAsTouched();\n  control.updateValueAndValidity();\n}\n/**\n * Checks identity for nullable elements.\n *\n * @param a element a\n * @param b element b\n * @param handler called if both elements are not null\n * @return true if either both are null or they pass identity handler\n */\n\n\nfunction nullableSame(a, b, handler) {\n  if (a === null) {\n    return b === null;\n  }\n\n  if (b === null) {\n    return false;\n  }\n\n  return handler(a, b);\n}\n\nfunction uniqBy(array, key) {\n  return Array.from(array.reduce((map, item) => map.has(item[key]) ? map : map.set(item[key], item), new Map()).values());\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { distanceBetweenTouches, easeInOutQuad, fallbackValue, flatLength, getOriginalArrayFromQueryList, getSwipeDirection, identity, isElementEditable, isNumber, isPresent, markControlAsTouchedAndValidate, nullableSame, uniqBy }; //# sourceMappingURL=taiga-ui-cdk-utils-miscellaneous.js.map","map":null,"metadata":{},"sourceType":"module"}