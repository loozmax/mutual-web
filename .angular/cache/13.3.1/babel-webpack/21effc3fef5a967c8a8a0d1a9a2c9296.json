{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Directive, Optional, Self, Inject, ChangeDetectorRef, ViewChild, ElementRef, Input, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { isNativeFocused, tuiAssert, setNativeFocused, round, clamp, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiFocusableModule, TuiRepeatTimesModule } from '@taiga-ui/cdk';\nimport { getFractionPartPadded, TuiTextfieldController, TUI_TEXTFIELD_WATCHED_CONTROLLER, TUI_NUMBER_FORMAT, HINT_CONTROLLER_PROVIDER, TEXTFIELD_CONTROLLER_PROVIDER, TuiFormatNumberPipeModule, TuiTextfieldControllerModule } from '@taiga-ui/core';\nimport { AbstractTuiInputSlider } from '@taiga-ui/kit/abstract';\nimport { TuiInputNumberComponent, TuiInputNumberModule } from '@taiga-ui/kit/components/input-number';\nimport { TuiSliderComponent, tuiSliderOptionsProvider, TuiSliderModule } from '@taiga-ui/kit/components/slider';\nimport { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';\nimport { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/kit/components/input-number';\nimport * as ɵngcc2 from '@taiga-ui/core';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@tinkoff/ng-polymorpheus';\nimport * as ɵngcc6 from '@taiga-ui/kit/components/slider';\nimport * as ɵngcc7 from '@taiga-ui/cdk';\nimport * as ɵngcc8 from 'rxjs';\n\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction TuiInputSliderComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"content\", ctx_r0.computedValueContent)(\"context\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.value));\n  }\n}\n\nfunction TuiInputSliderComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.secondary);\n  }\n}\n\nfunction TuiInputSliderComponent_div_8_span_1_span_1_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"i18nPlural\");\n    ɵngcc0.ɵɵpipe(3, \"tuiSliderTickLabel\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tickIndex_r5 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ɵngcc0.ɵɵpipeBind2(2, 1, ɵngcc0.ɵɵpipeBind3(3, 4, tickIndex_r5, ctx_r8.segments, ctx_r8.computedKeySteps), ctx_r8.segmentsPluralizeMap), \" \");\n  }\n}\n\nfunction TuiInputSliderComponent_div_8_span_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"tuiFormatNumber\");\n    ɵngcc0.ɵɵpipe(3, \"tuiSliderTickLabel\");\n    ɵngcc0.ɵɵtemplate(4, TuiInputSliderComponent_div_8_span_1_span_1_span_4_Template, 4, 8, \"span\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const fromToText_r7 = ctx.ngIf;\n    const tickIndex_r5 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r6.getTickPrefix(tickIndex_r5, ctx_r6.segments, fromToText_r7), \" \", ɵngcc0.ɵɵpipeBind1(2, 3, ɵngcc0.ɵɵpipeBind3(3, 5, tickIndex_r5, ctx_r6.segments, ctx_r6.computedKeySteps)), \" \");\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.segmentsPluralizeMap);\n  }\n}\n\nfunction TuiInputSliderComponent_div_8_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, TuiInputSliderComponent_div_8_span_1_span_1_Template, 5, 9, \"span\", 10);\n    ɵngcc0.ɵɵpipe(2, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.fromToTexts$));\n  }\n}\n\nfunction TuiInputSliderComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(1, TuiInputSliderComponent_div_8_span_1_Template, 3, 3, \"span\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"tuiRepeatTimesOf\", ctx_r3.segments + 1);\n  }\n}\n\nconst _c1 = [\"*\"];\nvar TuiInputSliderComponent_1;\n/**\n * Turn on new `InputSlider`'s version.\n * The new version will behave almost the same as `InputSlider` from the next major release.\n * @deprecated TODO remove me in v3.0 and make `InputSlider` always \"new\".\n */\n\nlet TuiNewInputSliderDirective = /*#__PURE__*/(() => {\n  let TuiNewInputSliderDirective = class TuiNewInputSliderDirective {};\n\n  TuiNewInputSliderDirective.ɵfac = function TuiNewInputSliderDirective_Factory(t) {\n    return new (t || TuiNewInputSliderDirective)();\n  };\n\n  TuiNewInputSliderDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TuiNewInputSliderDirective,\n    selectors: [[\"tui-input-slider\", \"new\", \"\"]]\n  }); // @dynamic\n\n  return TuiNewInputSliderDirective;\n})();\nlet TuiInputSliderComponent = TuiInputSliderComponent_1 =\n/**\n * TODO replace `extends AbstractTuiInputSlider<number>` by `extends AbstractTuiControl<number> implements TuiWithOptionalMinMax<number>`\n * in v3.0\n */\nclass TuiInputSliderComponent extends AbstractTuiInputSlider {\n  constructor(control, changeDetectorRef, controller, numberFormat, fromToTexts$, isNew) {\n    super(control, changeDetectorRef);\n    this.controller = controller;\n    this.numberFormat = numberFormat;\n    this.fromToTexts$ = fromToTexts$;\n    this.isNew = isNew;\n    this.min = 0;\n    this.max = Infinity;\n    this.quantum = 1;\n    this.steps = 0;\n    this.segments = 0;\n    this.keySteps = null;\n    this.valueContent = '';\n    this.prefix = '';\n    this.postfix = '';\n    /**\n     * @deprecated use `tuiTextfieldSize` instead\n     * TODO delete in v3.0\n     */\n\n    this.size = 'l';\n    /**\n     * @deprecated use `tuiTextfieldCustomContent` instead\n     * TODO delete in v3.0\n     */\n\n    this.secondary = '';\n  }\n\n  get nativeFocusableElement() {\n    var _a;\n\n    return !((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.computedDisabled ? null : this.inputNumberRef.nativeFocusableElement;\n  }\n\n  get focused() {\n    var _a;\n\n    return isNativeFocused(this.nativeFocusableElement) || isNativeFocused(((_a = this.sliderRef) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);\n  }\n\n  get computedSteps() {\n    return this.steps || (this.max - this.min) / this.quantum;\n  }\n\n  get precision() {\n    return getFractionPartPadded(this.quantum).length;\n  }\n\n  get decimal() {\n    return this.precision ? 'not-zero' : 'never';\n  }\n  /**\n   * TODO remove old property `size` in v3.0\n   */\n\n\n  get computedSize() {\n    if (this.isNew) {\n      tuiAssert.assert(this.controller.size !== 's', \"Size 's' is not supported by this input.\");\n      return this.controller.size === 'l' ? 'l' : 'm';\n    }\n\n    return this.size;\n  }\n  /**\n   * @deprecated for backward compatibility\n   * TODO replace by just `this.valueContent` in v3.0\n   */\n\n\n  get computedValueContent() {\n    return this.minLabel || this.maxLabel ? legacyMinMaxLabel(this) : this.valueContent;\n  }\n\n  focusTextInput() {\n    var _a;\n\n    const focusableElement = (_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement;\n\n    if (focusableElement) {\n      setNativeFocused(focusableElement);\n    }\n  }\n\n  safelyUpdateValue(value) {\n    this.updateValue(this.valueGuard(value !== null && value !== void 0 ? value : this.safeCurrentValue));\n  }\n\n  onVerticalArrowKeyDown(coefficient) {\n    if (this.readOnly) {\n      return;\n    }\n\n    const value = this.value + coefficient * this.step;\n\n    if (value !== this.value) {\n      this.safelyUpdateValue(value);\n    }\n\n    this.updateTextInputValue(this.valueGuard(value));\n  }\n\n  onFocused(focused) {\n    if (!focused && !this.textInputValue) {\n      this.updateTextInputValue(this.safeCurrentValue);\n    }\n\n    this.updateFocused(focused);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  get textInputValue() {\n    var _a;\n\n    return ((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeValue) || '';\n  }\n\n  getFallbackValue() {\n    return 0;\n  }\n\n  valueGuard(value) {\n    const roundedValue = round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);\n    return clamp(roundedValue, this.min, this.max);\n  }\n\n  updateTextInputValue(value) {\n    if (this.inputNumberRef) {\n      this.inputNumberRef.nativeValue = this.inputNumberRef.getFormattedValue(value);\n    }\n  }\n\n};\n\nTuiInputSliderComponent.ɵfac = function TuiInputSliderComponent_Factory(t) {\n  return new (t || TuiInputSliderComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER), ɵngcc0.ɵɵdirectiveInject(TUI_NUMBER_FORMAT), ɵngcc0.ɵɵdirectiveInject(TUI_FROM_TO_TEXTS), ɵngcc0.ɵɵdirectiveInject(TuiNewInputSliderDirective, 8));\n};\n\nTuiInputSliderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiInputSliderComponent,\n  selectors: [[\"tui-input-slider\"]],\n  viewQuery: function TuiInputSliderComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TuiInputNumberComponent, 5);\n      ɵngcc0.ɵɵviewQuery(TuiSliderComponent, 5, ElementRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputNumberRef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sliderRef = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TuiInputSliderComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"_show-ticks-labels\", !ctx.isNew);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    quantum: \"quantum\",\n    steps: \"steps\",\n    segments: \"segments\",\n    keySteps: \"keySteps\",\n    valueContent: \"valueContent\",\n    prefix: \"prefix\",\n    postfix: \"postfix\",\n    size: \"size\",\n    secondary: \"secondary\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiInputSliderComponent_1)\n  }, tuiSliderOptionsProvider({\n    trackColor: 'transparent'\n  }), HINT_CONTROLLER_PROVIDER, TEXTFIELD_CONTROLLER_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 9,\n  vars: 26,\n  consts: [[3, \"min\", \"max\", \"precision\", \"decimal\", \"prefix\", \"postfix\", \"tuiTextfieldCustomContent\", \"tuiTextfieldSize\", \"tuiTextfieldLabelOutside\", \"readOnly\", \"pseudoFocused\", \"pseudoHovered\", \"pseudoPressed\", \"pseudoInvalid\", \"ngModel\", \"ngModelChange\", \"focusedChange\", \"hoveredChange\", \"pressedChange\", \"keydown.arrowUp.prevent\", \"keydown.arrowDown.prevent\"], [\"polymorpheus-outlet\", \"\", \"automation-id\", \"tui-input-slider__value-content\", 3, \"content\", \"context\", 4, \"ngIf\"], [\"deprecatedSecondary\", \"\"], [1, \"t-slider-wrapper\"], [\"tuiSlider\", \"\", \"type\", \"range\", 3, \"tuiFocusable\", \"max\", \"segments\", \"keySteps\", \"ngModel\", \"keyStepsInput\", \"click\"], [\"class\", \"t-ticks-labels\", 4, \"ngIf\"], [\"polymorpheus-outlet\", \"\", \"automation-id\", \"tui-input-slider__value-content\", 3, \"content\", \"context\"], [1, \"t-ticks-labels\"], [\"automation-id\", \"tui-slider__segment\", 4, \"tuiRepeatTimes\", \"tuiRepeatTimesOf\"], [\"automation-id\", \"tui-slider__segment\"], [4, \"ngIf\"]],\n  template: function TuiInputSliderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"tui-input-number\", 0);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function TuiInputSliderComponent_Template_tui_input_number_ngModelChange_0_listener($event) {\n        return ctx.safelyUpdateValue($event);\n      })(\"focusedChange\", function TuiInputSliderComponent_Template_tui_input_number_focusedChange_0_listener($event) {\n        return ctx.onFocused($event);\n      })(\"hoveredChange\", function TuiInputSliderComponent_Template_tui_input_number_hoveredChange_0_listener($event) {\n        return ctx.onHovered($event);\n      })(\"pressedChange\", function TuiInputSliderComponent_Template_tui_input_number_pressedChange_0_listener($event) {\n        return ctx.onPressed($event);\n      })(\"keydown.arrowUp.prevent\", function TuiInputSliderComponent_Template_tui_input_number_keydown_arrowUp_prevent_0_listener() {\n        return ctx.onVerticalArrowKeyDown(1);\n      })(\"keydown.arrowDown.prevent\", function TuiInputSliderComponent_Template_tui_input_number_keydown_arrowDown_prevent_0_listener() {\n        return ctx.onVerticalArrowKeyDown(-1);\n      });\n      ɵngcc0.ɵɵpipe(1, \"i18nPlural\");\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵtemplate(3, TuiInputSliderComponent_div_3_Template, 1, 4, \"div\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(4, TuiInputSliderComponent_ng_template_4_Template, 1, 1, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵelementStart(6, \"div\", 3)(7, \"input\", 4);\n      ɵngcc0.ɵɵlistener(\"keyStepsInput\", function TuiInputSliderComponent_Template_input_keyStepsInput_7_listener($event) {\n        return ctx.safelyUpdateValue($event);\n      })(\"click\", function TuiInputSliderComponent_Template_input_click_7_listener() {\n        return ctx.focusTextInput();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(8, TuiInputSliderComponent_div_8_Template, 2, 1, \"div\", 5);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r1 = ɵngcc0.ɵɵreference(5);\n\n      ɵngcc0.ɵɵproperty(\"min\", ctx.min)(\"max\", ctx.max)(\"precision\", ctx.precision)(\"decimal\", ctx.decimal)(\"prefix\", ctx.prefix)(\"postfix\", ctx.postfix || ɵngcc0.ɵɵpipeBind2(1, 23, ctx.value, ctx.pluralizeMap || ctx.pluralizeMapFallback))(\"tuiTextfieldCustomContent\", ctx.controller.customContent || _r1)(\"tuiTextfieldSize\", ctx.computedSize)(\"tuiTextfieldLabelOutside\", ctx.computedSize !== \"l\")(\"readOnly\", ctx.readOnly)(\"pseudoFocused\", ctx.computedFocused)(\"pseudoHovered\", ctx.computedHovered)(\"pseudoPressed\", ctx.computedPressed)(\"pseudoInvalid\", ctx.pseudoInvalid)(\"ngModel\", ctx.value);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.computedValueContent && !ctx.focused);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"tuiFocusable\", false)(\"max\", ctx.computedSteps)(\"segments\", ctx.segments)(\"keySteps\", ctx.computedKeySteps)(\"ngModel\", ctx.value);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.readOnly || ctx.disabled || null);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.segments && !ctx.isNew);\n    }\n  },\n  directives: [ɵngcc1.TuiInputNumberComponent, ɵngcc1.TuiInputNumberDirective, ɵngcc2.TuiTextfieldCustomContentDirective, ɵngcc2.TuiTextfieldSizeDirective, ɵngcc2.TuiTextfieldLabelOutsideDirective, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.NgIf, ɵngcc5.PolymorpheusOutletComponent, ɵngcc6.TuiSliderKeyStepsDirective, ɵngcc6.TuiSliderComponent, ɵngcc3.RangeValueAccessor, ɵngcc3.DefaultValueAccessor, ɵngcc7.TuiFocusableDirective, ɵngcc7.TuiRepeatTimesDirective],\n  pipes: [ɵngcc4.I18nPluralPipe, ɵngcc4.AsyncPipe, ɵngcc2.TuiFormatNumberPipe, ɵngcc6.TuiSliderTickLabelPipe],\n  styles: [\"[_nghost-%COMP%]{position:relative;z-index:0;display:block}._segmented._show-ticks-labels[_nghost-%COMP%]{border-bottom:26px solid transparent}.t-slider-wrapper[_ngcontent-%COMP%]{position:absolute;top:100%;left:calc(var(--tui-radius-m)/ 2);right:0;margin:-.5625rem 0 0}input[type=range][_ngcontent-%COMP%]{border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}.t-ticks-labels[_ngcontent-%COMP%]{display:flex;margin:0 .5rem;font:var(--tui-font-text-s);color:var(--tui-text-02)}.t-ticks-labels[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative;flex:2;text-align:center}.t-ticks-labels[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:first-child{left:-.5rem;flex:1;text-align:left}.t-ticks-labels[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:last-child{right:-.5rem;flex:1;text-align:right}tui-input-slider[_ngcontent-%COMP%] + .t-ticks-labels[_ngcontent-%COMP%]{margin-left:calc(var(--tui-radius-m)/ 2 + .5rem)}\"],\n  changeDetection: 0\n});\n\nTuiInputSliderComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}, {\n  type: TuiTextfieldController,\n  decorators: [{\n    type: Inject,\n    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_NUMBER_FORMAT]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Inject,\n    args: [TUI_FROM_TO_TEXTS]\n  }]\n}, {\n  type: TuiNewInputSliderDirective,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TuiNewInputSliderDirective]\n  }]\n}];\n\n__decorate([ViewChild(TuiInputNumberComponent)], TuiInputSliderComponent.prototype, \"inputNumberRef\", void 0);\n\n__decorate([ViewChild(TuiSliderComponent, {\n  read: ElementRef\n})], TuiInputSliderComponent.prototype, \"sliderRef\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"min\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"max\", void 0);\n\n__decorate([Input(), tuiDefaultProp(quantumAssertion, 'Quantum must be positive')], TuiInputSliderComponent.prototype, \"quantum\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"steps\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"segments\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"keySteps\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"valueContent\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"prefix\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"postfix\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"size\", void 0);\n\n__decorate([Input(), tuiDefaultProp()], TuiInputSliderComponent.prototype, \"secondary\", void 0);\n\nTuiInputSliderComponent = TuiInputSliderComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_TEXTFIELD_WATCHED_CONTROLLER)), __param(3, Inject(TUI_NUMBER_FORMAT)), __param(4, Inject(TUI_FROM_TO_TEXTS)), __param(5, Optional()), __param(5, Inject(TuiNewInputSliderDirective))], TuiInputSliderComponent);\n\nfunction quantumAssertion(quantum) {\n  return quantum > 0;\n}\n/**\n * @deprecated helper for backward compatibility.\n * TODO remove in v3.0\n */\n\n\nfunction legacyMinMaxLabel({\n  min,\n  max,\n  minLabel,\n  maxLabel\n}) {\n  return ({\n    $implicit: value\n  }) => {\n    switch (value) {\n      case min:\n        return minLabel || value;\n\n      case max:\n        return maxLabel || value;\n\n      default:\n        return value;\n    }\n  };\n}\n\nlet TuiInputSliderModule = /*#__PURE__*/(() => {\n  let TuiInputSliderModule = class TuiInputSliderModule {};\n\n  TuiInputSliderModule.ɵfac = function TuiInputSliderModule_Factory(t) {\n    return new (t || TuiInputSliderModule)();\n  };\n\n  TuiInputSliderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputSliderModule\n  });\n  TuiInputSliderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, TuiFocusableModule, TuiSliderModule, TuiFormatNumberPipeModule, TuiRepeatTimesModule, PolymorpheusModule, TuiInputNumberModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputSliderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputSliderModule, {\n    declarations: function () {\n      return [TuiInputSliderComponent, TuiNewInputSliderDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ReactiveFormsModule, TuiFocusableModule, TuiSliderModule, TuiFormatNumberPipeModule, TuiRepeatTimesModule, PolymorpheusModule, TuiInputNumberModule, TuiTextfieldControllerModule];\n    },\n    exports: function () {\n      return [TuiInputSliderComponent, TuiNewInputSliderDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiInputSliderComponent, TuiInputSliderModule, TuiNewInputSliderDirective }; //# sourceMappingURL=taiga-ui-kit-components-input-slider.js.map","map":null,"metadata":{},"sourceType":"module"}