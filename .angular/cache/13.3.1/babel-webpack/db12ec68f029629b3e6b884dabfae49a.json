{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { forwardRef, Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, Component, ChangeDetectionStrategy, Directive, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiControl, AbstractTuiNullableControl, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, TuiMonthRange, tuiDefaultProp, TuiDestroyService, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule } from '@taiga-ui/cdk';\nimport { TuiMonthPipe, sizeBigger, TuiTextfieldSizeDirective, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, TuiAbstractTextfieldHost, TUI_TEXTFIELD_HOST, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';\nimport { LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER, TUI_MONTH_FORMATTER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { Subject, combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { TuiCalendarMonthModule } from '@taiga-ui/kit/components/calendar-month';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nimport * as ɵngcc3 from '@taiga-ui/kit/components/calendar-month';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@angular/forms';\nimport * as ɵngcc6 from 'rxjs';\n\nfunction TuiInputMonthRangeComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tui-calendar-month\", 3);\n    ɵngcc0.ɵɵlistener(\"monthClick\", function TuiInputMonthRangeComponent_ng_template_8_Template_tui_calendar_month_monthClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onMonthClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabledItemHandler\", ctx_r1.disabledItemHandler)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"value\", ctx_r1.value);\n  }\n}\n\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst TUI_INPUT_MONTH_RANGE_PROVIDERS = [{\n  provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n  useExisting: forwardRef(() => TuiInputMonthRangeComponent)\n}, {\n  provide: AbstractTuiControl,\n  useExisting: forwardRef(() => TuiInputMonthRangeComponent)\n}, LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER, TUI_MONTH_FORMATTER_PROVIDER, TuiMonthPipe]; // @dynamic\n\nlet TuiInputMonthRangeComponent = /*#__PURE__*/(() => {\n  let TuiInputMonthRangeComponent = class TuiInputMonthRangeComponent extends AbstractTuiNullableControl {\n    constructor(control, changeDetectorRef, formatter, textfieldSize) {\n      super(control, changeDetectorRef);\n      this.formatter = formatter;\n      this.textfieldSize = textfieldSize;\n      this.min = TUI_FIRST_DAY;\n      this.max = TUI_LAST_DAY;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.open = false;\n    }\n\n    get nativeFocusableElement() {\n      return this.textfield ? this.textfield.nativeFocusableElement : null;\n    }\n\n    get focused() {\n      return !!this.textfield && this.textfield.focused;\n    }\n\n    get calendarIcon() {\n      return sizeBigger(this.textfieldSize.size) ? 'tuiIconCalendarLarge' : 'tuiIconCalendar';\n    }\n\n    computeValue(from, to) {\n      const formattedTo = from === to && this.focused ? '' : to;\n      return `${from} — ${formattedTo}`;\n    }\n\n    onValueChange(value) {\n      if (value) {\n        return;\n      }\n\n      this.updateValue(null);\n      this.onOpenChange(true);\n    }\n\n    onMonthClick(month) {\n      if (this.value === null || !this.value.isSingleMonth) {\n        this.writeValue(new TuiMonthRange(month, month));\n        return;\n      }\n\n      this.updateValue(TuiMonthRange.sort(this.value.from, month));\n      this.close();\n    }\n\n    onHovered(hovered) {\n      this.updateHovered(hovered);\n    }\n\n    onOpenChange(open) {\n      this.open = open;\n    }\n\n    onActiveZone(focused) {\n      this.updateFocused(focused);\n\n      if (focused) {\n        return;\n      }\n\n      if (this.value && this.value.isSingleMonth) {\n        this.updateValue(new TuiMonthRange(this.value.from, this.value.from));\n      }\n    }\n\n    setDisabledState() {\n      super.setDisabledState();\n      this.close();\n    }\n\n    close() {\n      this.open = false;\n    }\n\n  };\n\n  TuiInputMonthRangeComponent.ɵfac = function TuiInputMonthRangeComponent_Factory(t) {\n    return new (t || TuiInputMonthRangeComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TUI_MONTH_FORMATTER), ɵngcc0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));\n  };\n\n  TuiInputMonthRangeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TuiInputMonthRangeComponent,\n    selectors: [[\"tui-input-month-range\"]],\n    viewQuery: function TuiInputMonthRangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      disabledItemHandler: \"disabledItemHandler\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature(TUI_INPUT_MONTH_RANGE_PROVIDERS), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 10,\n    vars: 22,\n    consts: [[1, \"hosted\", 3, \"canOpen\", \"content\", \"open\", \"openChange\", \"tuiActiveZoneChange\"], [1, \"textfield\", 3, \"editable\", \"disabled\", \"nativeId\", \"readOnly\", \"iconContent\", \"pseudoFocused\", \"pseudoHovered\", \"invalid\", \"value\", \"valueChange\", \"hoveredChange\"], [\"dropdown\", \"\"], [\"tuiPreventDefault\", \"mousedown\", 3, \"disabledItemHandler\", \"min\", \"max\", \"value\", \"monthClick\"]],\n    template: function TuiInputMonthRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n        ɵngcc0.ɵɵlistener(\"openChange\", function TuiInputMonthRangeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          return ctx.onOpenChange($event);\n        })(\"tuiActiveZoneChange\", function TuiInputMonthRangeComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {\n          return ctx.onActiveZone($event);\n        });\n        ɵngcc0.ɵɵelementStart(1, \"tui-primitive-textfield\", 1);\n        ɵngcc0.ɵɵlistener(\"valueChange\", function TuiInputMonthRangeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          return ctx.onValueChange($event);\n        })(\"hoveredChange\", function TuiInputMonthRangeComponent_Template_tui_primitive_textfield_hoveredChange_1_listener($event) {\n          return ctx.onHovered($event);\n        });\n        ɵngcc0.ɵɵpipe(2, \"async\");\n        ɵngcc0.ɵɵpipe(3, \"tuiMapper\");\n        ɵngcc0.ɵɵpipe(4, \"async\");\n        ɵngcc0.ɵɵpipe(5, \"tuiMapper\");\n        ɵngcc0.ɵɵprojection(6);\n        ɵngcc0.ɵɵprojection(7, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, TuiInputMonthRangeComponent_ng_template_8_Template, 1, 4, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(9);\n\n        ɵngcc0.ɵɵproperty(\"canOpen\", ctx.interactive)(\"content\", _r0)(\"open\", ctx.open && ctx.interactive);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"editable\", false)(\"disabled\", ctx.computedDisabled)(\"nativeId\", ctx.nativeId)(\"readOnly\", ctx.readOnly)(\"iconContent\", ctx.calendarIcon)(\"pseudoFocused\", ctx.pseudoFocused)(\"pseudoHovered\", ctx.pseudoHovered)(\"invalid\", ctx.computedInvalid)(\"value\", ctx.value ? ctx.computeValue(ɵngcc0.ɵɵpipeBind1(2, 12, ɵngcc0.ɵɵpipeBind2(3, 14, ctx.value.from, ctx.formatter)), ɵngcc0.ɵɵpipeBind1(4, 17, ɵngcc0.ɵɵpipeBind2(5, 19, ctx.value.to, ctx.formatter))) : \"\");\n      }\n    },\n    directives: [ɵngcc1.TuiHostedDropdownComponent, ɵngcc2.TuiActiveZoneDirective, ɵngcc1.TuiPrimitiveTextfieldComponent, ɵngcc1.TuiPrimitiveTextfieldDirective, ɵngcc3.TuiCalendarMonthComponent, ɵngcc2.TuiPreventDefaultDirective],\n    pipes: [ɵngcc4.AsyncPipe, ɵngcc2.TuiMapperPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.icon[_ngcontent-%COMP%]{position:relative;cursor:pointer}\"],\n    changeDetection: 0\n  });\n\n  __decorate([ViewChild(TuiPrimitiveTextfieldComponent)], TuiInputMonthRangeComponent.prototype, \"textfield\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputMonthRangeComponent.prototype, \"min\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputMonthRangeComponent.prototype, \"max\", void 0);\n\n  __decorate([Input(), tuiDefaultProp()], TuiInputMonthRangeComponent.prototype, \"disabledItemHandler\", void 0);\n\n  TuiInputMonthRangeComponent = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(ChangeDetectorRef)), __param(2, Inject(TUI_MONTH_FORMATTER)), __param(3, Inject(TUI_TEXTFIELD_SIZE))], TuiInputMonthRangeComponent);\n  return TuiInputMonthRangeComponent;\n})();\nvar TuiInputMonthRangeDirective_1;\nlet TuiInputMonthRangeDirective = TuiInputMonthRangeDirective_1 = class TuiInputMonthRangeDirective extends TuiAbstractTextfieldHost {\n  constructor(host, formatter, destroy$) {\n    super(host);\n    this.value$ = new Subject();\n    this.localizedValue = ['', ''];\n    this.value$.pipe(distinctUntilChanged(), switchMap(value => combineLatest([formatter(value && value.from), formatter(value && value.to)])), takeUntil(destroy$)).subscribe(localizedValue => {\n      this.localizedValue = localizedValue;\n    });\n  }\n\n  get readOnly() {\n    return true;\n  }\n\n  get value() {\n    return this.localizedValue[0] ? this.host.computeValue(...this.localizedValue) : '';\n  }\n\n  ngDoCheck() {\n    this.value$.next(this.host.value);\n  }\n\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n\n};\n\nTuiInputMonthRangeDirective.ɵfac = function TuiInputMonthRangeDirective_Factory(t) {\n  return new (t || TuiInputMonthRangeDirective)(ɵngcc0.ɵɵdirectiveInject(AbstractTuiControl), ɵngcc0.ɵɵdirectiveInject(TUI_MONTH_FORMATTER), ɵngcc0.ɵɵdirectiveInject(TuiDestroyService, 2));\n};\n\nTuiInputMonthRangeDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TuiInputMonthRangeDirective,\n  selectors: [[\"tui-input-month-range\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting: forwardRef(() => TuiInputMonthRangeDirective_1)\n  }, TuiDestroyService]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nTuiInputMonthRangeDirective.ctorParameters = () => [{\n  type: TuiInputMonthRangeComponent,\n  decorators: [{\n    type: Inject,\n    args: [AbstractTuiControl]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_MONTH_FORMATTER]\n  }]\n}, {\n  type: Observable,\n  decorators: [{\n    type: Self\n  }, {\n    type: Inject,\n    args: [TuiDestroyService]\n  }]\n}];\n\nTuiInputMonthRangeDirective = TuiInputMonthRangeDirective_1 = __decorate([__param(0, Inject(AbstractTuiControl)), __param(1, Inject(TUI_MONTH_FORMATTER)), __param(2, Self()), __param(2, Inject(TuiDestroyService))], TuiInputMonthRangeDirective);\nlet TuiInputMonthRangeModule = /*#__PURE__*/(() => {\n  let TuiInputMonthRangeModule = class TuiInputMonthRangeModule {};\n\n  TuiInputMonthRangeModule.ɵfac = function TuiInputMonthRangeModule_Factory(t) {\n    return new (t || TuiInputMonthRangeModule)();\n  };\n\n  TuiInputMonthRangeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiInputMonthRangeModule\n  });\n  TuiInputMonthRangeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule]]\n  });\n  return TuiInputMonthRangeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiInputMonthRangeModule, {\n    declarations: function () {\n      return [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective];\n    },\n    imports: function () {\n      return [CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule];\n    },\n    exports: function () {\n      return [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective, TuiTextfieldComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TUI_INPUT_MONTH_RANGE_PROVIDERS, TuiInputMonthRangeComponent, TuiInputMonthRangeDirective, TuiInputMonthRangeModule }; //# sourceMappingURL=taiga-ui-kit-components-input-month-range.js.map","map":null,"metadata":{},"sourceType":"module"}