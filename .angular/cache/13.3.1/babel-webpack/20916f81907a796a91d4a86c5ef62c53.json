{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Optional, Self, Inject, ChangeDetectorRef, ViewChild, Input, HostBinding, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { AbstractTuiNullableControl, isNativeFocused, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule } from '@taiga-ui/cdk';\nimport { TUI_CHECKBOX_OPTIONS, TuiPrimitiveCheckboxModule } from '@taiga-ui/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@taiga-ui/core';\nimport * as ɵngcc2 from '@taiga-ui/cdk';\nimport * as ɵngcc3 from '@angular/forms';\nconst _c0 = [\"focusableElement\"];\nvar TuiCheckboxComponent_1;\nlet TuiCheckboxComponent = TuiCheckboxComponent_1 = class TuiCheckboxComponent extends AbstractTuiNullableControl {\n  constructor(control, options, changeDetectorRef) {\n    super(control, changeDetectorRef);\n    this.options = options;\n    this.size = this.options.size;\n  }\n\n  get nativeFocusableElement() {\n    return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;\n  }\n\n  get focused() {\n    return isNativeFocused(this.nativeFocusableElement);\n  }\n\n  get computedFocusable() {\n    return this.interactive && this.focusable;\n  }\n\n  onChecked(checked) {\n    this.updateValue(checked);\n  }\n\n  onFocused(focused) {\n    this.updateFocused(focused);\n  }\n\n  onHovered(hovered) {\n    this.updateHovered(hovered);\n  }\n\n  onPressed(pressed) {\n    this.updatePressed(pressed);\n  }\n\n  onFocusVisible(focusVisible) {\n    this.updateFocusVisible(focusVisible);\n  }\n\n};\n\nTuiCheckboxComponent.ɵfac = function TuiCheckboxComponent_Factory(t) {\n  return new (t || TuiCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(NgControl, 10), ɵngcc0.ɵɵdirectiveInject(TUI_CHECKBOX_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef));\n};\n\nTuiCheckboxComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TuiCheckboxComponent,\n  selectors: [[\"tui-checkbox\"]],\n  viewQuery: function TuiCheckboxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.focusableElement = _t.first);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function TuiCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-size\", ctx.size);\n    }\n  },\n  inputs: {\n    size: \"size\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,\n    useExisting: forwardRef(() => TuiCheckboxComponent_1)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 11,\n  consts: [[3, \"size\", \"disabled\", \"focused\", \"hovered\", \"pressed\", \"invalid\", \"value\"], [\"type\", \"checkbox\", \"automation-id\", \"tui-checkbox__native\", 1, \"native\", 3, \"disabled\", \"id\", \"tuiChecked\", \"tuiFocusable\", \"tuiFocusedChange\", \"tuiHoveredChange\", \"tuiPressedChange\", \"tuiCheckedChange\", \"tuiFocusVisibleChange\"], [\"focusableElement\", \"\"]],\n  template: function TuiCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"tui-primitive-checkbox\", 0)(1, \"input\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"tuiFocusedChange\", function TuiCheckboxComponent_Template_input_tuiFocusedChange_1_listener($event) {\n        return ctx.onFocused($event);\n      })(\"tuiHoveredChange\", function TuiCheckboxComponent_Template_input_tuiHoveredChange_1_listener($event) {\n        return ctx.onHovered($event);\n      })(\"tuiPressedChange\", function TuiCheckboxComponent_Template_input_tuiPressedChange_1_listener($event) {\n        return ctx.onPressed($event);\n      })(\"tuiCheckedChange\", function TuiCheckboxComponent_Template_input_tuiCheckedChange_1_listener($event) {\n        return ctx.onChecked($event);\n      })(\"tuiFocusVisibleChange\", function TuiCheckboxComponent_Template_input_tuiFocusVisibleChange_1_listener($event) {\n        return ctx.onFocusVisible($event);\n      });\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"size\", ctx.size)(\"disabled\", ctx.disabled)(\"focused\", ctx.computedFocusVisible)(\"hovered\", ctx.computedHovered)(\"pressed\", ctx.computedPressed)(\"invalid\", ctx.computedInvalid)(\"value\", ctx.value);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"id\", ctx.id)(\"tuiChecked\", ctx.value)(\"tuiFocusable\", ctx.computedFocusable);\n    }\n  },\n  directives: [ɵngcc1.TuiPrimitiveCheckboxComponent, ɵngcc2.TuiCheckedDirective, ɵngcc2.TuiFocusableDirective, ɵngcc2.TuiFocusedDirective, ɵngcc2.TuiHoveredDirective, ɵngcc2.TuiPressedDirective, ɵngcc2.TuiFocusVisibleDirective],\n  styles: [\"[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0}[data-size='m'][_nghost-%COMP%]{width:1rem;height:1rem}[data-size='l'][_nghost-%COMP%]{width:1.5rem;height:1.5rem}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.native[_ngcontent-%COMP%]{padding:0;border:0;border-radius:inherit;background:0 0;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.native[_ngcontent-%COMP%]:-webkit-autofill, .native[_ngcontent-%COMP%]:-webkit-autofill:focus, .native[_ngcontent-%COMP%]:-webkit-autofill:hover{border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 1000px var(--tui-autofill) inset!important}\"],\n  changeDetection: 0\n});\n\nTuiCheckboxComponent.ctorParameters = () => [{\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [NgControl]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TUI_CHECKBOX_OPTIONS]\n  }]\n}, {\n  type: ChangeDetectorRef,\n  decorators: [{\n    type: Inject,\n    args: [ChangeDetectorRef]\n  }]\n}];\n\n__decorate([ViewChild('focusableElement')], TuiCheckboxComponent.prototype, \"focusableElement\", void 0);\n\n__decorate([Input(), HostBinding('attr.data-size'), tuiDefaultProp()], TuiCheckboxComponent.prototype, \"size\", void 0);\n\nTuiCheckboxComponent = TuiCheckboxComponent_1 = __decorate([__param(0, Optional()), __param(0, Self()), __param(0, Inject(NgControl)), __param(1, Inject(TUI_CHECKBOX_OPTIONS)), __param(2, Inject(ChangeDetectorRef))], TuiCheckboxComponent);\nlet TuiCheckboxModule = /*#__PURE__*/(() => {\n  let TuiCheckboxModule = class TuiCheckboxModule {};\n\n  TuiCheckboxModule.ɵfac = function TuiCheckboxModule_Factory(t) {\n    return new (t || TuiCheckboxModule)();\n  };\n\n  TuiCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TuiCheckboxModule\n  });\n  TuiCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule, TuiPrimitiveCheckboxModule]]\n  });\n  return TuiCheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TuiCheckboxModule, {\n    declarations: function () {\n      return [TuiCheckboxComponent];\n    },\n    imports: function () {\n      return [CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiHoveredModule, TuiPressedModule, TuiFocusVisibleModule, TuiPrimitiveCheckboxModule];\n    },\n    exports: function () {\n      return [TuiCheckboxComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TuiCheckboxComponent, TuiCheckboxModule }; //# sourceMappingURL=taiga-ui-kit-components-checkbox.js.map","map":null,"metadata":{},"sourceType":"module"}